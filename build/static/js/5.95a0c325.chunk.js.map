{"version":3,"sources":["components/ContextualInfo/index.js","assets/images/dropup-blue.svg","assets/images/plus-blue.svg","assets/images/plus-grey.svg","pages/Pool/AddLiquidity.js"],"names":["SummaryWrapper","styled","div","error","theme","salmonRed","doveGray","Details","concreteGray","SummaryWrapperContainer","flexRowNoWrap","royalBlue","ContextualInfo","state","showDetails","this","props","renderTransactionDetails","openDetailsText","closeDetailsText","contextualInfo","isError","onClick","setState","prevState","src","DropupBlue","alt","DropdownBlue","renderDetails","Component","defaultProps","module","exports","ALLOWED_SLIPPAGE","ethers","utils","bigNumberify","GAS_MARGIN","BlueSpan","span","NewExchangeWarning","NewExchangeWarningText","LastSummaryText","DownArrowBackground","DownArrow","img","SummaryPanel","flexColumnNoWrap","ExchangeRateWrapper","ExchangeRate","chaliceGray","Flex","calculateSlippageBounds","value","offset","mul","minimum","sub","maximum","add","lt","constants","Zero","gt","MaxUint256","initialAddLiquidityState","inputValue","outputValue","lastEditedField","outputCurrency","addLiquidityStateReducer","action","type","payload","field","getExchangeRate","inputDecimals","outputDecimals","invert","factor","pow","getMarketRate","reserveETH","reserveToken","decimals","AddLiquidity","t","useTranslation","useWeb3Context","library","active","account","useReducer","addLiquidityState","dispatchAddLiquidityState","useState","inputValueParsed","setInputValueParsed","outputValueParsed","setOutputValueParsed","inputError","setInputError","outputError","setOutputError","useTokenDetails","symbol","exchangeAddress","exchangeContract","useExchangeContract","totalPoolTokens","setTotalPoolTokens","fetchPoolTokens","useCallback","totalSupply","then","useEffect","on","removeListener","poolTokenBalance","useAddressBalance","exchangeETHBalance","exchangeTokenBalance","useExchangeReserves","isNewExchange","isZero","poolTokenPercentage","undefined","ethShare","tokenShare","liquidityMinted","inputBalance","outputBalance","ethPerLiquidityToken","tokenPerLiquidityToken","outputValueMax","liquidityTokensMin","marketRate","useMemo","marketRateInverted","ReactGA","event","category","b","text","amountFormatter","Math","min","addTransaction","useTransactionAdder","isActive","isValid","a","deadline","ceil","Date","now","estimate","addLiquidity","estimatedGasLimit","gasLimit","calculateGasMargin","response","formatBalance","parsedInputValue","parseUnits","parsedOutputValue","parsedValue","lte","gte","Error","currencyAmount","allowance","useAddressAllowance","showUnlock","setShowUnlock","role","aria-label","title","extraText","onValueChange","selectedTokenAddress","errorMessage","disableTokenSelect","PlusBlue","PlusGrey","description","onCurrencySelected","hideBottom","renderSummary","disabled"],"mappings":"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","file":"static/js/5.95a0c325.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport DropdownBlue from '../../assets/images/dropdown-blue.svg'\nimport DropupBlue from '../../assets/images/dropup-blue.svg'\n\nconst SummaryWrapper = styled.div`\n  color: ${({ error, theme }) => (error ? theme.salmonRed : theme.doveGray)};\n  font-size: 0.75rem;\n  text-align: center;\n  margin-top: 1rem;\n  padding-top: 1rem;\n`\n\nconst Details = styled.div`\n  background-color: ${({ theme }) => theme.concreteGray};\n  padding: 1.5rem;\n  border-radius: 1rem;\n  font-size: 0.75rem;\n  margin-top: 1rem;\n`\n\nconst SummaryWrapperContainer = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  color: ${({ theme }) => theme.royalBlue};\n  text-align: center;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  cursor: pointer;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75rem;\n\n  span {\n    margin-right: 12px;\n  }\n\n  img {\n    height: 0.75rem;\n    width: 0.75rem;\n  }\n`\n\nclass ContextualInfo extends Component {\n  static propTypes = {\n    openDetailsText: PropTypes.string,\n    renderTransactionDetails: PropTypes.func,\n    contextualInfo: PropTypes.string,\n    isError: PropTypes.bool\n  }\n\n  static defaultProps = {\n    openDetailsText: 'Transaction Details',\n    closeDetailsText: 'Hide Details',\n    renderTransactionDetails() {},\n    contextualInfo: '',\n    isError: false\n  }\n\n  state = {\n    showDetails: false\n  }\n\n  renderDetails() {\n    if (!this.state.showDetails) {\n      return null\n    }\n\n    return <Details>{this.props.renderTransactionDetails()}</Details>\n  }\n\n  render() {\n    const { openDetailsText, closeDetailsText, contextualInfo, isError } = this.props\n\n    if (contextualInfo) {\n      return <SummaryWrapper error={isError}>{contextualInfo}</SummaryWrapper>\n    }\n\n    return (\n      <>\n        <SummaryWrapperContainer\n          onClick={() =>\n            this.setState(prevState => {\n              return { showDetails: !prevState.showDetails }\n            })\n          }\n        >\n          {!this.state.showDetails ? (\n            <>\n              <span>{openDetailsText}</span>\n              <img src={DropdownBlue} alt=\"dropdown\" />\n            </>\n          ) : (\n            <>\n              <span>{closeDetailsText}</span>\n              <img src={DropupBlue} alt=\"dropup\" />\n            </>\n          )}\n        </SummaryWrapperContainer>\n        {this.renderDetails()}\n      </>\n    )\n  }\n}\n\nexport default ContextualInfo\n","module.exports = __webpack_public_path__ + \"static/media/dropup-blue.b96d70e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-blue.e8021e51.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-grey.d8e0be7d.svg\";","import React, { useReducer, useState, useCallback, useEffect, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useWeb3Context } from 'web3-react'\nimport { ethers } from 'ethers'\nimport ReactGA from 'react-ga'\nimport styled from 'styled-components'\n\nimport { Button } from '../../theme'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport OversizedPanel from '../../components/OversizedPanel'\nimport ContextualInfo from '../../components/ContextualInfo'\nimport PlusBlue from '../../assets/images/plus-blue.svg'\nimport PlusGrey from '../../assets/images/plus-grey.svg'\nimport { useExchangeContract } from '../../hooks'\nimport { amountFormatter, calculateGasMargin } from '../../utils'\nimport { useTransactionAdder } from '../../contexts/Transactions'\nimport { useTokenDetails } from '../../contexts/Tokens'\nimport { useAddressBalance, useExchangeReserves } from '../../contexts/Balances'\nimport { useAddressAllowance } from '../../contexts/Allowances'\n\nconst INPUT = 0\nconst OUTPUT = 1\n\n// denominated in bips\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200)\n\n// denominated in seconds\nconst DEADLINE_FROM_NOW = 60 * 15\n\n// denominated in bips\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000)\n\nconst BlueSpan = styled.span`\n  color: ${({ theme }) => theme.royalBlue};\n`\n\nconst NewExchangeWarning = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  margin-bottom: 2rem;\n  border: 1px solid rgba($pizazz-orange, 0.4);\n  background-color: rgba($pizazz-orange, 0.1);\n  border-radius: 1rem;\n`\n\nconst NewExchangeWarningText = styled.div`\n  font-size: 0.75rem;\n  line-height: 1rem;\n  text-align: center;\n\n  :first-child {\n    padding-bottom: 0.3rem;\n    font-weight: 500;\n  }\n`\n\nconst LastSummaryText = styled.div`\n  margin-top: 1rem;\n`\n\nconst DownArrowBackground = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`\n\nconst DownArrow = styled.img`\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n`\n\nconst SummaryPanel = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  padding: 1rem 0;\n`\n\nconst ExchangeRateWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({ theme }) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`\n\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({ theme }) => theme.chaliceGray};\n`\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`\n\nfunction calculateSlippageBounds(value) {\n  if (value) {\n    const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000))\n    const minimum = value.sub(offset)\n    const maximum = value.add(offset)\n    return {\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\n    }\n  } else {\n    return {}\n  }\n}\n\nconst initialAddLiquidityState = {\n  inputValue: '',\n  outputValue: '',\n  lastEditedField: INPUT,\n  outputCurrency: ''\n}\n\nfunction addLiquidityStateReducer(state, action) {\n  switch (action.type) {\n    case 'SELECT_CURRENCY': {\n      return {\n        ...state,\n        outputCurrency: action.payload\n      }\n    }\n    case 'UPDATE_VALUE': {\n      const { inputValue, outputValue } = state\n      const { field, value } = action.payload\n      return {\n        ...state,\n        inputValue: field === INPUT ? value : inputValue,\n        outputValue: field === OUTPUT ? value : outputValue,\n        lastEditedField: field\n      }\n    }\n    case 'UPDATE_DEPENDENT_VALUE': {\n      const { inputValue, outputValue } = state\n      const { field, value } = action.payload\n      return {\n        ...state,\n        inputValue: field === INPUT ? value : inputValue,\n        outputValue: field === OUTPUT ? value : outputValue\n      }\n    }\n    default: {\n      return initialAddLiquidityState\n    }\n  }\n}\n\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n  try {\n    if (\n      inputValue &&\n      (inputDecimals || inputDecimals === 0) &&\n      outputValue &&\n      (outputDecimals || outputDecimals === 0)\n    ) {\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\n\n      if (invert) {\n        return inputValue\n          .mul(factor)\n          .div(outputValue)\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\n      } else {\n        return outputValue\n          .mul(factor)\n          .div(inputValue)\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(reserveETH, reserveToken, decimals, invert = false) {\n  return getExchangeRate(reserveETH, 18, reserveToken, decimals, invert)\n}\n\nexport default function AddLiquidity() {\n  const { t } = useTranslation()\n  const { library, active, account } = useWeb3Context()\n\n  const [addLiquidityState, dispatchAddLiquidityState] = useReducer(addLiquidityStateReducer, initialAddLiquidityState)\n  const { inputValue, outputValue, lastEditedField, outputCurrency } = addLiquidityState\n  const inputCurrency = 'ETH'\n\n  const [inputValueParsed, setInputValueParsed] = useState()\n  const [outputValueParsed, setOutputValueParsed] = useState()\n  const [inputError, setInputError] = useState()\n  const [outputError, setOutputError] = useState()\n\n  const { symbol, decimals, exchangeAddress } = useTokenDetails(outputCurrency)\n  const exchangeContract = useExchangeContract(exchangeAddress)\n\n  const [totalPoolTokens, setTotalPoolTokens] = useState()\n  const fetchPoolTokens = useCallback(() => {\n    if (exchangeContract) {\n      exchangeContract.totalSupply().then(totalSupply => {\n        setTotalPoolTokens(totalSupply)\n      })\n    }\n  }, [exchangeContract])\n  useEffect(() => {\n    fetchPoolTokens()\n    library.on('block', fetchPoolTokens)\n\n    return () => {\n      library.removeListener('block', fetchPoolTokens)\n    }\n  }, [fetchPoolTokens, library])\n\n  const poolTokenBalance = useAddressBalance(account, exchangeAddress)\n  const exchangeETHBalance = useAddressBalance(exchangeAddress, 'ETH')\n  const exchangeTokenBalance = useAddressBalance(exchangeAddress, outputCurrency)\n\n  const { reserveETH, reserveToken } = useExchangeReserves(outputCurrency)\n  const isNewExchange = !!(reserveETH && reserveToken && reserveETH.isZero() && reserveToken.isZero())\n\n  // 18 decimals\n  const poolTokenPercentage =\n    poolTokenBalance && totalPoolTokens && isNewExchange === false && !totalPoolTokens.isZero()\n      ? poolTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\n      : undefined\n  const ethShare =\n    exchangeETHBalance && poolTokenPercentage\n      ? exchangeETHBalance\n          .mul(poolTokenPercentage)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n      : undefined\n  const tokenShare =\n    exchangeTokenBalance && poolTokenPercentage\n      ? exchangeTokenBalance\n          .mul(poolTokenPercentage)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n      : undefined\n\n  const liquidityMinted = isNewExchange\n    ? inputValueParsed\n    : totalPoolTokens && inputValueParsed && exchangeETHBalance && !exchangeETHBalance.isZero()\n    ? totalPoolTokens.mul(inputValueParsed).div(exchangeETHBalance)\n    : undefined\n\n  // user balances\n  const inputBalance = useAddressBalance(account, inputCurrency)\n  const outputBalance = useAddressBalance(account, outputCurrency)\n\n  const ethPerLiquidityToken =\n    exchangeETHBalance && totalPoolTokens && isNewExchange === false && !totalPoolTokens.isZero()\n      ? exchangeETHBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\n      : undefined\n  const tokenPerLiquidityToken =\n    exchangeTokenBalance && totalPoolTokens && isNewExchange === false && !totalPoolTokens.isZero()\n      ? exchangeTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\n      : undefined\n\n  const outputValueMax = outputValueParsed && calculateSlippageBounds(outputValueParsed).maximum\n  const liquidityTokensMin = liquidityMinted && calculateSlippageBounds(liquidityMinted).minimum\n\n  const marketRate = useMemo(() => {\n    return getMarketRate(reserveETH, reserveToken, decimals)\n  }, [reserveETH, reserveToken, decimals])\n  const marketRateInverted = useMemo(() => {\n    return getMarketRate(reserveETH, reserveToken, decimals, true)\n  }, [reserveETH, reserveToken, decimals])\n\n  function renderTransactionDetails() {\n    ReactGA.event({\n      category: 'TransactionDetail',\n      action: 'Open'\n    })\n\n    const b = text => <BlueSpan>{text}</BlueSpan>\n\n    if (isNewExchange) {\n      return (\n        <div>\n          <div>\n            {t('youAreAdding')} {b(`${inputValue} ETH`)} {t('and')} {b(`${outputValue} ${symbol}`)} {t('intoPool')}\n          </div>\n          <LastSummaryText>\n            {t('youAreSettingExRate')}{' '}\n            {b(\n              `1 ETH = ${amountFormatter(\n                getMarketRate(inputValueParsed, outputValueParsed, decimals),\n                18,\n                4,\n                false\n              )} ${symbol}`\n            )}\n            .\n          </LastSummaryText>\n          <LastSummaryText>\n            {t('youWillMint')} {b(`${inputValue}`)} {t('liquidityTokens')}\n          </LastSummaryText>\n          <LastSummaryText>{t('totalSupplyIs0')}</LastSummaryText>\n        </div>\n      )\n    } else {\n      return (\n        <>\n          <div>\n            {t('youAreAdding')} {b(`${amountFormatter(inputValueParsed, 18, 4)} ETH`)} {t('and')} {'at most'}{' '}\n            {b(`${amountFormatter(outputValueMax, decimals, 4)} ${symbol}`)} {t('intoPool')}\n          </div>\n          <LastSummaryText>\n            {t('youWillMint')} {b(amountFormatter(liquidityMinted, 18, 4))} {t('liquidityTokens')}\n          </LastSummaryText>\n          <LastSummaryText>\n            {t('totalSupplyIs')} {b(amountFormatter(totalPoolTokens, 18, 4))}\n          </LastSummaryText>\n          <LastSummaryText>\n            {t('tokenWorth')} {b(amountFormatter(ethPerLiquidityToken, 18, 4))} ETH {t('and')}{' '}\n            {b(amountFormatter(tokenPerLiquidityToken, decimals, Math.min(decimals, 4)))} {symbol}\n          </LastSummaryText>\n        </>\n      )\n    }\n  }\n\n  function renderSummary() {\n    let contextualInfo = ''\n    let isError = false\n\n    if (inputError || outputError) {\n      contextualInfo = inputError || outputError\n      isError = true\n    } else if (!inputCurrency || !outputCurrency) {\n      contextualInfo = t('selectTokenCont')\n    } else if (!inputValue) {\n      contextualInfo = t('enterValueCont')\n    } else if (!account) {\n      contextualInfo = t('noWallet')\n      isError = true\n    }\n\n    return (\n      <ContextualInfo\n        openDetailsText={t('transactionDetails')}\n        closeDetailsText={t('hideDetails')}\n        contextualInfo={contextualInfo}\n        isError={isError}\n        renderTransactionDetails={renderTransactionDetails}\n      />\n    )\n  }\n\n  const addTransaction = useTransactionAdder()\n\n  const isActive = active && account\n  const isValid = inputError === null || outputError === null\n\n  async function onAddLiquidity() {\n    ReactGA.event({\n      category: 'Pool',\n      action: 'AddLiquidity'\n    })\n\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\n    const estimatedGasLimit = await exchangeContract.estimate.addLiquidity(\n      isNewExchange ? ethers.constants.Zero : liquidityTokensMin,\n      isNewExchange ? outputValueParsed : outputValueMax,\n      deadline,\n      {\n        value: inputValueParsed\n      }\n    )\n\n    exchangeContract\n      .addLiquidity(\n        isNewExchange ? ethers.constants.Zero : liquidityTokensMin,\n        isNewExchange ? outputValueParsed : outputValueMax,\n        deadline,\n        {\n          value: inputValueParsed,\n          gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\n        }\n      )\n      .then(response => {\n        addTransaction(response)\n      })\n  }\n\n  function formatBalance(value) {\n    return `Balance: ${value}`\n  }\n\n  useEffect(() => {\n    if (isNewExchange) {\n      if (inputValue) {\n        const parsedInputValue = ethers.utils.parseUnits(inputValue, 18)\n        setInputValueParsed(parsedInputValue)\n      }\n\n      if (outputValue) {\n        const parsedOutputValue = ethers.utils.parseUnits(outputValue, decimals)\n        setOutputValueParsed(parsedOutputValue)\n      }\n    }\n  }, [decimals, inputValue, isNewExchange, outputValue])\n\n  // parse input value\n  useEffect(() => {\n    if (isNewExchange === false && inputValue && marketRate && lastEditedField === INPUT && decimals) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(inputValue, 18)\n\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\n          throw Error()\n        }\n\n        setInputValueParsed(parsedValue)\n\n        const currencyAmount = marketRate\n          .mul(parsedValue)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18 - decimals)))\n\n        setOutputValueParsed(currencyAmount)\n        dispatchAddLiquidityState({\n          type: 'UPDATE_DEPENDENT_VALUE',\n          payload: { field: OUTPUT, value: amountFormatter(currencyAmount, decimals, 4, false) }\n        })\n\n        return () => {\n          setOutputError()\n          setInputValueParsed()\n          setOutputValueParsed()\n          dispatchAddLiquidityState({\n            type: 'UPDATE_DEPENDENT_VALUE',\n            payload: { field: OUTPUT, value: '' }\n          })\n        }\n      } catch {\n        setOutputError(t('inputNotValid'))\n      }\n    }\n  }, [inputValue, isNewExchange, lastEditedField, marketRate, decimals, t])\n\n  // parse output value\n  useEffect(() => {\n    if (isNewExchange === false && outputValue && marketRateInverted && lastEditedField === OUTPUT && decimals) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(outputValue, decimals)\n\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\n          throw Error()\n        }\n\n        setOutputValueParsed(parsedValue)\n\n        const currencyAmount = marketRateInverted\n          .mul(parsedValue)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(decimals)))\n\n        setInputValueParsed(currencyAmount)\n        dispatchAddLiquidityState({\n          type: 'UPDATE_DEPENDENT_VALUE',\n          payload: { field: INPUT, value: amountFormatter(currencyAmount, 18, 4, false) }\n        })\n\n        return () => {\n          setInputError()\n          setOutputValueParsed()\n          setInputValueParsed()\n          dispatchAddLiquidityState({\n            type: 'UPDATE_DEPENDENT_VALUE',\n            payload: { field: INPUT, value: '' }\n          })\n        }\n      } catch {\n        setInputError(t('inputNotValid'))\n      }\n    }\n  }, [outputValue, isNewExchange, lastEditedField, marketRateInverted, decimals, t])\n\n  // input validation\n  useEffect(() => {\n    if (inputValueParsed && inputBalance) {\n      if (inputValueParsed.gt(inputBalance)) {\n        setInputError(t('insufficientBalance'))\n      } else {\n        setInputError(null)\n      }\n    }\n\n    if (outputValueMax && outputBalance) {\n      if (outputValueMax.gt(outputBalance)) {\n        setOutputError(t('insufficientBalance'))\n      } else {\n        setOutputError(null)\n      }\n    }\n  }, [inputValueParsed, inputBalance, outputValueMax, outputBalance, t])\n\n  const allowance = useAddressAllowance(account, outputCurrency, exchangeAddress)\n  const [showUnlock, setShowUnlock] = useState(false)\n  useEffect(() => {\n    if (outputValueParsed && allowance) {\n      if (allowance.lt(outputValueParsed)) {\n        setOutputError(t('unlockTokenCont'))\n        setShowUnlock(true)\n      }\n      return () => {\n        setOutputError()\n        setShowUnlock(false)\n      }\n    }\n  }, [outputValueParsed, allowance, t])\n\n  return (\n    <>\n      {isNewExchange ? (\n        <NewExchangeWarning>\n          <NewExchangeWarningText>\n            <span role=\"img\" aria-label=\"first-liquidity\">\n              🚰\n            </span>{' '}\n            {t('firstLiquidity')}\n          </NewExchangeWarningText>\n          <NewExchangeWarningText>{t('initialExchangeRate', { symbol })}</NewExchangeWarningText>\n        </NewExchangeWarning>\n      ) : null}\n\n      <CurrencyInputPanel\n        title={t('deposit')}\n        extraText={inputBalance && formatBalance(amountFormatter(inputBalance, 18, 4))}\n        onValueChange={inputValue => {\n          dispatchAddLiquidityState({ type: 'UPDATE_VALUE', payload: { value: inputValue, field: INPUT } })\n        }}\n        selectedTokenAddress=\"ETH\"\n        value={inputValue}\n        errorMessage={inputError}\n        disableTokenSelect\n      />\n      <OversizedPanel>\n        <DownArrowBackground>\n          <DownArrow src={isActive ? PlusBlue : PlusGrey} alt=\"plus\" />\n        </DownArrowBackground>\n      </OversizedPanel>\n      <CurrencyInputPanel\n        title={t('deposit')}\n        description={isNewExchange ? '' : outputValue ? `(${t('estimated')})` : ''}\n        extraText={outputBalance && formatBalance(amountFormatter(outputBalance, decimals, Math.min(decimals, 4)))}\n        selectedTokenAddress={outputCurrency}\n        onCurrencySelected={outputCurrency => {\n          dispatchAddLiquidityState({ type: 'SELECT_CURRENCY', payload: outputCurrency })\n        }}\n        onValueChange={outputValue => {\n          dispatchAddLiquidityState({ type: 'UPDATE_VALUE', payload: { value: outputValue, field: OUTPUT } })\n        }}\n        value={outputValue}\n        showUnlock={showUnlock}\n        errorMessage={outputError}\n      />\n      <OversizedPanel hideBottom>\n        <SummaryPanel>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('exchangeRate')}</ExchangeRate>\n            <span>{marketRate ? `1 ETH = ${amountFormatter(marketRate, 18, 4)} ${symbol}` : ' - '}</span>\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('currentPoolSize')}</ExchangeRate>\n            <span>\n              {exchangeETHBalance && exchangeTokenBalance\n                ? `${amountFormatter(exchangeETHBalance, 18, 4)} ETH + ${amountFormatter(\n                    exchangeTokenBalance,\n                    decimals,\n                    Math.min(4, decimals)\n                  )} ${symbol}`\n                : ' - '}\n            </span>\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>\n              {t('yourPoolShare')} ({exchangeETHBalance && amountFormatter(poolTokenPercentage, 16, 2)}%)\n            </ExchangeRate>\n            <span>\n              {ethShare && tokenShare\n                ? `${amountFormatter(ethShare, 18, 4)} ETH + ${amountFormatter(\n                    tokenShare,\n                    decimals,\n                    Math.min(4, decimals)\n                  )} ${symbol}`\n                : ' - '}\n            </span>\n          </ExchangeRateWrapper>\n        </SummaryPanel>\n      </OversizedPanel>\n      {renderSummary()}\n      <Flex>\n        <Button disabled={!isValid} onClick={onAddLiquidity}>\n          {t('addLiquidity')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n"],"sourceRoot":""}