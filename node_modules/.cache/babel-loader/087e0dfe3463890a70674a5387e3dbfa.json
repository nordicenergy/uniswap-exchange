{"ast":null,"code":"import { getMarketDetails } from \"@uniswap/sdk\";\nimport { getMedian, getMean } from \"./math\";\nconst DAI = \"DAI\";\nconst USDC = \"USDC\";\nconst TUSD = \"TUSD\";\nconst NESC = \"NESC\";\nconst USD_STABLECOINS = [DAI, USDC, TUSD, NESC];\n\nfunction forEachStablecoin(runner) {\n  return USD_STABLECOINS.map((stablecoin, index) => runner(index, stablecoin));\n}\n\nexport function getUSDPrice(reserves) {\n  const marketDetails = forEachStablecoin(i => getMarketDetails(reserves[i], undefined));\n  const ethPrices = forEachStablecoin(i => marketDetails[i].marketRate.rateInverted);\n  const [median] = getMedian(ethPrices);\n  const [mean] = getMean(ethPrices);\n  const [weightedMean] = getMean(ethPrices, forEachStablecoin(i => reserves[i].ethReserve.amount)); // const _stablecoinWeights = [\n  //   getMean([medianWeights[0], meanWeights[0], weightedMeanWeights[0]])[0],\n  //   getMean([medianWeights[1], meanWeights[1], weightedMeanWeights[1]])[0],\n  //   getMean([medianWeights[2], meanWeights[2], weightedMeanWeights[2]])[0]\n  // ]\n  // const stablecoinWeights = forEachStablecoin((i, stablecoin) => ({\n  //   [stablecoin]: _stablecoinWeights[i]\n  // })).reduce((accumulator, currentValue) => ({ ...accumulator, ...currentValue }), {})\n\n  return getMean([median, mean, weightedMean])[0];\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/utils/price.js"],"names":["getMarketDetails","getMedian","getMean","DAI","USDC","TUSD","NESC","USD_STABLECOINS","forEachStablecoin","runner","map","stablecoin","index","getUSDPrice","reserves","marketDetails","i","undefined","ethPrices","marketRate","rateInverted","median","mean","weightedMean","ethReserve","amount"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,cAAjC;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,QAAnC;AAEA,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,IAAI,GAAG,MAAb;AAEA,MAAMC,eAAe,GAAG,CAACJ,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,IAAlB,CAAxB;;AAEA,SAASE,iBAAT,CAA2BC,MAA3B,EAAmC;AACjC,SAAOF,eAAe,CAACG,GAAhB,CAAoB,CAACC,UAAD,EAAaC,KAAb,KAAuBH,MAAM,CAACG,KAAD,EAAQD,UAAR,CAAjD,CAAP;AACD;;AAED,OAAO,SAASE,WAAT,CAAqBC,QAArB,EAA+B;AACpC,QAAMC,aAAa,GAAGP,iBAAiB,CAACQ,CAAC,IACvChB,gBAAgB,CAACc,QAAQ,CAACE,CAAD,CAAT,EAAcC,SAAd,CADqB,CAAvC;AAGA,QAAMC,SAAS,GAAGV,iBAAiB,CACjCQ,CAAC,IAAID,aAAa,CAACC,CAAD,CAAb,CAAiBG,UAAjB,CAA4BC,YADA,CAAnC;AAIA,QAAM,CAACC,MAAD,IAAWpB,SAAS,CAACiB,SAAD,CAA1B;AACA,QAAM,CAACI,IAAD,IAASpB,OAAO,CAACgB,SAAD,CAAtB;AACA,QAAM,CAACK,YAAD,IAAiBrB,OAAO,CAC5BgB,SAD4B,EAE5BV,iBAAiB,CAACQ,CAAC,IAAIF,QAAQ,CAACE,CAAD,CAAR,CAAYQ,UAAZ,CAAuBC,MAA7B,CAFW,CAA9B,CAVoC,CAepC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOvB,OAAO,CAAC,CAACmB,MAAD,EAASC,IAAT,EAAeC,YAAf,CAAD,CAAP,CAAsC,CAAtC,CAAP;AACD","sourcesContent":["import { getMarketDetails } from \"@uniswap/sdk\";\nimport { getMedian, getMean } from \"./math\";\n\nconst DAI = \"DAI\";\nconst USDC = \"USDC\";\nconst TUSD = \"TUSD\";\nconst NESC = \"NESC\";\n\nconst USD_STABLECOINS = [DAI, USDC, TUSD, NESC];\n\nfunction forEachStablecoin(runner) {\n  return USD_STABLECOINS.map((stablecoin, index) => runner(index, stablecoin));\n}\n\nexport function getUSDPrice(reserves) {\n  const marketDetails = forEachStablecoin(i =>\n    getMarketDetails(reserves[i], undefined)\n  );\n  const ethPrices = forEachStablecoin(\n    i => marketDetails[i].marketRate.rateInverted\n  );\n\n  const [median] = getMedian(ethPrices);\n  const [mean] = getMean(ethPrices);\n  const [weightedMean] = getMean(\n    ethPrices,\n    forEachStablecoin(i => reserves[i].ethReserve.amount)\n  );\n\n  // const _stablecoinWeights = [\n  //   getMean([medianWeights[0], meanWeights[0], weightedMeanWeights[0]])[0],\n  //   getMean([medianWeights[1], meanWeights[1], weightedMeanWeights[1]])[0],\n  //   getMean([medianWeights[2], meanWeights[2], weightedMeanWeights[2]])[0]\n  // ]\n  // const stablecoinWeights = forEachStablecoin((i, stablecoin) => ({\n  //   [stablecoin]: _stablecoinWeights[i]\n  // })).reduce((accumulator, currentValue) => ({ ...accumulator, ...currentValue }), {})\n\n  return getMean([median, mean, weightedMean])[0];\n}\n"]},"metadata":{},"sourceType":"module"}