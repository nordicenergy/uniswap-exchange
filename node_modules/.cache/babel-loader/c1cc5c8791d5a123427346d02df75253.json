{"ast":null,"code":"var props = ['bottom', 'height', 'left', 'right', 'top', 'width'];\n\nvar rectChanged = function rectChanged(a, b) {\n  if (a === void 0) {\n    a = {};\n  }\n\n  if (b === void 0) {\n    b = {};\n  }\n\n  return props.some(function (prop) {\n    return a[prop] !== b[prop];\n  });\n};\n\nvar observedNodes =\n/*#__PURE__*/\nnew Map();\nvar rafId;\n\nvar run = function run() {\n  observedNodes.forEach(function (state) {\n    if (state.hasRectChanged) {\n      state.callbacks.forEach(function (cb) {\n        return cb(state.rect);\n      });\n      state.hasRectChanged = false;\n    }\n  });\n  window.setTimeout(function () {\n    observedNodes.forEach(function (state, node) {\n      var newRect = node.getBoundingClientRect();\n\n      if (rectChanged(newRect, state.rect)) {\n        state.hasRectChanged = true;\n        state.rect = newRect;\n      }\n    });\n  }, 0);\n  rafId = window.requestAnimationFrame(run);\n};\n\nvar index = function (node, cb) {\n  return {\n    observe: function observe() {\n      var wasEmpty = observedNodes.size === 0;\n\n      if (observedNodes.has(node)) {\n        observedNodes.get(node).callbacks.push(cb);\n      } else {\n        observedNodes.set(node, {\n          rect: undefined,\n          hasRectChanged: false,\n          callbacks: [cb]\n        });\n      }\n\n      if (wasEmpty) run();\n    },\n    unobserve: function unobserve() {\n      var state = observedNodes.get(node);\n\n      if (state) {\n        // Remove the callback\n        var index = state.callbacks.indexOf(cb);\n        if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference\n\n        if (!state.callbacks.length) observedNodes[\"delete\"](node); // Stop the loop\n\n        if (!observedNodes.size) cancelAnimationFrame(rafId);\n      }\n    }\n  };\n};\n\nexport default index;","map":{"version":3,"sources":["../src/index.ts"],"names":["props","rectChanged","b","observedNodes","run","state","window","newRect","node","rafId","observe","wasEmpty","rect","hasRectChanged","callbacks","unobserve","index","cancelAnimationFrame"],"mappings":"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","sourcesContent":["let props: (keyof DOMRect)[] = [\n  'bottom',\n  'height',\n  'left',\n  'right',\n  'top',\n  'width'\n];\n\nlet rectChanged = (a: DOMRect = {} as DOMRect, b: DOMRect = {} as DOMRect) =>\n  props.some(prop => a[prop] !== b[prop]);\n\nlet observedNodes = new Map<HTMLElement, RectProps>();\nlet rafId: number;\n\nlet run = () => {\n  observedNodes.forEach(state => {\n    if (state.hasRectChanged) {\n      state.callbacks.forEach(cb => cb(state.rect));\n      state.hasRectChanged = false;\n    }\n  });\n\n  window.setTimeout(() => {\n    observedNodes.forEach((state, node) => {\n      let newRect = node.getBoundingClientRect();\n      if (rectChanged(newRect, state.rect)) {\n        state.hasRectChanged = true;\n        state.rect = newRect;\n      }\n    });\n  }, 0);\n\n  rafId = window.requestAnimationFrame(run);\n};\n\nexport default (node: HTMLElement, cb: Function) => {\n  return {\n    observe() {\n      let wasEmpty = observedNodes.size === 0;\n      if (observedNodes.has(node)) {\n        observedNodes.get(node)!.callbacks.push(cb);\n      } else {\n        observedNodes.set(node, {\n          rect: undefined,\n          hasRectChanged: false,\n          callbacks: [cb]\n        });\n      }\n      if (wasEmpty) run();\n    },\n\n    unobserve() {\n      let state = observedNodes.get(node);\n      if (state) {\n        // Remove the callback\n        const index = state.callbacks.indexOf(cb);\n        if (index >= 0) state.callbacks.splice(index, 1);\n\n        // Remove the node reference\n        if (!state.callbacks.length) observedNodes.delete(node);\n\n        // Stop the loop\n        if (!observedNodes.size) cancelAnimationFrame(rafId);\n      }\n    }\n  };\n};\n\nexport type PartialRect = Partial<DOMRect>;\n\nexport type RectProps = {\n  rect: DOMRect | undefined;\n  hasRectChanged: boolean;\n  callbacks: Function[];\n};\n"]},"metadata":{},"sourceType":"module"}