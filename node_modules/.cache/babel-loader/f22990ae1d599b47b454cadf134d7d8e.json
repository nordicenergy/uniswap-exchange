{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/components/ExchangePage/index.jsx\";\nimport React, { useState, useReducer, useEffect } from 'react';\nimport ReactGA from 'react-ga';\nimport { createBrowserHistory } from 'history';\nimport { ethers } from 'ethers';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '../../theme';\nimport { useWeb3React } from '../../hooks';\nimport CurrencyInputPanel from '../CurrencyInputPanel';\nimport AddressInputPanel from '../AddressInputPanel';\nimport OversizedPanel from '../OversizedPanel';\nimport TransactionDetails from '../TransactionDetails';\nimport ArrowDown from '../../assets/svg/SVGArrowDown';\nimport { amountFormatter, calculateGasMargin } from '../../utils';\nimport { useExchangeContract } from '../../hooks';\nimport { useTokenDetails } from '../../contexts/Tokens';\nimport { useTransactionAdder } from '../../contexts/Transactions';\nimport { useAddressBalance, useExchangeReserves } from '../../contexts/Balances';\nimport { useAddressAllowance } from '../../contexts/Allowances';\nimport { useWalletModalToggle } from '../../contexts/Application';\nimport { useETHPriceInUSD } from '../../contexts/Balances';\nconst INPUT = 0;\nconst OUTPUT = 1;\nconst ETH_TO_TOKEN = 0;\nconst TOKEN_TO_ETH = 1;\nconst TOKEN_TO_TOKEN = 2; // denominated in bips\n\nconst ALLOWED_SLIPPAGE_DEFAULT = 50;\nconst TOKEN_ALLOWED_SLIPPAGE_DEFAULT = 50; // 15 minutes, denominated in seconds\n\nconst DEFAULT_DEADLINE_FROM_NOW = 60 * 15; // % above the calculated gas cost that we actually send, denominated in bips\n\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000);\nconst DownArrowBackground = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`;\n\nconst WrappedArrowDown = ({\n  clickable,\n  active,\n  ...rest\n}) => React.createElement(ArrowDown, Object.assign({}, rest, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}));\n\nconst DownArrow = styled(WrappedArrowDown)`\n  color: ${({\n  theme,\n  active\n}) => active ? theme.royalBlue : theme.chaliceGray};\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n  cursor: ${({\n  clickable\n}) => clickable && 'pointer'};\n`;\nconst ExchangeRateWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.5rem 1rem;\n`;\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({\n  theme\n}) => theme.doveGray};\n`;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`;\n\nfunction calculateSlippageBounds(value, token = false, tokenAllowedSlippage, allowedSlippage) {\n  if (value) {\n    const offset = value.mul(token ? tokenAllowedSlippage : allowedSlippage).div(ethers.utils.bigNumberify(10000));\n    const minimum = value.sub(offset);\n    const maximum = value.add(offset);\n    return {\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction getSwapType(inputCurrency, outputCurrency) {\n  if (!inputCurrency || !outputCurrency) {\n    return null;\n  } else if (inputCurrency === 'ETH') {\n    return ETH_TO_TOKEN;\n  } else if (outputCurrency === 'ETH') {\n    return TOKEN_TO_ETH;\n  } else {\n    return TOKEN_TO_TOKEN;\n  }\n} // this mocks the getInputPrice function, and calculates the required output\n\n\nfunction calculateEtherTokenOutputFromInput(inputAmount, inputReserve, outputReserve) {\n  const inputAmountWithFee = inputAmount.mul(ethers.utils.bigNumberify(997));\n  const numerator = inputAmountWithFee.mul(outputReserve);\n  const denominator = inputReserve.mul(ethers.utils.bigNumberify(1000)).add(inputAmountWithFee);\n  return numerator.div(denominator);\n} // this mocks the getOutputPrice function, and calculates the required input\n\n\nfunction calculateEtherTokenInputFromOutput(outputAmount, inputReserve, outputReserve) {\n  const numerator = inputReserve.mul(outputAmount).mul(ethers.utils.bigNumberify(1000));\n  const denominator = outputReserve.sub(outputAmount).mul(ethers.utils.bigNumberify(997));\n  return numerator.div(denominator).add(ethers.constants.One);\n}\n\nfunction getInitialSwapState(state) {\n  return {\n    independentValue: state.exactFieldURL && state.exactAmountURL ? state.exactAmountURL : '',\n    // this is a user input\n    dependentValue: '',\n    // this is a calculated number\n    independentField: state.exactFieldURL === 'output' ? OUTPUT : INPUT,\n    inputCurrency: state.inputCurrencyURL ? state.inputCurrencyURL : 'ETH',\n    outputCurrency: state.outputCurrencyURL ? state.outputCurrencyURL === 'ETH' ? state.inputCurrencyURL && state.inputCurrencyURL !== 'ETH' ? 'ETH' : '' : state.outputCurrencyURL : state.initialCurrency ? state.initialCurrency : ''\n  };\n}\n\nfunction swapStateReducer(state, action) {\n  switch (action.type) {\n    case 'FLIP_INDEPENDENT':\n      {\n        const {\n          independentField,\n          inputCurrency,\n          outputCurrency\n        } = state;\n        return { ...state,\n          dependentValue: '',\n          independentField: independentField === INPUT ? OUTPUT : INPUT,\n          inputCurrency: outputCurrency,\n          outputCurrency: inputCurrency\n        };\n      }\n\n    case 'SELECT_CURRENCY':\n      {\n        const {\n          inputCurrency,\n          outputCurrency\n        } = state;\n        const {\n          field,\n          currency\n        } = action.payload;\n        const newInputCurrency = field === INPUT ? currency : inputCurrency;\n        const newOutputCurrency = field === OUTPUT ? currency : outputCurrency;\n\n        if (newInputCurrency === newOutputCurrency) {\n          return { ...state,\n            inputCurrency: field === INPUT ? currency : '',\n            outputCurrency: field === OUTPUT ? currency : ''\n          };\n        } else {\n          return { ...state,\n            inputCurrency: newInputCurrency,\n            outputCurrency: newOutputCurrency\n          };\n        }\n      }\n\n    case 'UPDATE_INDEPENDENT':\n      {\n        const {\n          field,\n          value\n        } = action.payload;\n        const {\n          dependentValue,\n          independentValue\n        } = state;\n        return { ...state,\n          independentValue: value,\n          dependentValue: value === independentValue ? dependentValue : '',\n          independentField: field\n        };\n      }\n\n    case 'UPDATE_DEPENDENT':\n      {\n        return { ...state,\n          dependentValue: action.payload\n        };\n      }\n\n    default:\n      {\n        return getInitialSwapState();\n      }\n  }\n}\n\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n  try {\n    if (inputValue && (inputDecimals || inputDecimals === 0) && outputValue && (outputDecimals || outputDecimals === 0)) {\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18));\n\n      if (invert) {\n        return inputValue.mul(factor).div(outputValue).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)));\n      } else {\n        return outputValue.mul(factor).div(inputValue).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)));\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(swapType, inputReserveETH, inputReserveToken, inputDecimals, outputReserveETH, outputReserveToken, outputDecimals, invert = false) {\n  if (swapType === ETH_TO_TOKEN) {\n    return getExchangeRate(outputReserveETH, 18, outputReserveToken, outputDecimals, invert);\n  } else if (swapType === TOKEN_TO_ETH) {\n    return getExchangeRate(inputReserveToken, inputDecimals, inputReserveETH, 18, invert);\n  } else if (swapType === TOKEN_TO_TOKEN) {\n    const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18));\n    const firstRate = getExchangeRate(inputReserveToken, inputDecimals, inputReserveETH, 18);\n    const secondRate = getExchangeRate(outputReserveETH, 18, outputReserveToken, outputDecimals);\n\n    try {\n      return !!(firstRate && secondRate) ? firstRate.mul(secondRate).div(factor) : undefined;\n    } catch {}\n  }\n}\n\nexport default function ExchangePage({\n  initialCurrency,\n  sending = false,\n  params\n}) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    account,\n    error\n  } = useWeb3React(); // BigNumber.js instance\n\n  const ethPrice = useETHPriceInUSD();\n  const addTransaction = useTransactionAdder(); // check if URL specifies valid slippage, if so use as default\n\n  const initialSlippage = (token = false) => {\n    let slippage = Number.parseInt(params.slippage);\n\n    if (!isNaN(slippage) && (slippage === 0 || slippage >= 1)) {\n      return slippage; // round to match custom input availability\n    } // check for token <-> token slippage option\n\n\n    return token ? TOKEN_ALLOWED_SLIPPAGE_DEFAULT : ALLOWED_SLIPPAGE_DEFAULT;\n  }; // check URL params for recipient, only on send page\n\n\n  const initialRecipient = () => {\n    if (sending && params.recipient) {\n      return params.recipient;\n    }\n\n    return '';\n  };\n\n  const [deadlineFromNow, setDeadlineFromNow] = useState(DEFAULT_DEADLINE_FROM_NOW);\n  const [rawSlippage, setRawSlippage] = useState(() => initialSlippage());\n  const [rawTokenSlippage, setRawTokenSlippage] = useState(() => initialSlippage(true));\n  const allowedSlippageBig = ethers.utils.bigNumberify(rawSlippage);\n  const tokenAllowedSlippageBig = ethers.utils.bigNumberify(rawTokenSlippage); // analytics\n\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }, []); // core swap state\n\n  const [swapState, dispatchSwapState] = useReducer(swapStateReducer, {\n    initialCurrency: initialCurrency,\n    inputCurrencyURL: params.inputCurrency,\n    outputCurrencyURL: params.outputCurrency,\n    exactFieldURL: params.exactField,\n    exactAmountURL: params.exactAmount\n  }, getInitialSwapState);\n  const {\n    independentValue,\n    dependentValue,\n    independentField,\n    inputCurrency,\n    outputCurrency\n  } = swapState;\n  const [recipient, setRecipient] = useState({\n    address: initialRecipient(),\n    name: ''\n  });\n  const [recipientError, setRecipientError] = useState(); // get swap type from the currency types\n\n  const swapType = getSwapType(inputCurrency, outputCurrency); // get decimals and exchange address for each of the currency types\n\n  const {\n    symbol: inputSymbol,\n    decimals: inputDecimals,\n    exchangeAddress: inputExchangeAddress\n  } = useTokenDetails(inputCurrency);\n  const {\n    symbol: outputSymbol,\n    decimals: outputDecimals,\n    exchangeAddress: outputExchangeAddress\n  } = useTokenDetails(outputCurrency);\n  const inputExchangeContract = useExchangeContract(inputExchangeAddress);\n  const outputExchangeContract = useExchangeContract(outputExchangeAddress);\n  const contract = swapType === ETH_TO_TOKEN ? outputExchangeContract : inputExchangeContract; // get input allowance\n\n  const inputAllowance = useAddressAllowance(account, inputCurrency, inputExchangeAddress); // fetch reserves for each of the currency types\n\n  const {\n    reserveETH: inputReserveETH,\n    reserveToken: inputReserveToken\n  } = useExchangeReserves(inputCurrency);\n  const {\n    reserveETH: outputReserveETH,\n    reserveToken: outputReserveToken\n  } = useExchangeReserves(outputCurrency); // get balances for each of the currency types\n\n  const inputBalance = useAddressBalance(account, inputCurrency);\n  const outputBalance = useAddressBalance(account, outputCurrency);\n  const inputBalanceFormatted = !!(inputBalance && Number.isInteger(inputDecimals)) ? amountFormatter(inputBalance, inputDecimals, Math.min(4, inputDecimals)) : '';\n  const outputBalanceFormatted = !!(outputBalance && Number.isInteger(outputDecimals)) ? amountFormatter(outputBalance, outputDecimals, Math.min(4, outputDecimals)) : ''; // compute useful transforms of the data above\n\n  const independentDecimals = independentField === INPUT ? inputDecimals : outputDecimals;\n  const dependentDecimals = independentField === OUTPUT ? inputDecimals : outputDecimals; // declare/get parsed and formatted versions of input/output values\n\n  const [independentValueParsed, setIndependentValueParsed] = useState();\n  const dependentValueFormatted = !!(dependentValue && (dependentDecimals || dependentDecimals === 0)) ? amountFormatter(dependentValue, dependentDecimals, Math.min(4, dependentDecimals), false) : '';\n  const inputValueParsed = independentField === INPUT ? independentValueParsed : dependentValue;\n  const inputValueFormatted = independentField === INPUT ? independentValue : dependentValueFormatted;\n  const outputValueParsed = independentField === OUTPUT ? independentValueParsed : dependentValue;\n  const outputValueFormatted = independentField === OUTPUT ? independentValue : dependentValueFormatted; // validate + parse independent value\n\n  const [independentError, setIndependentError] = useState();\n  useEffect(() => {\n    if (independentValue && (independentDecimals || independentDecimals === 0)) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(independentValue, independentDecimals);\n\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\n          throw Error();\n        } else {\n          setIndependentValueParsed(parsedValue);\n          setIndependentError(null);\n        }\n      } catch {\n        setIndependentError(t('inputNotValid'));\n      }\n\n      return () => {\n        setIndependentValueParsed();\n        setIndependentError();\n      };\n    }\n  }, [independentValue, independentDecimals, t]); // calculate slippage from target rate\n\n  const {\n    minimum: dependentValueMinumum,\n    maximum: dependentValueMaximum\n  } = calculateSlippageBounds(dependentValue, swapType === TOKEN_TO_TOKEN, tokenAllowedSlippageBig, allowedSlippageBig); // validate input allowance + balance\n\n  const [inputError, setInputError] = useState();\n  const [showUnlock, setShowUnlock] = useState(false);\n  useEffect(() => {\n    const inputValueCalculation = independentField === INPUT ? independentValueParsed : dependentValueMaximum;\n\n    if (inputBalance && (inputAllowance || inputCurrency === 'ETH') && inputValueCalculation) {\n      if (inputBalance.lt(inputValueCalculation)) {\n        setInputError(t('insufficientBalance'));\n      } else if (inputCurrency !== 'ETH' && inputAllowance.lt(inputValueCalculation)) {\n        setInputError(t('unlockTokenCont'));\n        setShowUnlock(true);\n      } else {\n        setInputError(null);\n        setShowUnlock(false);\n      }\n\n      return () => {\n        setInputError();\n        setShowUnlock(false);\n      };\n    }\n  }, [independentField, independentValueParsed, dependentValueMaximum, inputBalance, inputCurrency, inputAllowance, t]); // calculate dependent value\n\n  useEffect(() => {\n    const amount = independentValueParsed;\n\n    if (swapType === ETH_TO_TOKEN) {\n      const reserveETH = outputReserveETH;\n      const reserveToken = outputReserveToken;\n\n      if (amount && reserveETH && reserveToken) {\n        try {\n          const calculatedDependentValue = independentField === INPUT ? calculateEtherTokenOutputFromInput(amount, reserveETH, reserveToken) : calculateEtherTokenInputFromOutput(amount, reserveETH, reserveToken);\n\n          if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n            throw Error();\n          }\n\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: calculatedDependentValue\n          });\n        } catch {\n          setIndependentError(t('insufficientLiquidity'));\n        }\n\n        return () => {\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: ''\n          });\n        };\n      }\n    } else if (swapType === TOKEN_TO_ETH) {\n      const reserveETH = inputReserveETH;\n      const reserveToken = inputReserveToken;\n\n      if (amount && reserveETH && reserveToken) {\n        try {\n          const calculatedDependentValue = independentField === INPUT ? calculateEtherTokenOutputFromInput(amount, reserveToken, reserveETH) : calculateEtherTokenInputFromOutput(amount, reserveToken, reserveETH);\n\n          if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n            throw Error();\n          }\n\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: calculatedDependentValue\n          });\n        } catch {\n          setIndependentError(t('insufficientLiquidity'));\n        }\n\n        return () => {\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: ''\n          });\n        };\n      }\n    } else if (swapType === TOKEN_TO_TOKEN) {\n      const reserveETHFirst = inputReserveETH;\n      const reserveTokenFirst = inputReserveToken;\n      const reserveETHSecond = outputReserveETH;\n      const reserveTokenSecond = outputReserveToken;\n\n      if (amount && reserveETHFirst && reserveTokenFirst && reserveETHSecond && reserveTokenSecond) {\n        try {\n          if (independentField === INPUT) {\n            const intermediateValue = calculateEtherTokenOutputFromInput(amount, reserveTokenFirst, reserveETHFirst);\n\n            if (intermediateValue.lte(ethers.constants.Zero)) {\n              throw Error();\n            }\n\n            const calculatedDependentValue = calculateEtherTokenOutputFromInput(intermediateValue, reserveETHSecond, reserveTokenSecond);\n\n            if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n              throw Error();\n            }\n\n            dispatchSwapState({\n              type: 'UPDATE_DEPENDENT',\n              payload: calculatedDependentValue\n            });\n          } else {\n            const intermediateValue = calculateEtherTokenInputFromOutput(amount, reserveETHSecond, reserveTokenSecond);\n\n            if (intermediateValue.lte(ethers.constants.Zero)) {\n              throw Error();\n            }\n\n            const calculatedDependentValue = calculateEtherTokenInputFromOutput(intermediateValue, reserveTokenFirst, reserveETHFirst);\n\n            if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n              throw Error();\n            }\n\n            dispatchSwapState({\n              type: 'UPDATE_DEPENDENT',\n              payload: calculatedDependentValue\n            });\n          }\n        } catch {\n          setIndependentError(t('insufficientLiquidity'));\n        }\n\n        return () => {\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: ''\n          });\n        };\n      }\n    }\n  }, [independentValueParsed, swapType, outputReserveETH, outputReserveToken, inputReserveETH, inputReserveToken, independentField, t]);\n  useEffect(() => {\n    const history = createBrowserHistory();\n    history.push(window.location.pathname + '');\n  }, []);\n  const [inverted, setInverted] = useState(false);\n  const exchangeRate = getExchangeRate(inputValueParsed, inputDecimals, outputValueParsed, outputDecimals);\n  const exchangeRateInverted = getExchangeRate(inputValueParsed, inputDecimals, outputValueParsed, outputDecimals, true);\n  const marketRate = getMarketRate(swapType, inputReserveETH, inputReserveToken, inputDecimals, outputReserveETH, outputReserveToken, outputDecimals);\n  const percentSlippage = exchangeRate && marketRate ? exchangeRate.sub(marketRate).abs().mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(marketRate).sub(ethers.utils.bigNumberify(3).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(15)))) : undefined;\n  const percentSlippageFormatted = percentSlippage && amountFormatter(percentSlippage, 16, 2);\n  const slippageWarning = percentSlippage && percentSlippage.gte(ethers.utils.parseEther('.05')) && percentSlippage.lt(ethers.utils.parseEther('.2')); // [5% - 20%)\n\n  const highSlippageWarning = percentSlippage && percentSlippage.gte(ethers.utils.parseEther('.2')); // [20+%\n\n  const isValid = sending ? exchangeRate && inputError === null && independentError === null && recipientError === null && deadlineFromNow : exchangeRate && inputError === null && independentError === null && deadlineFromNow;\n  const estimatedText = `(${t('estimated')})`;\n\n  function formatBalance(value) {\n    return `Balance: ${value}`;\n  }\n\n  async function onSwap() {\n    //if user changed deadline, log new one in minutes\n    if (deadlineFromNow !== DEFAULT_DEADLINE_FROM_NOW) {\n      ReactGA.event({\n        category: 'Advanced Interaction',\n        action: 'Set Custom Deadline',\n        value: deadlineFromNow / 60\n      });\n    }\n\n    const deadline = Math.ceil(Date.now() / 1000) + deadlineFromNow; // if user has changed slippage, log\n\n    if (swapType === TOKEN_TO_TOKEN) {\n      if (parseInt(tokenAllowedSlippageBig.toString()) !== TOKEN_ALLOWED_SLIPPAGE_DEFAULT) {\n        ReactGA.event({\n          category: 'Advanced Interaction',\n          action: 'Set Custom Slippage',\n          value: parseInt(tokenAllowedSlippageBig.toString())\n        });\n      }\n    } else {\n      if (parseInt(allowedSlippageBig.toString()) !== ALLOWED_SLIPPAGE_DEFAULT) {\n        ReactGA.event({\n          category: 'Advanced Interaction',\n          action: 'Set Custom Slippage',\n          value: parseInt(allowedSlippageBig.toString())\n        });\n      }\n    }\n\n    let estimate, method, args, value;\n    let inputEthPerToken = 1;\n\n    if (inputCurrency !== 'ETH') {\n      inputEthPerToken = inputReserveToken && inputReserveETH ? inputReserveETH / inputReserveToken : null;\n    }\n\n    let usdTransactionSize = ethPrice * inputEthPerToken * inputValueFormatted;\n\n    if (independentField === INPUT) {\n      // general details about transaction\n      ReactGA.event({\n        category: 'Transaction',\n        action: sending ? 'SendInput' : 'SwapInput',\n        label: outputCurrency,\n        value: usdTransactionSize\n      });\n\n      if (swapType === ETH_TO_TOKEN) {\n        estimate = sending ? contract.estimate.ethToTokenTransferInput : contract.estimate.ethToUniswapInput;\n        method = sending ? contract.ethToTokenTransferInput : contract.ethToUniswapInput;\n        args = sending ? [dependentValueMinumum, deadline, recipient.address] : [dependentValueMinumum, deadline];\n        value = independentValueParsed;\n      } else if (swapType === TOKEN_TO_ETH) {\n        estimate = sending ? contract.estimate.tokenToEthTransferInput : contract.estimate.tokenToEthSwapInput;\n        method = sending ? contract.tokenToEthTransferInput : contract.tokenToEthSwapInput;\n        args = sending ? [independentValueParsed, dependentValueMinumum, deadline, recipient.address] : [independentValueParsed, dependentValueMinumum, deadline];\n        value = ethers.constants.Zero;\n      } else if (swapType === TOKEN_TO_TOKEN) {\n        estimate = sending ? contract.estimate.tokenToTokenTransferInput : contract.estimate.tokenToUniswapInput;\n        method = sending ? contract.tokenToTokenTransferInput : contract.tokenToUniswapInput;\n        args = sending ? [independentValueParsed, dependentValueMinumum, ethers.constants.One, deadline, recipient.address, outputCurrency] : [independentValueParsed, dependentValueMinumum, ethers.constants.One, deadline, outputCurrency];\n        value = ethers.constants.Zero;\n      }\n    } else if (independentField === OUTPUT) {\n      // general details about transaction\n      ReactGA.event({\n        category: 'Transaction',\n        action: sending ? 'SendOutput' : 'SwapOutput',\n        label: outputCurrency,\n        value: usdTransactionSize\n      });\n\n      if (swapType === ETH_TO_TOKEN) {\n        estimate = sending ? contract.estimate.ethToTokenTransferOutput : contract.estimate.ethToUniswapOutput;\n        method = sending ? contract.ethToTokenTransferOutput : contract.ethToUniswapOutput;\n        args = sending ? [independentValueParsed, deadline, recipient.address] : [independentValueParsed, deadline];\n        value = dependentValueMaximum;\n      } else if (swapType === TOKEN_TO_ETH) {\n        estimate = sending ? contract.estimate.tokenToEthTransferOutput : contract.estimate.tokenToEthSwapOutput;\n        method = sending ? contract.tokenToEthTransferOutput : contract.tokenToEthSwapOutput;\n        args = sending ? [independentValueParsed, dependentValueMaximum, deadline, recipient.address] : [independentValueParsed, dependentValueMaximum, deadline];\n        value = ethers.constants.Zero;\n      } else if (swapType === TOKEN_TO_TOKEN) {\n        estimate = sending ? contract.estimate.tokenToTokenTransferOutput : contract.estimate.tokenToUniswapOutput;\n        method = sending ? contract.tokenToTokenTransferOutput : contract.tokenToUniswapOutput;\n        args = sending ? [independentValueParsed, dependentValueMaximum, ethers.constants.MaxUint256, deadline, recipient.address, outputCurrency] : [independentValueParsed, dependentValueMaximum, ethers.constants.MaxUint256, deadline, outputCurrency];\n        value = ethers.constants.Zero;\n      }\n    }\n\n    const estimatedGasLimit = await estimate(...args, {\n      value\n    });\n    method(...args, {\n      value,\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\n    }).then(response => {\n      addTransaction(response);\n    });\n  }\n\n  const [customSlippageError, setcustomSlippageError] = useState('');\n  const toggleWalletModal = useWalletModalToggle();\n  return React.createElement(React.Fragment, null, React.createElement(CurrencyInputPanel, {\n    title: t('input'),\n    description: inputValueFormatted && independentField === OUTPUT ? estimatedText : '',\n    extraText: inputBalanceFormatted && formatBalance(inputBalanceFormatted),\n    extraTextClickHander: () => {\n      if (inputBalance && inputDecimals) {\n        const valueToSet = inputCurrency === 'ETH' ? inputBalance.sub(ethers.utils.parseEther('.1')) : inputBalance;\n\n        if (valueToSet.gt(ethers.constants.Zero)) {\n          dispatchSwapState({\n            type: 'UPDATE_INDEPENDENT',\n            payload: {\n              value: amountFormatter(valueToSet, inputDecimals, inputDecimals, false),\n              field: INPUT\n            }\n          });\n        }\n      }\n    },\n    onCurrencySelected: inputCurrency => {\n      dispatchSwapState({\n        type: 'SELECT_CURRENCY',\n        payload: {\n          currency: inputCurrency,\n          field: INPUT\n        }\n      });\n    },\n    onValueChange: inputValue => {\n      dispatchSwapState({\n        type: 'UPDATE_INDEPENDENT',\n        payload: {\n          value: inputValue,\n          field: INPUT\n        }\n      });\n    },\n    showUnlock: showUnlock,\n    selectedTokens: [inputCurrency, outputCurrency],\n    selectedTokenAddress: inputCurrency,\n    value: inputValueFormatted,\n    errorMessage: inputError ? inputError : independentField === INPUT ? independentError : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698\n    },\n    __self: this\n  }), React.createElement(OversizedPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734\n    },\n    __self: this\n  }, React.createElement(DownArrowBackground, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735\n    },\n    __self: this\n  }, React.createElement(DownArrow, {\n    onClick: () => {\n      dispatchSwapState({\n        type: 'FLIP_INDEPENDENT'\n      });\n    },\n    clickable: true,\n    alt: \"swap\",\n    active: isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736\n    },\n    __self: this\n  }))), React.createElement(CurrencyInputPanel, {\n    title: t('output'),\n    description: outputValueFormatted && independentField === INPUT ? estimatedText : '',\n    extraText: outputBalanceFormatted && formatBalance(outputBalanceFormatted),\n    onCurrencySelected: outputCurrency => {\n      dispatchSwapState({\n        type: 'SELECT_CURRENCY',\n        payload: {\n          currency: outputCurrency,\n          field: OUTPUT\n        }\n      });\n    },\n    onValueChange: outputValue => {\n      dispatchSwapState({\n        type: 'UPDATE_INDEPENDENT',\n        payload: {\n          value: outputValue,\n          field: OUTPUT\n        }\n      });\n    },\n    selectedTokens: [inputCurrency, outputCurrency],\n    selectedTokenAddress: outputCurrency,\n    value: outputValueFormatted,\n    errorMessage: independentField === OUTPUT ? independentError : '',\n    disableUnlock: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 746\n    },\n    __self: this\n  }), sending ? React.createElement(React.Fragment, null, React.createElement(OversizedPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770\n    },\n    __self: this\n  }, React.createElement(DownArrowBackground, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 771\n    },\n    __self: this\n  }, React.createElement(DownArrow, {\n    active: isValid,\n    alt: \"arrow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 772\n    },\n    __self: this\n  }))), React.createElement(AddressInputPanel, {\n    onChange: setRecipient,\n    onError: setRecipientError,\n    initialInput: recipient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775\n    },\n    __self: this\n  })) : '', React.createElement(OversizedPanel, {\n    hideBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 780\n    },\n    __self: this\n  }, React.createElement(ExchangeRateWrapper, {\n    onClick: () => {\n      setInverted(inverted => !inverted);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 781\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786\n    },\n    __self: this\n  }, t('exchangeRate')), inverted ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788\n    },\n    __self: this\n  }, exchangeRate ? `1 ${inputSymbol} = ${amountFormatter(exchangeRate, 18, 6, false)} ${outputSymbol}` : ' - ') : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 794\n    },\n    __self: this\n  }, exchangeRate ? `1 ${outputSymbol} = ${amountFormatter(exchangeRateInverted, 18, 6, false)} ${inputSymbol}` : ' - '))), React.createElement(TransactionDetails, {\n    account: account,\n    setRawSlippage: setRawSlippage,\n    setRawTokenSlippage: setRawTokenSlippage,\n    rawSlippage: rawSlippage,\n    slippageWarning: slippageWarning,\n    highSlippageWarning: highSlippageWarning,\n    setDeadline: setDeadlineFromNow,\n    deadline: deadlineFromNow,\n    inputError: inputError,\n    independentError: independentError,\n    inputCurrency: inputCurrency,\n    outputCurrency: outputCurrency,\n    independentValue: independentValue,\n    independentValueParsed: independentValueParsed,\n    independentField: independentField,\n    INPUT: INPUT,\n    inputValueParsed: inputValueParsed,\n    outputValueParsed: outputValueParsed,\n    inputSymbol: inputSymbol,\n    outputSymbol: outputSymbol,\n    dependentValueMinumum: dependentValueMinumum,\n    dependentValueMaximum: dependentValueMaximum,\n    dependentDecimals: dependentDecimals,\n    independentDecimals: independentDecimals,\n    percentSlippageFormatted: percentSlippageFormatted,\n    setcustomSlippageError: setcustomSlippageError,\n    recipientAddress: recipient.address,\n    sending: sending,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 802\n    },\n    __self: this\n  }), React.createElement(Flex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: !account && !error ? false : !isValid || customSlippageError === 'invalid',\n    onClick: account && !error ? onSwap : toggleWalletModal,\n    warning: highSlippageWarning || customSlippageError === 'warning',\n    loggedOut: !account,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833\n    },\n    __self: this\n  }, !account ? 'Connect to a Wallet' : sending ? highSlippageWarning || customSlippageError === 'warning' ? t('sendAnyway') : t('send') : highSlippageWarning || customSlippageError === 'warning' ? t('swapAnyway') : t('swap'))));\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/components/ExchangePage/index.jsx"],"names":["React","useState","useReducer","useEffect","ReactGA","createBrowserHistory","ethers","styled","useTranslation","Button","useWeb3React","CurrencyInputPanel","AddressInputPanel","OversizedPanel","TransactionDetails","ArrowDown","amountFormatter","calculateGasMargin","useExchangeContract","useTokenDetails","useTransactionAdder","useAddressBalance","useExchangeReserves","useAddressAllowance","useWalletModalToggle","useETHPriceInUSD","INPUT","OUTPUT","ETH_TO_TOKEN","TOKEN_TO_ETH","TOKEN_TO_TOKEN","ALLOWED_SLIPPAGE_DEFAULT","TOKEN_ALLOWED_SLIPPAGE_DEFAULT","DEFAULT_DEADLINE_FROM_NOW","GAS_MARGIN","utils","bigNumberify","DownArrowBackground","div","theme","flexRowNoWrap","WrappedArrowDown","clickable","active","rest","DownArrow","royalBlue","chaliceGray","ExchangeRateWrapper","doveGray","ExchangeRate","span","Flex","calculateSlippageBounds","value","token","tokenAllowedSlippage","allowedSlippage","offset","mul","minimum","sub","maximum","add","lt","constants","Zero","gt","MaxUint256","getSwapType","inputCurrency","outputCurrency","calculateEtherTokenOutputFromInput","inputAmount","inputReserve","outputReserve","inputAmountWithFee","numerator","denominator","calculateEtherTokenInputFromOutput","outputAmount","One","getInitialSwapState","state","independentValue","exactFieldURL","exactAmountURL","dependentValue","independentField","inputCurrencyURL","outputCurrencyURL","initialCurrency","swapStateReducer","action","type","field","currency","payload","newInputCurrency","newOutputCurrency","getExchangeRate","inputValue","inputDecimals","outputValue","outputDecimals","invert","factor","pow","getMarketRate","swapType","inputReserveETH","inputReserveToken","outputReserveETH","outputReserveToken","firstRate","secondRate","undefined","ExchangePage","sending","params","t","account","error","ethPrice","addTransaction","initialSlippage","slippage","Number","parseInt","isNaN","initialRecipient","recipient","deadlineFromNow","setDeadlineFromNow","rawSlippage","setRawSlippage","rawTokenSlippage","setRawTokenSlippage","allowedSlippageBig","tokenAllowedSlippageBig","pageview","window","location","pathname","search","swapState","dispatchSwapState","exactField","exactAmount","setRecipient","address","name","recipientError","setRecipientError","symbol","inputSymbol","decimals","exchangeAddress","inputExchangeAddress","outputSymbol","outputExchangeAddress","inputExchangeContract","outputExchangeContract","contract","inputAllowance","reserveETH","reserveToken","inputBalance","outputBalance","inputBalanceFormatted","isInteger","Math","min","outputBalanceFormatted","independentDecimals","dependentDecimals","independentValueParsed","setIndependentValueParsed","dependentValueFormatted","inputValueParsed","inputValueFormatted","outputValueParsed","outputValueFormatted","independentError","setIndependentError","parsedValue","parseUnits","lte","gte","Error","dependentValueMinumum","dependentValueMaximum","inputError","setInputError","showUnlock","setShowUnlock","inputValueCalculation","amount","calculatedDependentValue","reserveETHFirst","reserveTokenFirst","reserveETHSecond","reserveTokenSecond","intermediateValue","history","push","inverted","setInverted","exchangeRate","exchangeRateInverted","marketRate","percentSlippage","abs","percentSlippageFormatted","slippageWarning","parseEther","highSlippageWarning","isValid","estimatedText","formatBalance","onSwap","event","category","deadline","ceil","Date","now","toString","estimate","method","args","inputEthPerToken","usdTransactionSize","label","ethToTokenTransferInput","ethToUniswapInput","tokenToEthTransferInput","tokenToEthSwapInput","tokenToTokenTransferInput","tokenToUniswapInput","ethToTokenTransferOutput","ethToUniswapOutput","tokenToEthTransferOutput","tokenToEthSwapOutput","tokenToTokenTransferOutput","tokenToUniswapOutput","estimatedGasLimit","gasLimit","then","response","customSlippageError","setcustomSlippageError","toggleWalletModal","valueToSet"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport { createBrowserHistory } from 'history'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\n\nimport { Button } from '../../theme'\nimport { useWeb3React } from '../../hooks'\nimport CurrencyInputPanel from '../CurrencyInputPanel'\nimport AddressInputPanel from '../AddressInputPanel'\nimport OversizedPanel from '../OversizedPanel'\nimport TransactionDetails from '../TransactionDetails'\nimport ArrowDown from '../../assets/svg/SVGArrowDown'\nimport { amountFormatter, calculateGasMargin } from '../../utils'\nimport { useExchangeContract } from '../../hooks'\nimport { useTokenDetails } from '../../contexts/Tokens'\nimport { useTransactionAdder } from '../../contexts/Transactions'\nimport { useAddressBalance, useExchangeReserves } from '../../contexts/Balances'\nimport { useAddressAllowance } from '../../contexts/Allowances'\nimport { useWalletModalToggle } from '../../contexts/Application'\nimport { useETHPriceInUSD } from '../../contexts/Balances'\n\nconst INPUT = 0\nconst OUTPUT = 1\n\nconst ETH_TO_TOKEN = 0\nconst TOKEN_TO_ETH = 1\nconst TOKEN_TO_TOKEN = 2\n\n// denominated in bips\nconst ALLOWED_SLIPPAGE_DEFAULT = 50\nconst TOKEN_ALLOWED_SLIPPAGE_DEFAULT = 50\n\n// 15 minutes, denominated in seconds\nconst DEFAULT_DEADLINE_FROM_NOW = 60 * 15\n\n// % above the calculated gas cost that we actually send, denominated in bips\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000)\n\nconst DownArrowBackground = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`\n\nconst WrappedArrowDown = ({ clickable, active, ...rest }) => <ArrowDown {...rest} />\nconst DownArrow = styled(WrappedArrowDown)`\n  color: ${({ theme, active }) => (active ? theme.royalBlue : theme.chaliceGray)};\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n  cursor: ${({ clickable }) => clickable && 'pointer'};\n`\n\nconst ExchangeRateWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({ theme }) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.5rem 1rem;\n`\n\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({ theme }) => theme.doveGray};\n`\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`\n\nfunction calculateSlippageBounds(value, token = false, tokenAllowedSlippage, allowedSlippage) {\n  if (value) {\n    const offset = value.mul(token ? tokenAllowedSlippage : allowedSlippage).div(ethers.utils.bigNumberify(10000))\n    const minimum = value.sub(offset)\n    const maximum = value.add(offset)\n    return {\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\n    }\n  } else {\n    return {}\n  }\n}\n\nfunction getSwapType(inputCurrency, outputCurrency) {\n  if (!inputCurrency || !outputCurrency) {\n    return null\n  } else if (inputCurrency === 'ETH') {\n    return ETH_TO_TOKEN\n  } else if (outputCurrency === 'ETH') {\n    return TOKEN_TO_ETH\n  } else {\n    return TOKEN_TO_TOKEN\n  }\n}\n\n// this mocks the getInputPrice function, and calculates the required output\nfunction calculateEtherTokenOutputFromInput(inputAmount, inputReserve, outputReserve) {\n  const inputAmountWithFee = inputAmount.mul(ethers.utils.bigNumberify(997))\n  const numerator = inputAmountWithFee.mul(outputReserve)\n  const denominator = inputReserve.mul(ethers.utils.bigNumberify(1000)).add(inputAmountWithFee)\n  return numerator.div(denominator)\n}\n\n// this mocks the getOutputPrice function, and calculates the required input\nfunction calculateEtherTokenInputFromOutput(outputAmount, inputReserve, outputReserve) {\n  const numerator = inputReserve.mul(outputAmount).mul(ethers.utils.bigNumberify(1000))\n  const denominator = outputReserve.sub(outputAmount).mul(ethers.utils.bigNumberify(997))\n  return numerator.div(denominator).add(ethers.constants.One)\n}\n\nfunction getInitialSwapState(state) {\n  return {\n    independentValue: state.exactFieldURL && state.exactAmountURL ? state.exactAmountURL : '', // this is a user input\n    dependentValue: '', // this is a calculated number\n    independentField: state.exactFieldURL === 'output' ? OUTPUT : INPUT,\n    inputCurrency: state.inputCurrencyURL ? state.inputCurrencyURL : 'ETH',\n    outputCurrency: state.outputCurrencyURL\n      ? state.outputCurrencyURL === 'ETH'\n        ? state.inputCurrencyURL && state.inputCurrencyURL !== 'ETH'\n          ? 'ETH'\n          : ''\n        : state.outputCurrencyURL\n      : state.initialCurrency\n      ? state.initialCurrency\n      : ''\n  }\n}\n\nfunction swapStateReducer(state, action) {\n  switch (action.type) {\n    case 'FLIP_INDEPENDENT': {\n      const { independentField, inputCurrency, outputCurrency } = state\n      return {\n        ...state,\n        dependentValue: '',\n        independentField: independentField === INPUT ? OUTPUT : INPUT,\n        inputCurrency: outputCurrency,\n        outputCurrency: inputCurrency\n      }\n    }\n    case 'SELECT_CURRENCY': {\n      const { inputCurrency, outputCurrency } = state\n      const { field, currency } = action.payload\n\n      const newInputCurrency = field === INPUT ? currency : inputCurrency\n      const newOutputCurrency = field === OUTPUT ? currency : outputCurrency\n\n      if (newInputCurrency === newOutputCurrency) {\n        return {\n          ...state,\n          inputCurrency: field === INPUT ? currency : '',\n          outputCurrency: field === OUTPUT ? currency : ''\n        }\n      } else {\n        return {\n          ...state,\n          inputCurrency: newInputCurrency,\n          outputCurrency: newOutputCurrency\n        }\n      }\n    }\n    case 'UPDATE_INDEPENDENT': {\n      const { field, value } = action.payload\n      const { dependentValue, independentValue } = state\n      return {\n        ...state,\n        independentValue: value,\n        dependentValue: value === independentValue ? dependentValue : '',\n        independentField: field\n      }\n    }\n    case 'UPDATE_DEPENDENT': {\n      return {\n        ...state,\n        dependentValue: action.payload\n      }\n    }\n    default: {\n      return getInitialSwapState()\n    }\n  }\n}\n\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n  try {\n    if (\n      inputValue &&\n      (inputDecimals || inputDecimals === 0) &&\n      outputValue &&\n      (outputDecimals || outputDecimals === 0)\n    ) {\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\n\n      if (invert) {\n        return inputValue\n          .mul(factor)\n          .div(outputValue)\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\n      } else {\n        return outputValue\n          .mul(factor)\n          .div(inputValue)\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(\n  swapType,\n  inputReserveETH,\n  inputReserveToken,\n  inputDecimals,\n  outputReserveETH,\n  outputReserveToken,\n  outputDecimals,\n  invert = false\n) {\n  if (swapType === ETH_TO_TOKEN) {\n    return getExchangeRate(outputReserveETH, 18, outputReserveToken, outputDecimals, invert)\n  } else if (swapType === TOKEN_TO_ETH) {\n    return getExchangeRate(inputReserveToken, inputDecimals, inputReserveETH, 18, invert)\n  } else if (swapType === TOKEN_TO_TOKEN) {\n    const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\n    const firstRate = getExchangeRate(inputReserveToken, inputDecimals, inputReserveETH, 18)\n    const secondRate = getExchangeRate(outputReserveETH, 18, outputReserveToken, outputDecimals)\n    try {\n      return !!(firstRate && secondRate) ? firstRate.mul(secondRate).div(factor) : undefined\n    } catch {}\n  }\n}\n\nexport default function ExchangePage({ initialCurrency, sending = false, params }) {\n  const { t } = useTranslation()\n  const { account, error } = useWeb3React()\n\n  // BigNumber.js instance\n  const ethPrice = useETHPriceInUSD()\n\n  const addTransaction = useTransactionAdder()\n\n  // check if URL specifies valid slippage, if so use as default\n  const initialSlippage = (token = false) => {\n    let slippage = Number.parseInt(params.slippage)\n    if (!isNaN(slippage) && (slippage === 0 || slippage >= 1)) {\n      return slippage // round to match custom input availability\n    }\n    // check for token <-> token slippage option\n    return token ? TOKEN_ALLOWED_SLIPPAGE_DEFAULT : ALLOWED_SLIPPAGE_DEFAULT\n  }\n\n  // check URL params for recipient, only on send page\n  const initialRecipient = () => {\n    if (sending && params.recipient) {\n      return params.recipient\n    }\n    return ''\n  }\n\n  const [deadlineFromNow, setDeadlineFromNow] = useState(DEFAULT_DEADLINE_FROM_NOW)\n\n  const [rawSlippage, setRawSlippage] = useState(() => initialSlippage())\n  const [rawTokenSlippage, setRawTokenSlippage] = useState(() => initialSlippage(true))\n\n  const allowedSlippageBig = ethers.utils.bigNumberify(rawSlippage)\n  const tokenAllowedSlippageBig = ethers.utils.bigNumberify(rawTokenSlippage)\n\n  // analytics\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search)\n  }, [])\n\n  // core swap state\n  const [swapState, dispatchSwapState] = useReducer(\n    swapStateReducer,\n    {\n      initialCurrency: initialCurrency,\n      inputCurrencyURL: params.inputCurrency,\n      outputCurrencyURL: params.outputCurrency,\n      exactFieldURL: params.exactField,\n      exactAmountURL: params.exactAmount\n    },\n    getInitialSwapState\n  )\n\n  const { independentValue, dependentValue, independentField, inputCurrency, outputCurrency } = swapState\n\n  const [recipient, setRecipient] = useState({\n    address: initialRecipient(),\n    name: ''\n  })\n  const [recipientError, setRecipientError] = useState()\n\n  // get swap type from the currency types\n  const swapType = getSwapType(inputCurrency, outputCurrency)\n\n  // get decimals and exchange address for each of the currency types\n  const { symbol: inputSymbol, decimals: inputDecimals, exchangeAddress: inputExchangeAddress } = useTokenDetails(\n    inputCurrency\n  )\n  const { symbol: outputSymbol, decimals: outputDecimals, exchangeAddress: outputExchangeAddress } = useTokenDetails(\n    outputCurrency\n  )\n\n  const inputExchangeContract = useExchangeContract(inputExchangeAddress)\n  const outputExchangeContract = useExchangeContract(outputExchangeAddress)\n  const contract = swapType === ETH_TO_TOKEN ? outputExchangeContract : inputExchangeContract\n\n  // get input allowance\n  const inputAllowance = useAddressAllowance(account, inputCurrency, inputExchangeAddress)\n\n  // fetch reserves for each of the currency types\n  const { reserveETH: inputReserveETH, reserveToken: inputReserveToken } = useExchangeReserves(inputCurrency)\n  const { reserveETH: outputReserveETH, reserveToken: outputReserveToken } = useExchangeReserves(outputCurrency)\n\n  // get balances for each of the currency types\n  const inputBalance = useAddressBalance(account, inputCurrency)\n  const outputBalance = useAddressBalance(account, outputCurrency)\n  const inputBalanceFormatted = !!(inputBalance && Number.isInteger(inputDecimals))\n    ? amountFormatter(inputBalance, inputDecimals, Math.min(4, inputDecimals))\n    : ''\n  const outputBalanceFormatted = !!(outputBalance && Number.isInteger(outputDecimals))\n    ? amountFormatter(outputBalance, outputDecimals, Math.min(4, outputDecimals))\n    : ''\n\n  // compute useful transforms of the data above\n  const independentDecimals = independentField === INPUT ? inputDecimals : outputDecimals\n  const dependentDecimals = independentField === OUTPUT ? inputDecimals : outputDecimals\n\n  // declare/get parsed and formatted versions of input/output values\n  const [independentValueParsed, setIndependentValueParsed] = useState()\n  const dependentValueFormatted = !!(dependentValue && (dependentDecimals || dependentDecimals === 0))\n    ? amountFormatter(dependentValue, dependentDecimals, Math.min(4, dependentDecimals), false)\n    : ''\n  const inputValueParsed = independentField === INPUT ? independentValueParsed : dependentValue\n  const inputValueFormatted = independentField === INPUT ? independentValue : dependentValueFormatted\n  const outputValueParsed = independentField === OUTPUT ? independentValueParsed : dependentValue\n  const outputValueFormatted = independentField === OUTPUT ? independentValue : dependentValueFormatted\n\n  // validate + parse independent value\n  const [independentError, setIndependentError] = useState()\n  useEffect(() => {\n    if (independentValue && (independentDecimals || independentDecimals === 0)) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(independentValue, independentDecimals)\n\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\n          throw Error()\n        } else {\n          setIndependentValueParsed(parsedValue)\n          setIndependentError(null)\n        }\n      } catch {\n        setIndependentError(t('inputNotValid'))\n      }\n\n      return () => {\n        setIndependentValueParsed()\n        setIndependentError()\n      }\n    }\n  }, [independentValue, independentDecimals, t])\n\n  // calculate slippage from target rate\n  const { minimum: dependentValueMinumum, maximum: dependentValueMaximum } = calculateSlippageBounds(\n    dependentValue,\n    swapType === TOKEN_TO_TOKEN,\n    tokenAllowedSlippageBig,\n    allowedSlippageBig\n  )\n\n  // validate input allowance + balance\n  const [inputError, setInputError] = useState()\n  const [showUnlock, setShowUnlock] = useState(false)\n  useEffect(() => {\n    const inputValueCalculation = independentField === INPUT ? independentValueParsed : dependentValueMaximum\n    if (inputBalance && (inputAllowance || inputCurrency === 'ETH') && inputValueCalculation) {\n      if (inputBalance.lt(inputValueCalculation)) {\n        setInputError(t('insufficientBalance'))\n      } else if (inputCurrency !== 'ETH' && inputAllowance.lt(inputValueCalculation)) {\n        setInputError(t('unlockTokenCont'))\n        setShowUnlock(true)\n      } else {\n        setInputError(null)\n        setShowUnlock(false)\n      }\n      return () => {\n        setInputError()\n        setShowUnlock(false)\n      }\n    }\n  }, [independentField, independentValueParsed, dependentValueMaximum, inputBalance, inputCurrency, inputAllowance, t])\n\n  // calculate dependent value\n  useEffect(() => {\n    const amount = independentValueParsed\n\n    if (swapType === ETH_TO_TOKEN) {\n      const reserveETH = outputReserveETH\n      const reserveToken = outputReserveToken\n\n      if (amount && reserveETH && reserveToken) {\n        try {\n          const calculatedDependentValue =\n            independentField === INPUT\n              ? calculateEtherTokenOutputFromInput(amount, reserveETH, reserveToken)\n              : calculateEtherTokenInputFromOutput(amount, reserveETH, reserveToken)\n\n          if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n            throw Error()\n          }\n\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: calculatedDependentValue\n          })\n        } catch {\n          setIndependentError(t('insufficientLiquidity'))\n        }\n        return () => {\n          dispatchSwapState({ type: 'UPDATE_DEPENDENT', payload: '' })\n        }\n      }\n    } else if (swapType === TOKEN_TO_ETH) {\n      const reserveETH = inputReserveETH\n      const reserveToken = inputReserveToken\n\n      if (amount && reserveETH && reserveToken) {\n        try {\n          const calculatedDependentValue =\n            independentField === INPUT\n              ? calculateEtherTokenOutputFromInput(amount, reserveToken, reserveETH)\n              : calculateEtherTokenInputFromOutput(amount, reserveToken, reserveETH)\n\n          if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n            throw Error()\n          }\n\n          dispatchSwapState({\n            type: 'UPDATE_DEPENDENT',\n            payload: calculatedDependentValue\n          })\n        } catch {\n          setIndependentError(t('insufficientLiquidity'))\n        }\n        return () => {\n          dispatchSwapState({ type: 'UPDATE_DEPENDENT', payload: '' })\n        }\n      }\n    } else if (swapType === TOKEN_TO_TOKEN) {\n      const reserveETHFirst = inputReserveETH\n      const reserveTokenFirst = inputReserveToken\n\n      const reserveETHSecond = outputReserveETH\n      const reserveTokenSecond = outputReserveToken\n\n      if (amount && reserveETHFirst && reserveTokenFirst && reserveETHSecond && reserveTokenSecond) {\n        try {\n          if (independentField === INPUT) {\n            const intermediateValue = calculateEtherTokenOutputFromInput(amount, reserveTokenFirst, reserveETHFirst)\n            if (intermediateValue.lte(ethers.constants.Zero)) {\n              throw Error()\n            }\n            const calculatedDependentValue = calculateEtherTokenOutputFromInput(\n              intermediateValue,\n              reserveETHSecond,\n              reserveTokenSecond\n            )\n            if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n              throw Error()\n            }\n            dispatchSwapState({\n              type: 'UPDATE_DEPENDENT',\n              payload: calculatedDependentValue\n            })\n          } else {\n            const intermediateValue = calculateEtherTokenInputFromOutput(amount, reserveETHSecond, reserveTokenSecond)\n            if (intermediateValue.lte(ethers.constants.Zero)) {\n              throw Error()\n            }\n            const calculatedDependentValue = calculateEtherTokenInputFromOutput(\n              intermediateValue,\n              reserveTokenFirst,\n              reserveETHFirst\n            )\n            if (calculatedDependentValue.lte(ethers.constants.Zero)) {\n              throw Error()\n            }\n            dispatchSwapState({\n              type: 'UPDATE_DEPENDENT',\n              payload: calculatedDependentValue\n            })\n          }\n        } catch {\n          setIndependentError(t('insufficientLiquidity'))\n        }\n        return () => {\n          dispatchSwapState({ type: 'UPDATE_DEPENDENT', payload: '' })\n        }\n      }\n    }\n  }, [\n    independentValueParsed,\n    swapType,\n    outputReserveETH,\n    outputReserveToken,\n    inputReserveETH,\n    inputReserveToken,\n    independentField,\n    t\n  ])\n\n  useEffect(() => {\n    const history = createBrowserHistory()\n    history.push(window.location.pathname + '')\n  }, [])\n\n  const [inverted, setInverted] = useState(false)\n  const exchangeRate = getExchangeRate(inputValueParsed, inputDecimals, outputValueParsed, outputDecimals)\n  const exchangeRateInverted = getExchangeRate(inputValueParsed, inputDecimals, outputValueParsed, outputDecimals, true)\n\n  const marketRate = getMarketRate(\n    swapType,\n    inputReserveETH,\n    inputReserveToken,\n    inputDecimals,\n    outputReserveETH,\n    outputReserveToken,\n    outputDecimals\n  )\n\n  const percentSlippage =\n    exchangeRate && marketRate\n      ? exchangeRate\n          .sub(marketRate)\n          .abs()\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n          .div(marketRate)\n          .sub(ethers.utils.bigNumberify(3).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(15))))\n      : undefined\n  const percentSlippageFormatted = percentSlippage && amountFormatter(percentSlippage, 16, 2)\n  const slippageWarning =\n    percentSlippage &&\n    percentSlippage.gte(ethers.utils.parseEther('.05')) &&\n    percentSlippage.lt(ethers.utils.parseEther('.2')) // [5% - 20%)\n  const highSlippageWarning = percentSlippage && percentSlippage.gte(ethers.utils.parseEther('.2')) // [20+%\n\n  const isValid = sending\n    ? exchangeRate && inputError === null && independentError === null && recipientError === null && deadlineFromNow\n    : exchangeRate && inputError === null && independentError === null && deadlineFromNow\n\n  const estimatedText = `(${t('estimated')})`\n  function formatBalance(value) {\n    return `Balance: ${value}`\n  }\n\n  async function onSwap() {\n    //if user changed deadline, log new one in minutes\n    if (deadlineFromNow !== DEFAULT_DEADLINE_FROM_NOW) {\n      ReactGA.event({\n        category: 'Advanced Interaction',\n        action: 'Set Custom Deadline',\n        value: deadlineFromNow / 60\n      })\n    }\n\n    const deadline = Math.ceil(Date.now() / 1000) + deadlineFromNow\n\n    // if user has changed slippage, log\n    if (swapType === TOKEN_TO_TOKEN) {\n      if (parseInt(tokenAllowedSlippageBig.toString()) !== TOKEN_ALLOWED_SLIPPAGE_DEFAULT) {\n        ReactGA.event({\n          category: 'Advanced Interaction',\n          action: 'Set Custom Slippage',\n          value: parseInt(tokenAllowedSlippageBig.toString())\n        })\n      }\n    } else {\n      if (parseInt(allowedSlippageBig.toString()) !== ALLOWED_SLIPPAGE_DEFAULT) {\n        ReactGA.event({\n          category: 'Advanced Interaction',\n          action: 'Set Custom Slippage',\n          value: parseInt(allowedSlippageBig.toString())\n        })\n      }\n    }\n\n    let estimate, method, args, value\n\n    let inputEthPerToken = 1\n    if (inputCurrency !== 'ETH') {\n      inputEthPerToken = inputReserveToken && inputReserveETH ? inputReserveETH / inputReserveToken : null\n    }\n    let usdTransactionSize = ethPrice * inputEthPerToken * inputValueFormatted\n\n    if (independentField === INPUT) {\n      // general details about transaction\n      ReactGA.event({\n        category: 'Transaction',\n        action: sending ? 'SendInput' : 'SwapInput',\n        label: outputCurrency,\n        value: usdTransactionSize\n      })\n\n      if (swapType === ETH_TO_TOKEN) {\n        estimate = sending ? contract.estimate.ethToTokenTransferInput : contract.estimate.ethToUniswapInput\n        method = sending ? contract.ethToTokenTransferInput : contract.ethToUniswapInput\n        args = sending ? [dependentValueMinumum, deadline, recipient.address] : [dependentValueMinumum, deadline]\n        value = independentValueParsed\n      } else if (swapType === TOKEN_TO_ETH) {\n        estimate = sending ? contract.estimate.tokenToEthTransferInput : contract.estimate.tokenToEthSwapInput\n        method = sending ? contract.tokenToEthTransferInput : contract.tokenToEthSwapInput\n        args = sending\n          ? [independentValueParsed, dependentValueMinumum, deadline, recipient.address]\n          : [independentValueParsed, dependentValueMinumum, deadline]\n        value = ethers.constants.Zero\n      } else if (swapType === TOKEN_TO_TOKEN) {\n        estimate = sending ? contract.estimate.tokenToTokenTransferInput : contract.estimate.tokenToUniswapInput\n        method = sending ? contract.tokenToTokenTransferInput : contract.tokenToUniswapInput\n        args = sending\n          ? [\n              independentValueParsed,\n              dependentValueMinumum,\n              ethers.constants.One,\n              deadline,\n              recipient.address,\n              outputCurrency\n            ]\n          : [independentValueParsed, dependentValueMinumum, ethers.constants.One, deadline, outputCurrency]\n        value = ethers.constants.Zero\n      }\n    } else if (independentField === OUTPUT) {\n      // general details about transaction\n      ReactGA.event({\n        category: 'Transaction',\n        action: sending ? 'SendOutput' : 'SwapOutput',\n        label: outputCurrency,\n        value: usdTransactionSize\n      })\n\n      if (swapType === ETH_TO_TOKEN) {\n        estimate = sending ? contract.estimate.ethToTokenTransferOutput : contract.estimate.ethToUniswapOutput\n        method = sending ? contract.ethToTokenTransferOutput : contract.ethToUniswapOutput\n        args = sending ? [independentValueParsed, deadline, recipient.address] : [independentValueParsed, deadline]\n        value = dependentValueMaximum\n      } else if (swapType === TOKEN_TO_ETH) {\n        estimate = sending ? contract.estimate.tokenToEthTransferOutput : contract.estimate.tokenToEthSwapOutput\n        method = sending ? contract.tokenToEthTransferOutput : contract.tokenToEthSwapOutput\n        args = sending\n          ? [independentValueParsed, dependentValueMaximum, deadline, recipient.address]\n          : [independentValueParsed, dependentValueMaximum, deadline]\n        value = ethers.constants.Zero\n      } else if (swapType === TOKEN_TO_TOKEN) {\n        estimate = sending ? contract.estimate.tokenToTokenTransferOutput : contract.estimate.tokenToUniswapOutput\n        method = sending ? contract.tokenToTokenTransferOutput : contract.tokenToUniswapOutput\n        args = sending\n          ? [\n              independentValueParsed,\n              dependentValueMaximum,\n              ethers.constants.MaxUint256,\n              deadline,\n              recipient.address,\n              outputCurrency\n            ]\n          : [independentValueParsed, dependentValueMaximum, ethers.constants.MaxUint256, deadline, outputCurrency]\n        value = ethers.constants.Zero\n      }\n    }\n\n    const estimatedGasLimit = await estimate(...args, { value })\n    method(...args, {\n      value,\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\n    }).then(response => {\n      addTransaction(response)\n    })\n  }\n\n  const [customSlippageError, setcustomSlippageError] = useState('')\n\n  const toggleWalletModal = useWalletModalToggle()\n\n  return (\n    <>\n      <CurrencyInputPanel\n        title={t('input')}\n        description={inputValueFormatted && independentField === OUTPUT ? estimatedText : ''}\n        extraText={inputBalanceFormatted && formatBalance(inputBalanceFormatted)}\n        extraTextClickHander={() => {\n          if (inputBalance && inputDecimals) {\n            const valueToSet = inputCurrency === 'ETH' ? inputBalance.sub(ethers.utils.parseEther('.1')) : inputBalance\n            if (valueToSet.gt(ethers.constants.Zero)) {\n              dispatchSwapState({\n                type: 'UPDATE_INDEPENDENT',\n                payload: {\n                  value: amountFormatter(valueToSet, inputDecimals, inputDecimals, false),\n                  field: INPUT\n                }\n              })\n            }\n          }\n        }}\n        onCurrencySelected={inputCurrency => {\n          dispatchSwapState({\n            type: 'SELECT_CURRENCY',\n            payload: { currency: inputCurrency, field: INPUT }\n          })\n        }}\n        onValueChange={inputValue => {\n          dispatchSwapState({\n            type: 'UPDATE_INDEPENDENT',\n            payload: { value: inputValue, field: INPUT }\n          })\n        }}\n        showUnlock={showUnlock}\n        selectedTokens={[inputCurrency, outputCurrency]}\n        selectedTokenAddress={inputCurrency}\n        value={inputValueFormatted}\n        errorMessage={inputError ? inputError : independentField === INPUT ? independentError : ''}\n      />\n      <OversizedPanel>\n        <DownArrowBackground>\n          <DownArrow\n            onClick={() => {\n              dispatchSwapState({ type: 'FLIP_INDEPENDENT' })\n            }}\n            clickable\n            alt=\"swap\"\n            active={isValid}\n          />\n        </DownArrowBackground>\n      </OversizedPanel>\n      <CurrencyInputPanel\n        title={t('output')}\n        description={outputValueFormatted && independentField === INPUT ? estimatedText : ''}\n        extraText={outputBalanceFormatted && formatBalance(outputBalanceFormatted)}\n        onCurrencySelected={outputCurrency => {\n          dispatchSwapState({\n            type: 'SELECT_CURRENCY',\n            payload: { currency: outputCurrency, field: OUTPUT }\n          })\n        }}\n        onValueChange={outputValue => {\n          dispatchSwapState({\n            type: 'UPDATE_INDEPENDENT',\n            payload: { value: outputValue, field: OUTPUT }\n          })\n        }}\n        selectedTokens={[inputCurrency, outputCurrency]}\n        selectedTokenAddress={outputCurrency}\n        value={outputValueFormatted}\n        errorMessage={independentField === OUTPUT ? independentError : ''}\n        disableUnlock\n      />\n      {sending ? (\n        <>\n          <OversizedPanel>\n            <DownArrowBackground>\n              <DownArrow active={isValid} alt=\"arrow\" />\n            </DownArrowBackground>\n          </OversizedPanel>\n          <AddressInputPanel onChange={setRecipient} onError={setRecipientError} initialInput={recipient} />\n        </>\n      ) : (\n        ''\n      )}\n      <OversizedPanel hideBottom>\n        <ExchangeRateWrapper\n          onClick={() => {\n            setInverted(inverted => !inverted)\n          }}\n        >\n          <ExchangeRate>{t('exchangeRate')}</ExchangeRate>\n          {inverted ? (\n            <span>\n              {exchangeRate\n                ? `1 ${inputSymbol} = ${amountFormatter(exchangeRate, 18, 6, false)} ${outputSymbol}`\n                : ' - '}\n            </span>\n          ) : (\n            <span>\n              {exchangeRate\n                ? `1 ${outputSymbol} = ${amountFormatter(exchangeRateInverted, 18, 6, false)} ${inputSymbol}`\n                : ' - '}\n            </span>\n          )}\n        </ExchangeRateWrapper>\n      </OversizedPanel>\n      <TransactionDetails\n        account={account}\n        setRawSlippage={setRawSlippage}\n        setRawTokenSlippage={setRawTokenSlippage}\n        rawSlippage={rawSlippage}\n        slippageWarning={slippageWarning}\n        highSlippageWarning={highSlippageWarning}\n        setDeadline={setDeadlineFromNow}\n        deadline={deadlineFromNow}\n        inputError={inputError}\n        independentError={independentError}\n        inputCurrency={inputCurrency}\n        outputCurrency={outputCurrency}\n        independentValue={independentValue}\n        independentValueParsed={independentValueParsed}\n        independentField={independentField}\n        INPUT={INPUT}\n        inputValueParsed={inputValueParsed}\n        outputValueParsed={outputValueParsed}\n        inputSymbol={inputSymbol}\n        outputSymbol={outputSymbol}\n        dependentValueMinumum={dependentValueMinumum}\n        dependentValueMaximum={dependentValueMaximum}\n        dependentDecimals={dependentDecimals}\n        independentDecimals={independentDecimals}\n        percentSlippageFormatted={percentSlippageFormatted}\n        setcustomSlippageError={setcustomSlippageError}\n        recipientAddress={recipient.address}\n        sending={sending}\n      />\n      <Flex>\n        <Button\n          disabled={!account && !error ? false : !isValid || customSlippageError === 'invalid'}\n          onClick={account && !error ? onSwap : toggleWalletModal}\n          warning={highSlippageWarning || customSlippageError === 'warning'}\n          loggedOut={!account}\n        >\n          {!account\n            ? 'Connect to a Wallet'\n            : sending\n            ? highSlippageWarning || customSlippageError === 'warning'\n              ? t('sendAnyway')\n              : t('send')\n            : highSlippageWarning || customSlippageError === 'warning'\n            ? t('swapAnyway')\n            : t('swap')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}