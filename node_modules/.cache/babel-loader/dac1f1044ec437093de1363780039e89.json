{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/pages/Pool/AddLiquidity.js\";\nimport React, { useReducer, useState, useCallback, useEffect, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { createBrowserHistory } from \"history\";\nimport { ethers } from \"ethers\";\nimport ReactGA from \"react-ga\";\nimport styled from \"styled-components\";\nimport { Button } from \"../../theme\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport OversizedPanel from \"../../components/OversizedPanel\";\nimport ContextualInfo from \"../../components/ContextualInfo\";\nimport { ReactComponent as Plus } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/plus-blue.svg\";\nimport { useWeb3React, useExchangeContract } from \"../../hooks\";\nimport { brokenTokens } from \"../../constants\";\nimport { amountFormatter, calculateGasMargin } from \"../../utils\";\nimport { useTransactionAdder } from \"../../contexts/Transactions\";\nimport { useTokenDetails } from \"../../contexts/Tokens\";\nimport { useAddressBalance, useExchangeReserves, useETHPriceInUSD } from \"../../contexts/Balances\";\nimport { useAddressAllowance } from \"../../contexts/Allowances\";\nconst INPUT = 0;\nconst OUTPUT = 1; // denominated in bips\n\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200); // denominated in seconds\n\nconst DEADLINE_FROM_NOW = 60 * 15; // denominated in bips\n\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000);\nconst BlueSpan = styled.span`\n  color: ${({\n  theme\n}) => theme.royalBlue};\n`;\nconst NewExchangeWarning = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  margin-bottom: 2rem;\n  border: 1px solid rgba($pizazz-orange, 0.4);\n  background-color: rgba($pizazz-orange, 0.1);\n  border-radius: 1rem;\n`;\nconst NewExchangeWarningText = styled.div`\n  font-size: 0.75rem;\n  line-height: 1rem;\n  text-align: center;\n\n  :first-child {\n    padding-bottom: 0.3rem;\n    font-weight: 500;\n  }\n`;\nconst LastSummaryText = styled.div`\n  margin-top: 1rem;\n`;\nconst DownArrowBackground = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`;\nconst SummaryPanel = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap}\n  padding: 1rem 0;\n`;\nconst ExchangeRateWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`;\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({\n  theme\n}) => theme.doveGray};\n`;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`;\n\nconst WrappedPlus = ({\n  isError,\n  highSlippageWarning,\n  ...rest\n}) => React.createElement(Plus, Object.assign({}, rest, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}));\n\nconst ColoredWrappedPlus = styled(WrappedPlus)`\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n  path {\n    stroke: ${({\n  active,\n  theme\n}) => active ? theme.royalBlue : theme.chaliceGray};\n  }\n`;\n\nfunction calculateSlippageBounds(value) {\n  if (value) {\n    const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000));\n    const minimum = value.sub(offset);\n    const maximum = value.add(offset);\n    return {\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction calculateMaxOutputVal(value) {\n  if (value) {\n    return value.mul(ethers.utils.bigNumberify(10000)).div(ALLOWED_SLIPPAGE.add(ethers.utils.bigNumberify(10000)));\n  }\n}\n\nfunction initialAddLiquidityState(state) {\n  return {\n    inputValue: state.ethAmountURL ? state.ethAmountURL : \"\",\n    outputValue: state.tokenAmountURL && !state.ethAmountURL ? state.tokenAmountURL : \"\",\n    lastEditedField: state.tokenAmountURL && state.ethAmountURL === \"\" ? OUTPUT : INPUT,\n    outputCurrency: state.tokenURL ? state.tokenURL : \"\"\n  };\n}\n\nfunction addLiquidityStateReducer(state, action) {\n  switch (action.type) {\n    case \"SELECT_CURRENCY\":\n      {\n        return { ...state,\n          outputCurrency: action.payload\n        };\n      }\n\n    case \"UPDATE_VALUE\":\n      {\n        const {\n          inputValue,\n          outputValue\n        } = state;\n        const {\n          field,\n          value\n        } = action.payload;\n        return { ...state,\n          inputValue: field === INPUT ? value : inputValue,\n          outputValue: field === OUTPUT ? value : outputValue,\n          lastEditedField: field\n        };\n      }\n\n    case \"UPDATE_DEPENDENT_VALUE\":\n      {\n        const {\n          inputValue,\n          outputValue\n        } = state;\n        const {\n          field,\n          value\n        } = action.payload;\n        return { ...state,\n          inputValue: field === INPUT ? value : inputValue,\n          outputValue: field === OUTPUT ? value : outputValue\n        };\n      }\n\n    default:\n      {\n        return initialAddLiquidityState();\n      }\n  }\n}\n\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n  try {\n    if (inputValue && (inputDecimals || inputDecimals === 0) && outputValue && (outputDecimals || outputDecimals === 0)) {\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18));\n\n      if (invert) {\n        return inputValue.mul(factor).div(outputValue).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)));\n      } else {\n        return outputValue.mul(factor).div(inputValue).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)));\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(reserveETH, reserveToken, decimals, invert = false) {\n  return getExchangeRate(reserveETH, 18, reserveToken, decimals, invert);\n}\n\nexport default function AddLiquidity({\n  params\n}) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    library,\n    account,\n    active\n  } = useWeb3React(); // BigNumber.js instance\n\n  const ethPrice = useETHPriceInUSD(); // clear url of query\n\n  useEffect(() => {\n    const history = createBrowserHistory();\n    history.push(window.location.pathname + \"\");\n  }, []);\n  const [addLiquidityState, dispatchAddLiquidityState] = useReducer(addLiquidityStateReducer, {\n    ethAmountURL: params.ethAmount,\n    tokenAmountURL: params.tokenAmount,\n    tokenURL: params.token\n  }, initialAddLiquidityState);\n  const {\n    inputValue,\n    outputValue,\n    lastEditedField,\n    outputCurrency\n  } = addLiquidityState;\n  const inputCurrency = \"ETH\";\n  const [inputValueParsed, setInputValueParsed] = useState();\n  const [outputValueParsed, setOutputValueParsed] = useState();\n  const [inputError, setInputError] = useState();\n  const [outputError, setOutputError] = useState();\n  const [brokenTokenWarning, setBrokenTokenWarning] = useState();\n  const {\n    symbol,\n    decimals,\n    exchangeAddress\n  } = useTokenDetails(outputCurrency);\n  const exchangeContract = useExchangeContract(exchangeAddress);\n  const [totalPoolTokens, setTotalPoolTokens] = useState();\n  const fetchPoolTokens = useCallback(() => {\n    if (exchangeContract) {\n      exchangeContract.totalSupply().then(totalSupply => {\n        setTotalPoolTokens(totalSupply);\n      });\n    }\n  }, [exchangeContract]);\n  useEffect(() => {\n    fetchPoolTokens();\n    library.on(\"block\", fetchPoolTokens);\n    return () => {\n      library.removeListener(\"block\", fetchPoolTokens);\n    };\n  }, [fetchPoolTokens, library]);\n  const poolTokenBalance = useAddressBalance(account, exchangeAddress);\n  const exchangeETHBalance = useAddressBalance(exchangeAddress, \"ETH\");\n  const exchangeTokenBalance = useAddressBalance(exchangeAddress, outputCurrency);\n  const {\n    reserveETH,\n    reserveToken\n  } = useExchangeReserves(outputCurrency);\n  const isNewExchange = !!(reserveETH && reserveToken && reserveETH.isZero() && reserveToken.isZero()); // 18 decimals\n\n  const poolTokenPercentage = poolTokenBalance && totalPoolTokens && isNewExchange === false && !totalPoolTokens.isZero() ? poolTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens) : undefined;\n  const ethShare = exchangeETHBalance && poolTokenPercentage ? exchangeETHBalance.mul(poolTokenPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))) : undefined;\n  const tokenShare = exchangeTokenBalance && poolTokenPercentage ? exchangeTokenBalance.mul(poolTokenPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))) : undefined;\n  const liquidityMinted = isNewExchange ? inputValueParsed : totalPoolTokens && inputValueParsed && exchangeETHBalance && !exchangeETHBalance.isZero() ? totalPoolTokens.mul(inputValueParsed).div(exchangeETHBalance) : undefined; // user balances\n\n  const inputBalance = useAddressBalance(account, inputCurrency);\n  const outputBalance = useAddressBalance(account, outputCurrency);\n  const ethPerLiquidityToken = exchangeETHBalance && totalPoolTokens && isNewExchange === false && !totalPoolTokens.isZero() ? exchangeETHBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens) : undefined;\n  const tokenPerLiquidityToken = exchangeTokenBalance && totalPoolTokens && isNewExchange === false && !totalPoolTokens.isZero() ? exchangeTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens) : undefined;\n  const outputValueMax = outputValueParsed && calculateSlippageBounds(outputValueParsed).maximum;\n  const liquidityTokensMin = liquidityMinted && calculateSlippageBounds(liquidityMinted).minimum;\n  const marketRate = useMemo(() => {\n    return getMarketRate(reserveETH, reserveToken, decimals);\n  }, [reserveETH, reserveToken, decimals]);\n  const marketRateInverted = useMemo(() => {\n    return getMarketRate(reserveETH, reserveToken, decimals, true);\n  }, [reserveETH, reserveToken, decimals]);\n\n  function renderTransactionDetails() {\n    const b = text => React.createElement(BlueSpan, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, text);\n\n    if (isNewExchange) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, t(\"youAreAdding\"), \" \", b(`${inputValue} ETH`), \" \", t(\"and\"), \" \", b(`${outputValue} ${symbol}`), \" \", t(\"intoPool\")), React.createElement(LastSummaryText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, t(\"youAreSettingExRate\"), \" \", b(`1 ETH = ${amountFormatter(getMarketRate(inputValueParsed, outputValueParsed, decimals), 18, 4, false)} ${symbol}`), \".\"), React.createElement(LastSummaryText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, t(\"youWillMint\"), \" \", b(`${inputValue}`), \" \", t(\"liquidityTokens\")), React.createElement(LastSummaryText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, t(\"totalSupplyIs0\")));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, t(\"youAreAdding\"), \" \", b(`${amountFormatter(inputValueParsed, 18, 4)} ETH`), \" \", t(\"and\"), \" \", \"at most\", \" \", b(`${amountFormatter(outputValueMax, decimals, Math.min(decimals, 4))} ${symbol}`), \" \", t(\"intoPool\")), React.createElement(LastSummaryText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, t(\"youWillMint\"), \" \", b(amountFormatter(liquidityMinted, 18, 4)), \" \", t(\"liquidityTokens\")), React.createElement(LastSummaryText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, t(\"totalSupplyIs\"), \" \", b(amountFormatter(totalPoolTokens, 18, 4))), React.createElement(LastSummaryText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, t(\"tokenWorth\"), \" \", b(amountFormatter(ethPerLiquidityToken, 18, 4)), \" \", \"ETH \", t(\"and\"), \" \", b(amountFormatter(tokenPerLiquidityToken, decimals, Math.min(decimals, 4))), \" \", symbol));\n    }\n  }\n\n  function renderSummary() {\n    let contextualInfo = \"\";\n    let isError = false;\n\n    if (brokenTokenWarning) {\n      contextualInfo = t(\"brokenToken\");\n      isError = true;\n    } else if (inputError || outputError) {\n      contextualInfo = inputError || outputError;\n      isError = true;\n    } else if (!inputCurrency || !outputCurrency) {\n      contextualInfo = t(\"selectTokenCont\");\n    } else if (!inputValue) {\n      contextualInfo = t(\"enterValueCont\");\n    } else if (!account) {\n      contextualInfo = t(\"noWallet\");\n      isError = true;\n    }\n\n    return React.createElement(ContextualInfo, {\n      openDetailsText: t(\"transactionDetails\"),\n      closeDetailsText: t(\"hideDetails\"),\n      contextualInfo: contextualInfo,\n      isError: isError,\n      renderTransactionDetails: renderTransactionDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    });\n  }\n\n  const addTransaction = useTransactionAdder();\n\n  async function onAddLiquidity() {\n    // take ETH amount, multiplied by ETH rate and 2 for total tx size\n    let usdTransactionSize = ethPrice * (inputValueParsed / 1e18) * 2; // log pool added to and total usd amount\n\n    ReactGA.event({\n      category: \"Transaction\",\n      action: \"Add Liquidity\",\n      label: outputCurrency,\n      value: usdTransactionSize\n    });\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n    const estimatedGasLimit = await exchangeContract.estimate.addLiquidity(isNewExchange ? ethers.constants.Zero : liquidityTokensMin, isNewExchange ? outputValueParsed : outputValueMax, deadline, {\n      value: inputValueParsed\n    });\n    const gasLimit = calculateGasMargin(estimatedGasLimit, GAS_MARGIN);\n    exchangeContract.addLiquidity(isNewExchange ? ethers.constants.Zero : liquidityTokensMin, isNewExchange ? outputValueParsed : outputValueMax, deadline, {\n      value: inputValueParsed,\n      gasLimit\n    }).then(response => {\n      addTransaction(response);\n    });\n  }\n\n  function formatBalance(value) {\n    return `Balance: ${value}`;\n  } // check for broken tokens\n\n\n  useEffect(() => {\n    setBrokenTokenWarning(false);\n\n    for (let i = 0; i < brokenTokens.length; i++) {\n      if (brokenTokens[i].toLowerCase() === outputCurrency.toLowerCase()) {\n        setBrokenTokenWarning(true);\n      }\n    }\n  }, [outputCurrency]);\n  useEffect(() => {\n    if (isNewExchange) {\n      if (inputValue) {\n        const parsedInputValue = ethers.utils.parseUnits(inputValue, 18);\n        setInputValueParsed(parsedInputValue);\n      }\n\n      if (outputValue) {\n        const parsedOutputValue = ethers.utils.parseUnits(outputValue, decimals);\n        setOutputValueParsed(parsedOutputValue);\n      }\n    }\n  }, [decimals, inputValue, isNewExchange, outputValue]); // parse input value\n\n  useEffect(() => {\n    if (isNewExchange === false && inputValue && marketRate && lastEditedField === INPUT && (decimals || decimals === 0)) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(inputValue, 18);\n\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\n          throw Error();\n        }\n\n        setInputValueParsed(parsedValue);\n        const currencyAmount = marketRate.mul(parsedValue).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18 - decimals)));\n        setOutputValueParsed(currencyAmount);\n        dispatchAddLiquidityState({\n          type: \"UPDATE_DEPENDENT_VALUE\",\n          payload: {\n            field: OUTPUT,\n            value: amountFormatter(currencyAmount, decimals, Math.min(decimals, 4), false)\n          }\n        });\n        return () => {\n          setOutputError();\n          setInputValueParsed();\n          setOutputValueParsed();\n          dispatchAddLiquidityState({\n            type: \"UPDATE_DEPENDENT_VALUE\",\n            payload: {\n              field: OUTPUT,\n              value: \"\"\n            }\n          });\n        };\n      } catch {\n        setOutputError(t(\"inputNotValid\"));\n      }\n    }\n  }, [inputValue, isNewExchange, lastEditedField, marketRate, decimals, t]); // parse output value\n\n  useEffect(() => {\n    if (isNewExchange === false && outputValue && marketRateInverted && lastEditedField === OUTPUT && (decimals || decimals === 0)) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(outputValue, decimals);\n\n        if (parsedValue.lte(ethers.constants.Zero) || parsedValue.gte(ethers.constants.MaxUint256)) {\n          throw Error();\n        }\n\n        setOutputValueParsed(parsedValue);\n        const currencyAmount = marketRateInverted.mul(parsedValue).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(decimals)));\n        setInputValueParsed(currencyAmount);\n        dispatchAddLiquidityState({\n          type: \"UPDATE_DEPENDENT_VALUE\",\n          payload: {\n            field: INPUT,\n            value: amountFormatter(currencyAmount, 18, 4, false)\n          }\n        });\n        return () => {\n          setInputError();\n          setOutputValueParsed();\n          setInputValueParsed();\n          dispatchAddLiquidityState({\n            type: \"UPDATE_DEPENDENT_VALUE\",\n            payload: {\n              field: INPUT,\n              value: \"\"\n            }\n          });\n        };\n      } catch {\n        setInputError(t(\"inputNotValid\"));\n      }\n    }\n  }, [outputValue, isNewExchange, lastEditedField, marketRateInverted, decimals, t]); // input validation\n\n  useEffect(() => {\n    if (inputValueParsed && inputBalance) {\n      if (inputValueParsed.gt(inputBalance)) {\n        setInputError(t(\"insufficientBalance\"));\n      } else {\n        setInputError(null);\n      }\n    }\n\n    if (outputValueMax && outputBalance) {\n      if (outputValueMax.gt(outputBalance)) {\n        setOutputError(t(\"insufficientBalance\"));\n      } else {\n        setOutputError(null);\n      }\n    }\n  }, [inputValueParsed, inputBalance, outputValueMax, outputBalance, t]);\n  const allowance = useAddressAllowance(account, outputCurrency, exchangeAddress);\n  const [showUnlock, setShowUnlock] = useState(false);\n  useEffect(() => {\n    if (outputValueParsed && allowance) {\n      if (allowance.lt(outputValueParsed)) {\n        setOutputError(t(\"unlockTokenCont\"));\n        setShowUnlock(true);\n      }\n\n      return () => {\n        setOutputError();\n        setShowUnlock(false);\n      };\n    }\n  }, [outputValueParsed, allowance, t]);\n  const isActive = active && account;\n  const isValid = (inputError === null || outputError === null) && !showUnlock && !brokenTokenWarning;\n  return React.createElement(React.Fragment, null, isNewExchange ? React.createElement(NewExchangeWarning, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 721\n    },\n    __self: this\n  }, React.createElement(NewExchangeWarningText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"first-liquidity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723\n    },\n    __self: this\n  }, \"\\uD83D\\uDEB0\"), \" \", t(\"firstLiquidity\")), React.createElement(NewExchangeWarningText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728\n    },\n    __self: this\n  }, t(\"initialExchangeRate\", {\n    symbol\n  }))) : null, React.createElement(CurrencyInputPanel, {\n    title: t(\"deposit\"),\n    extraText: inputBalance && formatBalance(amountFormatter(inputBalance, 18, 4)),\n    onValueChange: inputValue => {\n      dispatchAddLiquidityState({\n        type: \"UPDATE_VALUE\",\n        payload: {\n          value: inputValue,\n          field: INPUT\n        }\n      });\n    },\n    extraTextClickHander: () => {\n      if (inputBalance) {\n        const valueToSet = inputBalance.sub(ethers.utils.parseEther(\".1\"));\n\n        if (valueToSet.gt(ethers.constants.Zero)) {\n          dispatchAddLiquidityState({\n            type: \"UPDATE_VALUE\",\n            payload: {\n              value: amountFormatter(valueToSet, 18, 18, false),\n              field: INPUT\n            }\n          });\n        }\n      }\n    },\n    selectedTokenAddress: \"ETH\",\n    value: inputValue,\n    errorMessage: inputError,\n    disableTokenSelect: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734\n    },\n    __self: this\n  }), React.createElement(OversizedPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764\n    },\n    __self: this\n  }, React.createElement(DownArrowBackground, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765\n    },\n    __self: this\n  }, React.createElement(ColoredWrappedPlus, {\n    active: isActive,\n    alt: \"plus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766\n    },\n    __self: this\n  }))), React.createElement(CurrencyInputPanel, {\n    title: t(\"deposit\"),\n    description: isNewExchange ? \"\" : outputValue ? `(${t(\"estimated\")})` : \"\",\n    extraText: outputBalance && decimals && formatBalance(amountFormatter(outputBalance, decimals, Math.min(decimals, 4))),\n    selectedTokenAddress: outputCurrency,\n    onCurrencySelected: outputCurrency => {\n      dispatchAddLiquidityState({\n        type: \"SELECT_CURRENCY\",\n        payload: outputCurrency\n      });\n    },\n    onValueChange: outputValue => {\n      dispatchAddLiquidityState({\n        type: \"UPDATE_VALUE\",\n        payload: {\n          value: outputValue,\n          field: OUTPUT\n        }\n      });\n    },\n    extraTextClickHander: () => {\n      if (outputBalance) {\n        dispatchAddLiquidityState({\n          type: \"UPDATE_VALUE\",\n          payload: {\n            value: amountFormatter(calculateMaxOutputVal(outputBalance), decimals, decimals, false),\n            field: OUTPUT\n          }\n        });\n      }\n    },\n    value: outputValue,\n    showUnlock: showUnlock,\n    errorMessage: outputError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769\n    },\n    __self: this\n  }), React.createElement(OversizedPanel, {\n    hideBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 814\n    },\n    __self: this\n  }, React.createElement(SummaryPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 815\n    },\n    __self: this\n  }, React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 817\n    },\n    __self: this\n  }, t(\"exchangeRate\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 818\n    },\n    __self: this\n  }, marketRate ? `1 ETH = ${amountFormatter(marketRate, 18, 4)} ${symbol}` : \" - \")), React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 825\n    },\n    __self: this\n  }, t(\"currentPoolSize\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 826\n    },\n    __self: this\n  }, exchangeETHBalance && exchangeTokenBalance ? `${amountFormatter(exchangeETHBalance, 18, 4)} ETH + ${amountFormatter(exchangeTokenBalance, decimals, Math.min(4, decimals))} ${symbol}` : \" - \")), React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 840\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841\n    },\n    __self: this\n  }, t(\"yourPoolShare\"), \" (\", exchangeETHBalance && amountFormatter(poolTokenPercentage, 16, 2), \"%)\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 847\n    },\n    __self: this\n  }, ethShare && tokenShare ? `${amountFormatter(ethShare, 18, 4)} ETH + ${amountFormatter(tokenShare, decimals, Math.min(4, decimals))} ${symbol}` : \" - \")))), renderSummary(), React.createElement(Flex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: !isValid,\n    onClick: onAddLiquidity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861\n    },\n    __self: this\n  }, t(\"addLiquidity\"))));\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/pages/Pool/AddLiquidity.js"],"names":["React","useReducer","useState","useCallback","useEffect","useMemo","useTranslation","createBrowserHistory","ethers","ReactGA","styled","Button","CurrencyInputPanel","OversizedPanel","ContextualInfo","useWeb3React","useExchangeContract","brokenTokens","amountFormatter","calculateGasMargin","useTransactionAdder","useTokenDetails","useAddressBalance","useExchangeReserves","useETHPriceInUSD","useAddressAllowance","INPUT","OUTPUT","ALLOWED_SLIPPAGE","utils","bigNumberify","DEADLINE_FROM_NOW","GAS_MARGIN","BlueSpan","span","theme","royalBlue","NewExchangeWarning","div","NewExchangeWarningText","LastSummaryText","DownArrowBackground","flexRowNoWrap","SummaryPanel","flexColumnNoWrap","ExchangeRateWrapper","doveGray","ExchangeRate","Flex","WrappedPlus","isError","highSlippageWarning","rest","ColoredWrappedPlus","active","chaliceGray","calculateSlippageBounds","value","offset","mul","minimum","sub","maximum","add","lt","constants","Zero","gt","MaxUint256","calculateMaxOutputVal","initialAddLiquidityState","state","inputValue","ethAmountURL","outputValue","tokenAmountURL","lastEditedField","outputCurrency","tokenURL","addLiquidityStateReducer","action","type","payload","field","getExchangeRate","inputDecimals","outputDecimals","invert","factor","pow","getMarketRate","reserveETH","reserveToken","decimals","AddLiquidity","params","t","library","account","ethPrice","history","push","window","location","pathname","addLiquidityState","dispatchAddLiquidityState","ethAmount","tokenAmount","token","inputCurrency","inputValueParsed","setInputValueParsed","outputValueParsed","setOutputValueParsed","inputError","setInputError","outputError","setOutputError","brokenTokenWarning","setBrokenTokenWarning","symbol","exchangeAddress","exchangeContract","totalPoolTokens","setTotalPoolTokens","fetchPoolTokens","totalSupply","then","on","removeListener","poolTokenBalance","exchangeETHBalance","exchangeTokenBalance","isNewExchange","isZero","poolTokenPercentage","undefined","ethShare","tokenShare","liquidityMinted","inputBalance","outputBalance","ethPerLiquidityToken","tokenPerLiquidityToken","outputValueMax","liquidityTokensMin","marketRate","marketRateInverted","renderTransactionDetails","b","text","Math","min","renderSummary","contextualInfo","addTransaction","onAddLiquidity","usdTransactionSize","event","category","label","deadline","ceil","Date","now","estimatedGasLimit","estimate","addLiquidity","gasLimit","response","formatBalance","i","length","toLowerCase","parsedInputValue","parseUnits","parsedOutputValue","parsedValue","lte","gte","Error","currencyAmount","allowance","showUnlock","setShowUnlock","isActive","isValid","valueToSet","parseEther"],"mappings":"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","sourcesContent":["import React, {\n  useReducer,\n  useState,\n  useCallback,\n  useEffect,\n  useMemo\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { createBrowserHistory } from \"history\";\nimport { ethers } from \"ethers\";\nimport ReactGA from \"react-ga\";\nimport styled from \"styled-components\";\n\nimport { Button } from \"../../theme\";\nimport CurrencyInputPanel from \"../../components/CurrencyInputPanel\";\nimport OversizedPanel from \"../../components/OversizedPanel\";\nimport ContextualInfo from \"../../components/ContextualInfo\";\nimport { ReactComponent as Plus } from \"../../assets/images/plus-blue.svg\";\nimport { useWeb3React, useExchangeContract } from \"../../hooks\";\nimport { brokenTokens } from \"../../constants\";\nimport { amountFormatter, calculateGasMargin } from \"../../utils\";\nimport { useTransactionAdder } from \"../../contexts/Transactions\";\nimport { useTokenDetails } from \"../../contexts/Tokens\";\nimport {\n  useAddressBalance,\n  useExchangeReserves,\n  useETHPriceInUSD\n} from \"../../contexts/Balances\";\nimport { useAddressAllowance } from \"../../contexts/Allowances\";\n\nconst INPUT = 0;\nconst OUTPUT = 1;\n\n// denominated in bips\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200);\n\n// denominated in seconds\nconst DEADLINE_FROM_NOW = 60 * 15;\n\n// denominated in bips\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000);\n\nconst BlueSpan = styled.span`\n  color: ${({ theme }) => theme.royalBlue};\n`;\n\nconst NewExchangeWarning = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  margin-bottom: 2rem;\n  border: 1px solid rgba($pizazz-orange, 0.4);\n  background-color: rgba($pizazz-orange, 0.1);\n  border-radius: 1rem;\n`;\n\nconst NewExchangeWarningText = styled.div`\n  font-size: 0.75rem;\n  line-height: 1rem;\n  text-align: center;\n\n  :first-child {\n    padding-bottom: 0.3rem;\n    font-weight: 500;\n  }\n`;\n\nconst LastSummaryText = styled.div`\n  margin-top: 1rem;\n`;\n\nconst DownArrowBackground = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`;\nconst SummaryPanel = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  padding: 1rem 0;\n`;\n\nconst ExchangeRateWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({ theme }) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`;\n\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({ theme }) => theme.doveGray};\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`;\n\nconst WrappedPlus = ({ isError, highSlippageWarning, ...rest }) => (\n  <Plus {...rest} />\n);\nconst ColoredWrappedPlus = styled(WrappedPlus)`\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n  path {\n    stroke: ${({ active, theme }) =>\n      active ? theme.royalBlue : theme.chaliceGray};\n  }\n`;\n\nfunction calculateSlippageBounds(value) {\n  if (value) {\n    const offset = value\n      .mul(ALLOWED_SLIPPAGE)\n      .div(ethers.utils.bigNumberify(10000));\n    const minimum = value.sub(offset);\n    const maximum = value.add(offset);\n    return {\n      minimum: minimum.lt(ethers.constants.Zero)\n        ? ethers.constants.Zero\n        : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256)\n        ? ethers.constants.MaxUint256\n        : maximum\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction calculateMaxOutputVal(value) {\n  if (value) {\n    return value\n      .mul(ethers.utils.bigNumberify(10000))\n      .div(ALLOWED_SLIPPAGE.add(ethers.utils.bigNumberify(10000)));\n  }\n}\n\nfunction initialAddLiquidityState(state) {\n  return {\n    inputValue: state.ethAmountURL ? state.ethAmountURL : \"\",\n    outputValue:\n      state.tokenAmountURL && !state.ethAmountURL ? state.tokenAmountURL : \"\",\n    lastEditedField:\n      state.tokenAmountURL && state.ethAmountURL === \"\" ? OUTPUT : INPUT,\n    outputCurrency: state.tokenURL ? state.tokenURL : \"\"\n  };\n}\n\nfunction addLiquidityStateReducer(state, action) {\n  switch (action.type) {\n    case \"SELECT_CURRENCY\": {\n      return {\n        ...state,\n        outputCurrency: action.payload\n      };\n    }\n    case \"UPDATE_VALUE\": {\n      const { inputValue, outputValue } = state;\n      const { field, value } = action.payload;\n      return {\n        ...state,\n        inputValue: field === INPUT ? value : inputValue,\n        outputValue: field === OUTPUT ? value : outputValue,\n        lastEditedField: field\n      };\n    }\n    case \"UPDATE_DEPENDENT_VALUE\": {\n      const { inputValue, outputValue } = state;\n      const { field, value } = action.payload;\n      return {\n        ...state,\n        inputValue: field === INPUT ? value : inputValue,\n        outputValue: field === OUTPUT ? value : outputValue\n      };\n    }\n    default: {\n      return initialAddLiquidityState();\n    }\n  }\n}\n\nfunction getExchangeRate(\n  inputValue,\n  inputDecimals,\n  outputValue,\n  outputDecimals,\n  invert = false\n) {\n  try {\n    if (\n      inputValue &&\n      (inputDecimals || inputDecimals === 0) &&\n      outputValue &&\n      (outputDecimals || outputDecimals === 0)\n    ) {\n      const factor = ethers.utils\n        .bigNumberify(10)\n        .pow(ethers.utils.bigNumberify(18));\n\n      if (invert) {\n        return inputValue\n          .mul(factor)\n          .div(outputValue)\n          .mul(\n            ethers.utils\n              .bigNumberify(10)\n              .pow(ethers.utils.bigNumberify(outputDecimals))\n          )\n          .div(\n            ethers.utils\n              .bigNumberify(10)\n              .pow(ethers.utils.bigNumberify(inputDecimals))\n          );\n      } else {\n        return outputValue\n          .mul(factor)\n          .div(inputValue)\n          .mul(\n            ethers.utils\n              .bigNumberify(10)\n              .pow(ethers.utils.bigNumberify(inputDecimals))\n          )\n          .div(\n            ethers.utils\n              .bigNumberify(10)\n              .pow(ethers.utils.bigNumberify(outputDecimals))\n          );\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(reserveETH, reserveToken, decimals, invert = false) {\n  return getExchangeRate(reserveETH, 18, reserveToken, decimals, invert);\n}\n\nexport default function AddLiquidity({ params }) {\n  const { t } = useTranslation();\n  const { library, account, active } = useWeb3React();\n\n  // BigNumber.js instance\n  const ethPrice = useETHPriceInUSD();\n\n  // clear url of query\n  useEffect(() => {\n    const history = createBrowserHistory();\n    history.push(window.location.pathname + \"\");\n  }, []);\n\n  const [addLiquidityState, dispatchAddLiquidityState] = useReducer(\n    addLiquidityStateReducer,\n    {\n      ethAmountURL: params.ethAmount,\n      tokenAmountURL: params.tokenAmount,\n      tokenURL: params.token\n    },\n    initialAddLiquidityState\n  );\n  const {\n    inputValue,\n    outputValue,\n    lastEditedField,\n    outputCurrency\n  } = addLiquidityState;\n  const inputCurrency = \"ETH\";\n\n  const [inputValueParsed, setInputValueParsed] = useState();\n  const [outputValueParsed, setOutputValueParsed] = useState();\n  const [inputError, setInputError] = useState();\n  const [outputError, setOutputError] = useState();\n\n  const [brokenTokenWarning, setBrokenTokenWarning] = useState();\n\n  const { symbol, decimals, exchangeAddress } = useTokenDetails(outputCurrency);\n  const exchangeContract = useExchangeContract(exchangeAddress);\n\n  const [totalPoolTokens, setTotalPoolTokens] = useState();\n  const fetchPoolTokens = useCallback(() => {\n    if (exchangeContract) {\n      exchangeContract.totalSupply().then(totalSupply => {\n        setTotalPoolTokens(totalSupply);\n      });\n    }\n  }, [exchangeContract]);\n  useEffect(() => {\n    fetchPoolTokens();\n    library.on(\"block\", fetchPoolTokens);\n\n    return () => {\n      library.removeListener(\"block\", fetchPoolTokens);\n    };\n  }, [fetchPoolTokens, library]);\n\n  const poolTokenBalance = useAddressBalance(account, exchangeAddress);\n  const exchangeETHBalance = useAddressBalance(exchangeAddress, \"ETH\");\n  const exchangeTokenBalance = useAddressBalance(\n    exchangeAddress,\n    outputCurrency\n  );\n\n  const { reserveETH, reserveToken } = useExchangeReserves(outputCurrency);\n  const isNewExchange = !!(\n    reserveETH &&\n    reserveToken &&\n    reserveETH.isZero() &&\n    reserveToken.isZero()\n  );\n\n  // 18 decimals\n  const poolTokenPercentage =\n    poolTokenBalance &&\n    totalPoolTokens &&\n    isNewExchange === false &&\n    !totalPoolTokens.isZero()\n      ? poolTokenBalance\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n          .div(totalPoolTokens)\n      : undefined;\n  const ethShare =\n    exchangeETHBalance && poolTokenPercentage\n      ? exchangeETHBalance\n          .mul(poolTokenPercentage)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n      : undefined;\n  const tokenShare =\n    exchangeTokenBalance && poolTokenPercentage\n      ? exchangeTokenBalance\n          .mul(poolTokenPercentage)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n      : undefined;\n\n  const liquidityMinted = isNewExchange\n    ? inputValueParsed\n    : totalPoolTokens &&\n      inputValueParsed &&\n      exchangeETHBalance &&\n      !exchangeETHBalance.isZero()\n    ? totalPoolTokens.mul(inputValueParsed).div(exchangeETHBalance)\n    : undefined;\n\n  // user balances\n  const inputBalance = useAddressBalance(account, inputCurrency);\n  const outputBalance = useAddressBalance(account, outputCurrency);\n\n  const ethPerLiquidityToken =\n    exchangeETHBalance &&\n    totalPoolTokens &&\n    isNewExchange === false &&\n    !totalPoolTokens.isZero()\n      ? exchangeETHBalance\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n          .div(totalPoolTokens)\n      : undefined;\n  const tokenPerLiquidityToken =\n    exchangeTokenBalance &&\n    totalPoolTokens &&\n    isNewExchange === false &&\n    !totalPoolTokens.isZero()\n      ? exchangeTokenBalance\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n          .div(totalPoolTokens)\n      : undefined;\n\n  const outputValueMax =\n    outputValueParsed && calculateSlippageBounds(outputValueParsed).maximum;\n  const liquidityTokensMin =\n    liquidityMinted && calculateSlippageBounds(liquidityMinted).minimum;\n\n  const marketRate = useMemo(() => {\n    return getMarketRate(reserveETH, reserveToken, decimals);\n  }, [reserveETH, reserveToken, decimals]);\n  const marketRateInverted = useMemo(() => {\n    return getMarketRate(reserveETH, reserveToken, decimals, true);\n  }, [reserveETH, reserveToken, decimals]);\n\n  function renderTransactionDetails() {\n    const b = text => <BlueSpan>{text}</BlueSpan>;\n\n    if (isNewExchange) {\n      return (\n        <div>\n          <div>\n            {t(\"youAreAdding\")} {b(`${inputValue} ETH`)} {t(\"and\")}{\" \"}\n            {b(`${outputValue} ${symbol}`)} {t(\"intoPool\")}\n          </div>\n          <LastSummaryText>\n            {t(\"youAreSettingExRate\")}{\" \"}\n            {b(\n              `1 ETH = ${amountFormatter(\n                getMarketRate(inputValueParsed, outputValueParsed, decimals),\n                18,\n                4,\n                false\n              )} ${symbol}`\n            )}\n            .\n          </LastSummaryText>\n          <LastSummaryText>\n            {t(\"youWillMint\")} {b(`${inputValue}`)} {t(\"liquidityTokens\")}\n          </LastSummaryText>\n          <LastSummaryText>{t(\"totalSupplyIs0\")}</LastSummaryText>\n        </div>\n      );\n    } else {\n      return (\n        <>\n          <div>\n            {t(\"youAreAdding\")}{\" \"}\n            {b(`${amountFormatter(inputValueParsed, 18, 4)} ETH`)} {t(\"and\")}{\" \"}\n            {\"at most\"}{\" \"}\n            {b(\n              `${amountFormatter(\n                outputValueMax,\n                decimals,\n                Math.min(decimals, 4)\n              )} ${symbol}`\n            )}{\" \"}\n            {t(\"intoPool\")}\n          </div>\n          <LastSummaryText>\n            {t(\"youWillMint\")} {b(amountFormatter(liquidityMinted, 18, 4))}{\" \"}\n            {t(\"liquidityTokens\")}\n          </LastSummaryText>\n          <LastSummaryText>\n            {t(\"totalSupplyIs\")} {b(amountFormatter(totalPoolTokens, 18, 4))}\n          </LastSummaryText>\n          <LastSummaryText>\n            {t(\"tokenWorth\")} {b(amountFormatter(ethPerLiquidityToken, 18, 4))}{\" \"}\n            ETH {t(\"and\")}{\" \"}\n            {b(\n              amountFormatter(\n                tokenPerLiquidityToken,\n                decimals,\n                Math.min(decimals, 4)\n              )\n            )}{\" \"}\n            {symbol}\n          </LastSummaryText>\n        </>\n      );\n    }\n  }\n\n  function renderSummary() {\n    let contextualInfo = \"\";\n    let isError = false;\n    if (brokenTokenWarning) {\n      contextualInfo = t(\"brokenToken\");\n      isError = true;\n    } else if (inputError || outputError) {\n      contextualInfo = inputError || outputError;\n      isError = true;\n    } else if (!inputCurrency || !outputCurrency) {\n      contextualInfo = t(\"selectTokenCont\");\n    } else if (!inputValue) {\n      contextualInfo = t(\"enterValueCont\");\n    } else if (!account) {\n      contextualInfo = t(\"noWallet\");\n      isError = true;\n    }\n\n    return (\n      <ContextualInfo\n        openDetailsText={t(\"transactionDetails\")}\n        closeDetailsText={t(\"hideDetails\")}\n        contextualInfo={contextualInfo}\n        isError={isError}\n        renderTransactionDetails={renderTransactionDetails}\n      />\n    );\n  }\n\n  const addTransaction = useTransactionAdder();\n\n  async function onAddLiquidity() {\n    // take ETH amount, multiplied by ETH rate and 2 for total tx size\n    let usdTransactionSize = ethPrice * (inputValueParsed / 1e18) * 2;\n\n    // log pool added to and total usd amount\n    ReactGA.event({\n      category: \"Transaction\",\n      action: \"Add Liquidity\",\n      label: outputCurrency,\n      value: usdTransactionSize\n    });\n\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n\n    const estimatedGasLimit = await exchangeContract.estimate.addLiquidity(\n      isNewExchange ? ethers.constants.Zero : liquidityTokensMin,\n      isNewExchange ? outputValueParsed : outputValueMax,\n      deadline,\n      {\n        value: inputValueParsed\n      }\n    );\n\n    const gasLimit = calculateGasMargin(estimatedGasLimit, GAS_MARGIN);\n\n    exchangeContract\n      .addLiquidity(\n        isNewExchange ? ethers.constants.Zero : liquidityTokensMin,\n        isNewExchange ? outputValueParsed : outputValueMax,\n        deadline,\n        {\n          value: inputValueParsed,\n          gasLimit\n        }\n      )\n      .then(response => {\n        addTransaction(response);\n      });\n  }\n\n  function formatBalance(value) {\n    return `Balance: ${value}`;\n  } // check for broken tokens\n\n  useEffect(() => {\n    setBrokenTokenWarning(false);\n    for (let i = 0; i < brokenTokens.length; i++) {\n      if (brokenTokens[i].toLowerCase() === outputCurrency.toLowerCase()) {\n        setBrokenTokenWarning(true);\n      }\n    }\n  }, [outputCurrency]);\n\n  useEffect(() => {\n    if (isNewExchange) {\n      if (inputValue) {\n        const parsedInputValue = ethers.utils.parseUnits(inputValue, 18);\n        setInputValueParsed(parsedInputValue);\n      }\n\n      if (outputValue) {\n        const parsedOutputValue = ethers.utils.parseUnits(\n          outputValue,\n          decimals\n        );\n        setOutputValueParsed(parsedOutputValue);\n      }\n    }\n  }, [decimals, inputValue, isNewExchange, outputValue]);\n\n  // parse input value\n  useEffect(() => {\n    if (\n      isNewExchange === false &&\n      inputValue &&\n      marketRate &&\n      lastEditedField === INPUT &&\n      (decimals || decimals === 0)\n    ) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(inputValue, 18);\n\n        if (\n          parsedValue.lte(ethers.constants.Zero) ||\n          parsedValue.gte(ethers.constants.MaxUint256)\n        ) {\n          throw Error();\n        }\n\n        setInputValueParsed(parsedValue);\n\n        const currencyAmount = marketRate\n          .mul(parsedValue)\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n          .div(\n            ethers.utils\n              .bigNumberify(10)\n              .pow(ethers.utils.bigNumberify(18 - decimals))\n          );\n\n        setOutputValueParsed(currencyAmount);\n        dispatchAddLiquidityState({\n          type: \"UPDATE_DEPENDENT_VALUE\",\n          payload: {\n            field: OUTPUT,\n            value: amountFormatter(\n              currencyAmount,\n              decimals,\n              Math.min(decimals, 4),\n              false\n            )\n          }\n        });\n\n        return () => {\n          setOutputError();\n          setInputValueParsed();\n          setOutputValueParsed();\n          dispatchAddLiquidityState({\n            type: \"UPDATE_DEPENDENT_VALUE\",\n            payload: { field: OUTPUT, value: \"\" }\n          });\n        };\n      } catch {\n        setOutputError(t(\"inputNotValid\"));\n      }\n    }\n  }, [inputValue, isNewExchange, lastEditedField, marketRate, decimals, t]);\n\n  // parse output value\n  useEffect(() => {\n    if (\n      isNewExchange === false &&\n      outputValue &&\n      marketRateInverted &&\n      lastEditedField === OUTPUT &&\n      (decimals || decimals === 0)\n    ) {\n      try {\n        const parsedValue = ethers.utils.parseUnits(outputValue, decimals);\n\n        if (\n          parsedValue.lte(ethers.constants.Zero) ||\n          parsedValue.gte(ethers.constants.MaxUint256)\n        ) {\n          throw Error();\n        }\n\n        setOutputValueParsed(parsedValue);\n\n        const currencyAmount = marketRateInverted\n          .mul(parsedValue)\n          .div(\n            ethers.utils\n              .bigNumberify(10)\n              .pow(ethers.utils.bigNumberify(decimals))\n          );\n\n        setInputValueParsed(currencyAmount);\n        dispatchAddLiquidityState({\n          type: \"UPDATE_DEPENDENT_VALUE\",\n          payload: {\n            field: INPUT,\n            value: amountFormatter(currencyAmount, 18, 4, false)\n          }\n        });\n\n        return () => {\n          setInputError();\n          setOutputValueParsed();\n          setInputValueParsed();\n          dispatchAddLiquidityState({\n            type: \"UPDATE_DEPENDENT_VALUE\",\n            payload: { field: INPUT, value: \"\" }\n          });\n        };\n      } catch {\n        setInputError(t(\"inputNotValid\"));\n      }\n    }\n  }, [\n    outputValue,\n    isNewExchange,\n    lastEditedField,\n    marketRateInverted,\n    decimals,\n    t\n  ]);\n\n  // input validation\n  useEffect(() => {\n    if (inputValueParsed && inputBalance) {\n      if (inputValueParsed.gt(inputBalance)) {\n        setInputError(t(\"insufficientBalance\"));\n      } else {\n        setInputError(null);\n      }\n    }\n\n    if (outputValueMax && outputBalance) {\n      if (outputValueMax.gt(outputBalance)) {\n        setOutputError(t(\"insufficientBalance\"));\n      } else {\n        setOutputError(null);\n      }\n    }\n  }, [inputValueParsed, inputBalance, outputValueMax, outputBalance, t]);\n\n  const allowance = useAddressAllowance(\n    account,\n    outputCurrency,\n    exchangeAddress\n  );\n\n  const [showUnlock, setShowUnlock] = useState(false);\n  useEffect(() => {\n    if (outputValueParsed && allowance) {\n      if (allowance.lt(outputValueParsed)) {\n        setOutputError(t(\"unlockTokenCont\"));\n        setShowUnlock(true);\n      }\n      return () => {\n        setOutputError();\n        setShowUnlock(false);\n      };\n    }\n  }, [outputValueParsed, allowance, t]);\n\n  const isActive = active && account;\n  const isValid =\n    (inputError === null || outputError === null) &&\n    !showUnlock &&\n    !brokenTokenWarning;\n\n  return (\n    <>\n      {isNewExchange ? (\n        <NewExchangeWarning>\n          <NewExchangeWarningText>\n            <span role=\"img\" aria-label=\"first-liquidity\">\n              🚰\n            </span>{\" \"}\n            {t(\"firstLiquidity\")}\n          </NewExchangeWarningText>\n          <NewExchangeWarningText>\n            {t(\"initialExchangeRate\", { symbol })}\n          </NewExchangeWarningText>\n        </NewExchangeWarning>\n      ) : null}\n\n      <CurrencyInputPanel\n        title={t(\"deposit\")}\n        extraText={\n          inputBalance && formatBalance(amountFormatter(inputBalance, 18, 4))\n        }\n        onValueChange={inputValue => {\n          dispatchAddLiquidityState({\n            type: \"UPDATE_VALUE\",\n            payload: { value: inputValue, field: INPUT }\n          });\n        }}\n        extraTextClickHander={() => {\n          if (inputBalance) {\n            const valueToSet = inputBalance.sub(ethers.utils.parseEther(\".1\"));\n            if (valueToSet.gt(ethers.constants.Zero)) {\n              dispatchAddLiquidityState({\n                type: \"UPDATE_VALUE\",\n                payload: {\n                  value: amountFormatter(valueToSet, 18, 18, false),\n                  field: INPUT\n                }\n              });\n            }\n          }\n        }}\n        selectedTokenAddress=\"ETH\"\n        value={inputValue}\n        errorMessage={inputError}\n        disableTokenSelect\n      />\n      <OversizedPanel>\n        <DownArrowBackground>\n          <ColoredWrappedPlus active={isActive} alt=\"plus\" />\n        </DownArrowBackground>\n      </OversizedPanel>\n      <CurrencyInputPanel\n        title={t(\"deposit\")}\n        description={\n          isNewExchange ? \"\" : outputValue ? `(${t(\"estimated\")})` : \"\"\n        }\n        extraText={\n          outputBalance &&\n          decimals &&\n          formatBalance(\n            amountFormatter(outputBalance, decimals, Math.min(decimals, 4))\n          )\n        }\n        selectedTokenAddress={outputCurrency}\n        onCurrencySelected={outputCurrency => {\n          dispatchAddLiquidityState({\n            type: \"SELECT_CURRENCY\",\n            payload: outputCurrency\n          });\n        }}\n        onValueChange={outputValue => {\n          dispatchAddLiquidityState({\n            type: \"UPDATE_VALUE\",\n            payload: { value: outputValue, field: OUTPUT }\n          });\n        }}\n        extraTextClickHander={() => {\n          if (outputBalance) {\n            dispatchAddLiquidityState({\n              type: \"UPDATE_VALUE\",\n              payload: {\n                value: amountFormatter(\n                  calculateMaxOutputVal(outputBalance),\n                  decimals,\n                  decimals,\n                  false\n                ),\n                field: OUTPUT\n              }\n            });\n          }\n        }}\n        value={outputValue}\n        showUnlock={showUnlock}\n        errorMessage={outputError}\n      />\n      <OversizedPanel hideBottom>\n        <SummaryPanel>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t(\"exchangeRate\")}</ExchangeRate>\n            <span>\n              {marketRate\n                ? `1 ETH = ${amountFormatter(marketRate, 18, 4)} ${symbol}`\n                : \" - \"}\n            </span>\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t(\"currentPoolSize\")}</ExchangeRate>\n            <span>\n              {exchangeETHBalance && exchangeTokenBalance\n                ? `${amountFormatter(\n                    exchangeETHBalance,\n                    18,\n                    4\n                  )} ETH + ${amountFormatter(\n                    exchangeTokenBalance,\n                    decimals,\n                    Math.min(4, decimals)\n                  )} ${symbol}`\n                : \" - \"}\n            </span>\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>\n              {t(\"yourPoolShare\")} (\n              {exchangeETHBalance &&\n                amountFormatter(poolTokenPercentage, 16, 2)}\n              %)\n            </ExchangeRate>\n            <span>\n              {ethShare && tokenShare\n                ? `${amountFormatter(ethShare, 18, 4)} ETH + ${amountFormatter(\n                    tokenShare,\n                    decimals,\n                    Math.min(4, decimals)\n                  )} ${symbol}`\n                : \" - \"}\n            </span>\n          </ExchangeRateWrapper>\n        </SummaryPanel>\n      </OversizedPanel>\n      {renderSummary()}\n      <Flex>\n        <Button disabled={!isValid} onClick={onAddLiquidity}>\n          {t(\"addLiquidity\")}\n        </Button>\n      </Flex>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}