{"ast":null,"code":"var ConnectorEvent;\n\n(function (ConnectorEvent) {\n  ConnectorEvent[\"Update\"] = \"Web3ReactUpdate\";\n  ConnectorEvent[\"Error\"] = \"Web3ReactError\";\n  ConnectorEvent[\"Deactivate\"] = \"Web3ReactDeactivate\";\n})(ConnectorEvent || (ConnectorEvent = {}));\n\nexport { ConnectorEvent };","map":{"version":3,"sources":["../src/index.ts"],"names":["ConnectorEvent"],"mappings":"IAYA,c;;AAAA,CAAA,UAAYA,cAAZ,EAAYA;AACVA,EAAAA,cAAAA,CAAAA,QAAAA,CAAAA,GAAAA,iBAAAA;AACAA,EAAAA,cAAAA,CAAAA,OAAAA,CAAAA,GAAAA,gBAAAA;AACAA,EAAAA,cAAAA,CAAAA,YAAAA,CAAAA,GAAAA,qBAAAA;AAHF,CAAA,EAAYA,cAAc,KAAdA,cAAc,GAA1B,EAA0B,CAA1B","sourcesContent":["import { EventEmitter } from 'events'\n\nexport interface AbstractConnectorArguments {\n  supportedChainIds?: number[]\n}\n\nexport interface ConnectorUpdate<T = number | string> {\n  provider?: any\n  chainId?: T\n  account?: null | string\n}\n\nexport enum ConnectorEvent {\n  Update = 'Web3ReactUpdate',\n  Error = 'Web3ReactError',\n  Deactivate = 'Web3ReactDeactivate'\n}\n\nexport interface AbstractConnectorInterface extends EventEmitter {\n  readonly supportedChainIds?: number[]\n\n  activate: () => Promise<ConnectorUpdate>\n  getProvider: () => Promise<any>\n  getChainId: () => Promise<number | string>\n  getAccount: () => Promise<null | string>\n  deactivate: () => void\n}\n"]},"metadata":{},"sourceType":"module"}