{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/components/Modal/index.js\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { animated, useTransition, useSpring } from \"react-spring\";\nimport { Spring } from \"react-spring/renderprops\";\nimport { DialogOverlay, DialogContent } from \"@reach/dialog\";\nimport { isMobile } from \"react-device-detect\";\nimport \"@reach/dialog/styles.css\";\nimport { transparentize } from \"polished\";\nimport { useGesture } from \"react-use-gesture\";\nconst AnimatedDialogOverlay = animated(DialogOverlay);\n\nconst WrappedDialogOverlay = ({\n  suppressClassNameWarning,\n  mobile,\n  ...rest\n}) => React.createElement(AnimatedDialogOverlay, Object.assign({}, rest, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}));\n\nconst StyledDialogOverlay = styled(WrappedDialogOverlay).attrs({\n  suppressClassNameWarning: true\n})`\n  &[data-reach-dialog-overlay] {\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: ${({\n  theme\n}) => \"transparent\"};\n\n    ${({\n  mobile\n}) => mobile && css`\n        align-items: flex-end;\n      `}\n\n    &::after {\n      content: \"\";\n      background-color: ${({\n  theme\n}) => theme.modalBackground};\n      opacity: 0.5;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      /* position: absolute; */\n      position: fixed;\n      z-index: -1;\n    }\n  }\n`;\n\nconst FilteredDialogContent = ({\n  minHeight,\n  maxHeight,\n  isOpen,\n  slideInAnimation,\n  mobile,\n  ...rest\n}) => React.createElement(DialogContent, Object.assign({}, rest, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}));\n\nconst StyledDialogContent = styled(FilteredDialogContent)`\n  &[data-reach-dialog-content] {\n    margin: 0 0 2rem 0;\n    border: 1px solid ${({\n  theme\n}) => theme.concreteGray};\n    background-color: ${({\n  theme\n}) => theme.inputBackground};\n    box-shadow: 0 4px 8px 0\n      ${({\n  theme\n}) => transparentize(0.95, theme.shadowColor)};\n    padding: 0px;\n    width: 50vw;\n\n    max-width: 650px;\n    ${({\n  maxHeight\n}) => maxHeight && css`\n        max-height: ${maxHeight}vh;\n      `}\n    ${({\n  minHeight\n}) => minHeight && css`\n        min-height: ${minHeight}vh;\n      `}\n    display: flex;\n    overflow: hidden;\n    border-radius: 10px;\n    ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n      width: 65vw;\n      max-height: 65vh;\n      margin: 0;\n    `}\n    ${({\n  theme,\n  mobile,\n  isOpen\n}) => theme.mediaWidth.upToSmall`\n      width:  85vw;\n      max-height: 66vh;\n      ${mobile && css`\n          width: 100vw;\n          border-radius: 20px;\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        `}\n    `}\n  }\n`;\nconst HiddenCloseButton = styled.button`\n  margin: 0;\n  padding: 0;\n  width: 0;\n  height: 0;\n  border: none;\n`;\nexport default function Modal({\n  isOpen,\n  onDismiss,\n  minHeight = false,\n  maxHeight = 50,\n  initialFocusRef,\n  children\n}) {\n  const transitions = useTransition(isOpen, null, {\n    config: {\n      duration: 200\n    },\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    }\n  });\n  const [{\n    xy\n  }, set] = useSpring(() => ({\n    xy: [0, 0]\n  }));\n  const bind = useGesture({\n    onDrag: state => {\n      let velocity = state.velocity;\n\n      if (velocity < 1) {\n        velocity = 1;\n      }\n\n      if (velocity > 8) {\n        velocity = 8;\n      }\n\n      set({\n        xy: state.down ? state.movement : [0, 0],\n        config: {\n          mass: 1,\n          tension: 210,\n          friction: 20\n        }\n      });\n\n      if (velocity > 3 && state.direction[1] > 0) {\n        onDismiss();\n      }\n    }\n  });\n\n  if (isMobile) {\n    return transitions.map(({\n      item,\n      key,\n      props\n    }) => item && React.createElement(StyledDialogOverlay, {\n      key: key,\n      style: props,\n      onDismiss: onDismiss,\n      initialFocusRef: initialFocusRef,\n      mobile: isMobile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Spring // animation for entrance and exit\n    , {\n      from: {\n        transform: isOpen ? \"translateY(200px)\" : \"translateY(100px)\"\n      },\n      to: {\n        transform: isOpen ? \"translateY(0px)\" : \"translateY(200px)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, props => React.createElement(animated.div, Object.assign({}, bind(), {\n      style: {\n        transform: xy.interpolate((x, y) => `translate3d(${0}px,${y > 0 ? y : 0}px,0)`)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(StyledDialogContent, {\n      style: props,\n      hidden: true,\n      minHeight: minHeight,\n      maxHeight: maxHeight,\n      mobile: isMobile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(HiddenCloseButton, {\n      onClick: onDismiss,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), children)))));\n  } else {\n    return transitions.map(({\n      item,\n      key,\n      props\n    }) => item && React.createElement(StyledDialogOverlay, {\n      key: key,\n      style: props,\n      onDismiss: onDismiss,\n      initialFocusRef: initialFocusRef,\n      mobile: isMobile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(StyledDialogContent, {\n      hidden: true,\n      minHeight: minHeight,\n      maxHeight: maxHeight,\n      isOpen: isOpen,\n      mobile: isMobile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(HiddenCloseButton, {\n      onClick: onDismiss,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), children)));\n  }\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/components/Modal/index.js"],"names":["React","styled","css","animated","useTransition","useSpring","Spring","DialogOverlay","DialogContent","isMobile","transparentize","useGesture","AnimatedDialogOverlay","WrappedDialogOverlay","suppressClassNameWarning","mobile","rest","StyledDialogOverlay","attrs","theme","modalBackground","FilteredDialogContent","minHeight","maxHeight","isOpen","slideInAnimation","StyledDialogContent","concreteGray","inputBackground","shadowColor","mediaWidth","upToMedium","upToSmall","HiddenCloseButton","button","Modal","onDismiss","initialFocusRef","children","transitions","config","duration","from","opacity","enter","leave","xy","set","bind","onDrag","state","velocity","down","movement","mass","tension","friction","direction","map","item","key","props","transform","interpolate","x","y"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { animated, useTransition, useSpring } from \"react-spring\";\nimport { Spring } from \"react-spring/renderprops\";\n\nimport { DialogOverlay, DialogContent } from \"@reach/dialog\";\nimport { isMobile } from \"react-device-detect\";\nimport \"@reach/dialog/styles.css\";\nimport { transparentize } from \"polished\";\nimport { useGesture } from \"react-use-gesture\";\n\nconst AnimatedDialogOverlay = animated(DialogOverlay);\nconst WrappedDialogOverlay = ({\n  suppressClassNameWarning,\n  mobile,\n  ...rest\n}) => <AnimatedDialogOverlay {...rest} />;\nconst StyledDialogOverlay = styled(WrappedDialogOverlay).attrs({\n  suppressClassNameWarning: true\n})`\n  &[data-reach-dialog-overlay] {\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: ${({ theme }) => \"transparent\"};\n\n    ${({ mobile }) =>\n      mobile &&\n      css`\n        align-items: flex-end;\n      `}\n\n    &::after {\n      content: \"\";\n      background-color: ${({ theme }) => theme.modalBackground};\n      opacity: 0.5;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      /* position: absolute; */\n      position: fixed;\n      z-index: -1;\n    }\n  }\n`;\n\nconst FilteredDialogContent = ({\n  minHeight,\n  maxHeight,\n  isOpen,\n  slideInAnimation,\n  mobile,\n  ...rest\n}) => <DialogContent {...rest} />;\nconst StyledDialogContent = styled(FilteredDialogContent)`\n  &[data-reach-dialog-content] {\n    margin: 0 0 2rem 0;\n    border: 1px solid ${({ theme }) => theme.concreteGray};\n    background-color: ${({ theme }) => theme.inputBackground};\n    box-shadow: 0 4px 8px 0\n      ${({ theme }) => transparentize(0.95, theme.shadowColor)};\n    padding: 0px;\n    width: 50vw;\n\n    max-width: 650px;\n    ${({ maxHeight }) =>\n      maxHeight &&\n      css`\n        max-height: ${maxHeight}vh;\n      `}\n    ${({ minHeight }) =>\n      minHeight &&\n      css`\n        min-height: ${minHeight}vh;\n      `}\n    display: flex;\n    overflow: hidden;\n    border-radius: 10px;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      width: 65vw;\n      max-height: 65vh;\n      margin: 0;\n    `}\n    ${({ theme, mobile, isOpen }) => theme.mediaWidth.upToSmall`\n      width:  85vw;\n      max-height: 66vh;\n      ${mobile &&\n        css`\n          width: 100vw;\n          border-radius: 20px;\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        `}\n    `}\n  }\n`;\n\nconst HiddenCloseButton = styled.button`\n  margin: 0;\n  padding: 0;\n  width: 0;\n  height: 0;\n  border: none;\n`;\n\nexport default function Modal({\n  isOpen,\n  onDismiss,\n  minHeight = false,\n  maxHeight = 50,\n  initialFocusRef,\n  children\n}) {\n  const transitions = useTransition(isOpen, null, {\n    config: { duration: 200 },\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 }\n  });\n\n  const [{ xy }, set] = useSpring(() => ({ xy: [0, 0] }));\n  const bind = useGesture({\n    onDrag: state => {\n      let velocity = state.velocity;\n      if (velocity < 1) {\n        velocity = 1;\n      }\n      if (velocity > 8) {\n        velocity = 8;\n      }\n      set({\n        xy: state.down ? state.movement : [0, 0],\n        config: { mass: 1, tension: 210, friction: 20 }\n      });\n      if (velocity > 3 && state.direction[1] > 0) {\n        onDismiss();\n      }\n    }\n  });\n\n  if (isMobile) {\n    return transitions.map(\n      ({ item, key, props }) =>\n        item && (\n          <StyledDialogOverlay\n            key={key}\n            style={props}\n            onDismiss={onDismiss}\n            initialFocusRef={initialFocusRef}\n            mobile={isMobile}\n          >\n            <Spring // animation for entrance and exit\n              from={{\n                transform: isOpen ? \"translateY(200px)\" : \"translateY(100px)\"\n              }}\n              to={{\n                transform: isOpen ? \"translateY(0px)\" : \"translateY(200px)\"\n              }}\n            >\n              {props => (\n                <animated.div\n                  {...bind()}\n                  style={{\n                    transform: xy.interpolate(\n                      (x, y) => `translate3d(${0}px,${y > 0 ? y : 0}px,0)`\n                    )\n                  }}\n                >\n                  <StyledDialogContent\n                    style={props}\n                    hidden={true}\n                    minHeight={minHeight}\n                    maxHeight={maxHeight}\n                    mobile={isMobile}\n                  >\n                    <HiddenCloseButton onClick={onDismiss} />\n                    {children}\n                  </StyledDialogContent>\n                </animated.div>\n              )}\n            </Spring>\n          </StyledDialogOverlay>\n        )\n    );\n  } else {\n    return transitions.map(\n      ({ item, key, props }) =>\n        item && (\n          <StyledDialogOverlay\n            key={key}\n            style={props}\n            onDismiss={onDismiss}\n            initialFocusRef={initialFocusRef}\n            mobile={isMobile}\n          >\n            <StyledDialogContent\n              hidden={true}\n              minHeight={minHeight}\n              maxHeight={maxHeight}\n              isOpen={isOpen}\n              mobile={isMobile}\n            >\n              <HiddenCloseButton onClick={onDismiss} />\n              {children}\n            </StyledDialogContent>\n          </StyledDialogOverlay>\n        )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}