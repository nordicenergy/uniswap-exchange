{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai'\n};\n\nvar PortisConnector =\n/*#__PURE__*/\nfunction (_AbstractConnector) {\n  _inheritsLoose(PortisConnector, _AbstractConnector);\n\n  function PortisConnector(_ref) {\n    var _this;\n\n    var dAppId = _ref.dAppId,\n        networks = _ref.networks,\n        _ref$config = _ref.config,\n        config = _ref$config === void 0 ? {} : _ref$config;\n    var chainIds = networks.map(function (n) {\n      return typeof n === 'number' ? n : Number(n.chainId);\n    });\n    !chainIds.every(function (c) {\n      return !!chainIdToNetwork[c];\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"One or more unsupported networks \" + networks) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: chainIds\n    }) || this;\n    _this.dAppId = dAppId;\n    _this.networks = networks;\n    _this.config = config;\n    _this.handleOnLogout = _this.handleOnLogout.bind(_assertThisInitialized(_this));\n    _this.handleOnActiveWalletChanged = _this.handleOnActiveWalletChanged.bind(_assertThisInitialized(_this));\n    _this.handleOnError = _this.handleOnError.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = PortisConnector.prototype;\n\n  _proto.handleOnLogout = function handleOnLogout() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'onLogout' event\");\n    }\n\n    this.emitDeactivate();\n  };\n\n  _proto.handleOnActiveWalletChanged = function handleOnActiveWalletChanged(account) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account);\n    }\n\n    this.emitUpdate({\n      account: account\n    });\n  };\n\n  _proto.handleOnError = function handleOnError(error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'onError' event\");\n    }\n\n    this.emitError(error);\n  };\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        _this3.portis.onLogout(_this3.handleOnLogout);\n\n        _this3.portis.onActiveWalletChanged(_this3.handleOnActiveWalletChanged);\n\n        _this3.portis.onError(_this3.handleOnError);\n\n        return Promise.resolve(_this3.portis.provider.enable().then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.portis.provider,\n            account: account\n          };\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.portis) {\n          return Promise.resolve(import('@portis/web3')).then(function (_ref2) {\n            var Portis = _ref2[\"default\"];\n            _this3.portis = new Portis(_this3.dAppId, typeof _this3.networks[0] === 'number' ? chainIdToNetwork[_this3.networks[0]] : _this3.networks[0], _this3.config);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.portis.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.portis.provider.send('eth_chainId'));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.portis.provider.send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.portis.onLogout(function () {});\n    this.portis.onActiveWalletChanged(function () {});\n    this.portis.onError(function () {});\n  };\n\n  _proto.changeNetwork = function changeNetwork(newNetwork, isGasRelayEnabled) {\n    try {\n      var _this11 = this;\n\n      if (typeof newNetwork === 'number') {\n        !!!chainIdToNetwork[newNetwork] ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Invalid chainId \" + newNetwork) : invariant(false) : void 0;\n\n        _this11.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled);\n\n        _this11.emitUpdate({\n          chainId: newNetwork\n        });\n      } else {\n        _this11.portis.changeNetwork(newNetwork, isGasRelayEnabled);\n\n        _this11.emitUpdate({\n          chainId: Number(newNetwork.chainId)\n        });\n      }\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this13 = this;\n\n      return Promise.resolve(_this13.portis.logout()).then(function () {\n        _this13.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return PortisConnector;\n}(AbstractConnector);\n\nexport { PortisConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["chainIdToNetwork","PortisConnector","dAppId","networks","config","chainIds","Number","n","supportedChainIds","handleOnLogout","console","handleOnActiveWalletChanged","account","handleOnError","portis","Portis","accounts","provider","deactivate","chainId","newNetwork"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const { default: Portis } = await import('@portis/web3')\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}