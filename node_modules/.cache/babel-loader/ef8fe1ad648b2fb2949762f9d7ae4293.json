{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n\nvar private_key_wallet_1 = require(\"./private_key_wallet\");\n/*\n * This class implements the web3-provider-engine subprovider interface and forwards\n * requests involving user accounts and signing operations to eth-lightwallet\n *\n * Source: https://github.com/MetaMask/provider-engine/blob/master/subproviders/subprovider.js\n */\n\n\nvar EthLightwalletSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(EthLightwalletSubprovider, _super);\n  /**\n   * Instantiate an EthLightwalletSubprovider\n   * @param keystore The EthLightWallet keystore you wish to use\n   * @param pwDerivedKey The password derived key to use\n   * @return EthLightwalletSubprovider instance\n   */\n\n\n  function EthLightwalletSubprovider(keystore, pwDerivedKey) {\n    var _this = _super.call(this) || this;\n\n    _this._keystore = keystore;\n    _this._pwDerivedKey = pwDerivedKey;\n    return _this;\n  }\n  /**\n   * Retrieve the accounts associated with the eth-lightwallet instance.\n   * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n   * via your providerEngine instance.\n   *\n   * @return An array of accounts\n   */\n\n\n  EthLightwalletSubprovider.prototype.getAccountsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        accounts = this._keystore.getAddresses();\n        return [2\n        /*return*/\n        , accounts];\n      });\n    });\n  };\n  /**\n   * Signs a transaction with the account specificed by the `from` field in txParams.\n   * If you've added this Subprovider to your app's provider, you can simply send\n   * an `eth_sendTransaction` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  EthLightwalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKey, privateKeyWallet, privateKeySignature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            privateKey = this._keystore.exportPrivateKey(txParams.from, this._pwDerivedKey);\n            privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKey);\n            privateKey = '';\n            return [4\n            /*yield*/\n            , privateKeyWallet.signTransactionAsync(txParams)];\n\n          case 1:\n            privateKeySignature = _a.sent();\n            return [2\n            /*return*/\n            , privateKeySignature];\n        }\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing account will be the account\n   * associated with the provided address.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n   * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  EthLightwalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKey, privateKeyWallet, result;\n      return __generator(this, function (_a) {\n        privateKey = this._keystore.exportPrivateKey(address, this._pwDerivedKey);\n        privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKey);\n        privateKey = '';\n        result = privateKeyWallet.signPersonalMessageAsync(data, address);\n        return [2\n        /*return*/\n        , result];\n      });\n    });\n  };\n  /**\n   * Sign an EIP712 Typed Data message. The signing address will associated with the provided address.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n   * JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  EthLightwalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKey, privateKeyWallet, result;\n      return __generator(this, function (_a) {\n        privateKey = this._keystore.exportPrivateKey(address, this._pwDerivedKey);\n        privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKey);\n        privateKey = '';\n        result = privateKeyWallet.signTypedDataAsync(address, typedData);\n        return [2\n        /*return*/\n        , result];\n      });\n    });\n  };\n\n  return EthLightwalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.EthLightwalletSubprovider = EthLightwalletSubprovider;","map":{"version":3,"sources":["../../../src/subproviders/eth_lightwallet_subprovider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAA,yBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAEA;;;;;;;;AAMA,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;AAG3C;;;;;;;;AAMA,WAAA,yBAAA,CAAY,QAAZ,EAA4C,YAA5C,EAAoE;AAApE,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAEI,IAAA,KAAI,CAAC,SAAL,GAAiB,QAAjB;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,YAArB;;AACH;AACD;;;;;;;;;AAOa,EAAA,yBAAA,CAAA,SAAA,CAAA,gBAAA,GAAb,YAAA;;;;AACU,QAAA,QAAQ,GAAG,KAAK,SAAL,CAAe,YAAf,EAAX;AACN,eAAA,CAAA;AAAA;AAAA,UAAO,QAAP,CAAA;;;AACH,GAHY;AAIb;;;;;;;;;;AAQa,EAAA,yBAAA,CAAA,SAAA,CAAA,oBAAA,GAAb,UAAkC,QAAlC,EAA2D;;;;;;AAInD,YAAA,UAAU,GAAG,KAAK,SAAL,CAAe,gBAAf,CAAgC,QAAQ,CAAC,IAAzC,EAA+C,KAAK,aAApD,CAAb;AACE,YAAA,gBAAgB,GAAG,IAAI,oBAAA,CAAA,2BAAJ,CAAgC,UAAhC,CAAnB;AACN,YAAA,UAAU,GAAG,EAAb;AAC4B,mBAAA,CAAA;AAAA;AAAA,cAAM,gBAAgB,CAAC,oBAAjB,CAAsC,QAAtC,CAAN,CAAA;;;AAAtB,YAAA,mBAAmB,GAAG,EAAA,CAAA,IAAA,EAAtB;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,mBAAP,CAAA;;;;AACH,GATY;AAUb;;;;;;;;;;;;AAUa,EAAA,yBAAA,CAAA,SAAA,CAAA,wBAAA,GAAb,UAAsC,IAAtC,EAAoD,OAApD,EAAmE;;;;AAC3D,QAAA,UAAU,GAAG,KAAK,SAAL,CAAe,gBAAf,CAAgC,OAAhC,EAAyC,KAAK,aAA9C,CAAb;AACE,QAAA,gBAAgB,GAAG,IAAI,oBAAA,CAAA,2BAAJ,CAAgC,UAAhC,CAAnB;AACN,QAAA,UAAU,GAAG,EAAb;AACM,QAAA,MAAM,GAAG,gBAAgB,CAAC,wBAAjB,CAA0C,IAA1C,EAAgD,OAAhD,CAAT;AACN,eAAA,CAAA;AAAA;AAAA,UAAO,MAAP,CAAA;;;AACH,GANY;AAOb;;;;;;;;;;;AASa,EAAA,yBAAA,CAAA,SAAA,CAAA,kBAAA,GAAb,UAAgC,OAAhC,EAAiD,SAAjD,EAA2E;;;;AACnE,QAAA,UAAU,GAAG,KAAK,SAAL,CAAe,gBAAf,CAAgC,OAAhC,EAAyC,KAAK,aAA9C,CAAb;AACE,QAAA,gBAAgB,GAAG,IAAI,oBAAA,CAAA,2BAAJ,CAAgC,UAAhC,CAAnB;AACN,QAAA,UAAU,GAAG,EAAb;AACM,QAAA,MAAM,GAAG,gBAAgB,CAAC,kBAAjB,CAAoC,OAApC,EAA6C,SAA7C,CAAT;AACN,eAAA,CAAA;AAAA;AAAA,UAAO,MAAP,CAAA;;;AACH,GANY;;AAOjB,SAAA,yBAAA;AAAC,CA5ED,CAA+C,yBAAA,CAAA,qBAA/C,CAAA;;AAAa,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\nvar private_key_wallet_1 = require(\"./private_key_wallet\");\n/*\n * This class implements the web3-provider-engine subprovider interface and forwards\n * requests involving user accounts and signing operations to eth-lightwallet\n *\n * Source: https://github.com/MetaMask/provider-engine/blob/master/subproviders/subprovider.js\n */\nvar EthLightwalletSubprovider = /** @class */ (function (_super) {\n    __extends(EthLightwalletSubprovider, _super);\n    /**\n     * Instantiate an EthLightwalletSubprovider\n     * @param keystore The EthLightWallet keystore you wish to use\n     * @param pwDerivedKey The password derived key to use\n     * @return EthLightwalletSubprovider instance\n     */\n    function EthLightwalletSubprovider(keystore, pwDerivedKey) {\n        var _this = _super.call(this) || this;\n        _this._keystore = keystore;\n        _this._pwDerivedKey = pwDerivedKey;\n        return _this;\n    }\n    /**\n     * Retrieve the accounts associated with the eth-lightwallet instance.\n     * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n     * via your providerEngine instance.\n     *\n     * @return An array of accounts\n     */\n    EthLightwalletSubprovider.prototype.getAccountsAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts;\n            return __generator(this, function (_a) {\n                accounts = this._keystore.getAddresses();\n                return [2 /*return*/, accounts];\n            });\n        });\n    };\n    /**\n     * Signs a transaction with the account specificed by the `from` field in txParams.\n     * If you've added this Subprovider to your app's provider, you can simply send\n     * an `eth_sendTransaction` JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param txParams Parameters of the transaction to sign\n     * @return Signed transaction hex string\n     */\n    EthLightwalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var privateKey, privateKeyWallet, privateKeySignature;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        privateKey = this._keystore.exportPrivateKey(txParams.from, this._pwDerivedKey);\n                        privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKey);\n                        privateKey = '';\n                        return [4 /*yield*/, privateKeyWallet.signTransactionAsync(txParams)];\n                    case 1:\n                        privateKeySignature = _a.sent();\n                        return [2 /*return*/, privateKeySignature];\n                }\n            });\n        });\n    };\n    /**\n     * Sign a personal Ethereum signed message. The signing account will be the account\n     * associated with the provided address.\n     * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n     * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param data Hex string message to sign\n     * @param address Address of the account to sign with\n     * @return Signature hex string (order: rsv)\n     */\n    EthLightwalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var privateKey, privateKeyWallet, result;\n            return __generator(this, function (_a) {\n                privateKey = this._keystore.exportPrivateKey(address, this._pwDerivedKey);\n                privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKey);\n                privateKey = '';\n                result = privateKeyWallet.signPersonalMessageAsync(data, address);\n                return [2 /*return*/, result];\n            });\n        });\n    };\n    /**\n     * Sign an EIP712 Typed Data message. The signing address will associated with the provided address.\n     * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n     * JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param address Address of the account to sign with\n     * @param data the typed data object\n     * @return Signature hex string (order: rsv)\n     */\n    EthLightwalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var privateKey, privateKeyWallet, result;\n            return __generator(this, function (_a) {\n                privateKey = this._keystore.exportPrivateKey(address, this._pwDerivedKey);\n                privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKey);\n                privateKey = '';\n                result = privateKeyWallet.signTypedDataAsync(address, typedData);\n                return [2 /*return*/, result];\n            });\n        });\n    };\n    return EthLightwalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider));\nexports.EthLightwalletSubprovider = EthLightwalletSubprovider;\n//# sourceMappingURL=eth_lightwallet_subprovider.js.map"]},"metadata":{},"sourceType":"script"}