{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/components/TokenLogo/index.js\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { isAddress } from \"../../utils\";\nimport { ReactComponent as EthereumLogo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/ethereum-logo.svg\";\n\nconst TOKEN_ICON_API = address => `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${isAddress(address)}/logo.png`;\n\nconst BAD_IMAGES = {};\nconst Image = styled.img`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n  background-color: white;\n  border-radius: 1rem;\n`;\nconst Emoji = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n`;\nconst StyledEthereumLogo = styled(EthereumLogo)`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n`;\nexport default function TokenLogo({\n  address,\n  size = \"1rem\",\n  ...rest\n}) {\n  const [error, setError] = useState(false);\n  let path = \"\";\n\n  if (address === \"ETH\") {\n    return React.createElement(StyledEthereumLogo, {\n      size: size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  } else if (!error && !BAD_IMAGES[address]) {\n    path = TOKEN_ICON_API(address.toLowerCase());\n  } else {\n    return React.createElement(Emoji, Object.assign({}, rest, {\n      size: size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"Thinking\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"\\uD83E\\uDD14\"));\n  }\n\n  return React.createElement(Image, Object.assign({}, rest, {\n    alt: address,\n    src: path,\n    size: size,\n    onError: () => {\n      BAD_IMAGES[address] = true;\n      setError(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/components/TokenLogo/index.js"],"names":["React","useState","styled","isAddress","TOKEN_ICON_API","address","BAD_IMAGES","Image","img","size","Emoji","span","StyledEthereumLogo","EthereumLogo","TokenLogo","rest","error","setError","path","toLowerCase"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;;;AAIA,MAAMC,cAAc,GAAGC,OAAO,IAC3B,2FAA0FF,SAAS,CAClGE,OADkG,CAElG,WAHJ;;AAIA,MAAMC,UAAU,GAAG,EAAnB;AAEA,MAAMC,KAAK,GAAGL,MAAM,CAACM,GAAI;WACd,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAcA,IAAK;YAClB,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;;;CAF/B;AAOA,MAAMC,KAAK,GAAGR,MAAM,CAACS,IAAK;;;;WAIf,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAcA,IAAK;YAClB,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;CAL/B;AAQA,MAAMG,kBAAkB,GAAGV,MAAM,CAACW,YAAD,CAAe;WACrC,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAcA,IAAK;YAClB,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;CAF/B;AAKA,eAAe,SAASK,SAAT,CAAmB;AAAET,EAAAA,OAAF;AAAWI,EAAAA,IAAI,GAAG,MAAlB;AAA0B,KAAGM;AAA7B,CAAnB,EAAwD;AACrE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC;AAEA,MAAIiB,IAAI,GAAG,EAAX;;AACA,MAAIb,OAAO,KAAK,KAAhB,EAAuB;AACrB,WAAO,oBAAC,kBAAD;AAAoB,MAAA,IAAI,EAAEI,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO,IAAI,CAACO,KAAD,IAAU,CAACV,UAAU,CAACD,OAAD,CAAzB,EAAoC;AACzCa,IAAAA,IAAI,GAAGd,cAAc,CAACC,OAAO,CAACc,WAAR,EAAD,CAArB;AACD,GAFM,MAEA;AACL,WACE,oBAAC,KAAD,oBAAWJ,IAAX;AAAiB,MAAA,IAAI,EAAEN,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE;AAAM,MAAA,IAAI,EAAC,KAAX;AAAiB,oBAAW,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF;AAOD;;AAED,SACE,oBAAC,KAAD,oBACMM,IADN;AAEE,IAAA,GAAG,EAAEV,OAFP;AAGE,IAAA,GAAG,EAAEa,IAHP;AAIE,IAAA,IAAI,EAAET,IAJR;AAKE,IAAA,OAAO,EAAE,MAAM;AACbH,MAAAA,UAAU,CAACD,OAAD,CAAV,GAAsB,IAAtB;AACAY,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAYD","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { isAddress } from \"../../utils\";\n\nimport { ReactComponent as EthereumLogo } from \"../../assets/images/ethereum-logo.svg\";\n\nconst TOKEN_ICON_API = address =>\n  `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${isAddress(\n    address\n  )}/logo.png`;\nconst BAD_IMAGES = {};\n\nconst Image = styled.img`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background-color: white;\n  border-radius: 1rem;\n`;\n\nconst Emoji = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`;\n\nconst StyledEthereumLogo = styled(EthereumLogo)`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`;\n\nexport default function TokenLogo({ address, size = \"1rem\", ...rest }) {\n  const [error, setError] = useState(false);\n\n  let path = \"\";\n  if (address === \"ETH\") {\n    return <StyledEthereumLogo size={size} />;\n  } else if (!error && !BAD_IMAGES[address]) {\n    path = TOKEN_ICON_API(address.toLowerCase());\n  } else {\n    return (\n      <Emoji {...rest} size={size}>\n        <span role=\"img\" aria-label=\"Thinking\">\n          ðŸ¤”\n        </span>\n      </Emoji>\n    );\n  }\n\n  return (\n    <Image\n      {...rest}\n      alt={address}\n      src={path}\n      size={size}\n      onError={() => {\n        BAD_IMAGES[address] = true;\n        setError(true);\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}