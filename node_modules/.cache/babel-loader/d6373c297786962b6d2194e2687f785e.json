{"ast":null,"code":"var assert = require('assert');\n\nvar crypto = require('crypto');\n\nvar cs = require('coinstring');\n\nvar secp256k1 = require('secp256k1');\n\nvar MASTER_SECRET = new Buffer('Bitcoin seed');\nvar HARDENED_OFFSET = 0x80000000;\nvar LEN = 78; // Bitcoin hardcoded by default, can use package `coininfo` for others\n\nvar BITCOIN_VERSIONS = {\n  private: 0x0488ADE4,\n  public: 0x0488B21E\n};\n\nfunction HDKey(versions) {\n  this.versions = versions || BITCOIN_VERSIONS;\n  this.depth = 0;\n  this.index = 0;\n  this._privateKey = null;\n  this._publicKey = null;\n  this.chainCode = null;\n  this._fingerprint = 0;\n  this.parentFingerprint = 0;\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', {\n  get: function get() {\n    return this._fingerprint;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'identifier', {\n  get: function get() {\n    return this._identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', {\n  get: function get() {\n    return this.identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function get() {\n    return this._privateKey;\n  },\n  set: function set(value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.');\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key');\n    this._privateKey = value;\n    this._publicKey = secp256k1.publicKeyCreate(value, true);\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function get() {\n    return this._publicKey;\n  },\n  set: function set(value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key');\n    this._publicKey = secp256k1.publicKeyConvert(value, true); // force compressed point\n\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n    this._privateKey = null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function get() {\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([new Buffer([0]), this.privateKey])));else return null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function get() {\n    return cs.encode(serialize(this, this.versions.public, this.publicKey));\n  }\n});\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this;\n  }\n\n  var entries = path.split('/');\n  var hdkey = this;\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(c, 'm', 'Invalid path');\n      return;\n    }\n\n    var hardened = c.length > 1 && c[c.length - 1] === \"'\";\n    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)\n\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index');\n    if (hardened) childIndex += HARDENED_OFFSET;\n    hdkey = hdkey.deriveChild(childIndex);\n  });\n  return hdkey;\n};\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET;\n  var indexBuffer = new Buffer(4);\n  indexBuffer.writeUInt32BE(index, 0);\n  var data;\n\n  if (isHardened) {\n    // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key');\n    var pk = this.privateKey;\n    var zb = new Buffer([0]);\n    pk = Buffer.concat([zb, pk]); // data = 0x00 || ser256(kpar) || ser32(index)\n\n    data = Buffer.concat([pk, indexBuffer]);\n  } else {\n    // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer]);\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hd = new HDKey(this.versions); // Private parent key -> private child key\n\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL); // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.derive(index + 1);\n    } // Public parent key -> public child key\n\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true); // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.derive(index + 1, isHardened);\n    }\n  }\n\n  hd.chainCode = IR;\n  hd.depth = this.depth + 1;\n  hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)\n\n  hd.index = index;\n  return hd;\n};\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  };\n};\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hdkey = new HDKey(versions);\n  hdkey.chainCode = IR;\n  hdkey.privateKey = IL;\n  return hdkey;\n};\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS;\n  var hdkey = new HDKey(versions);\n  var keyBuffer = cs.decode(base58key);\n  var version = keyBuffer.readUInt32BE(0);\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');\n  hdkey.depth = keyBuffer.readUInt8(4);\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);\n  hdkey.index = keyBuffer.readUInt32BE(9);\n  hdkey.chainCode = keyBuffer.slice(13, 45);\n  var key = keyBuffer.slice(45);\n\n  if (key.readUInt8(0) === 0) {\n    // private\n    assert(version === versions.private, 'Version mismatch: version does not match private');\n    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public');\n    hdkey.publicKey = key;\n  }\n\n  return hdkey;\n};\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv);\n};\n\nfunction serialize(hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = new Buffer(LEN);\n  buffer.writeUInt32BE(version, 0);\n  buffer.writeUInt8(hdkey.depth, 4);\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;\n  buffer.writeUInt32BE(fingerprint, 5);\n  buffer.writeUInt32BE(hdkey.index, 9);\n  hdkey.chainCode.copy(buffer, 13);\n  key.copy(buffer, 45);\n  return buffer;\n}\n\nfunction hash160(buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest();\n  return crypto.createHash('rmd160').update(sha).digest();\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET;\nmodule.exports = HDKey;","map":{"version":3,"sources":["/workspace/uniswap-exchange/node_modules/hdkey/lib/hdkey.js"],"names":["assert","require","crypto","cs","secp256k1","MASTER_SECRET","Buffer","HARDENED_OFFSET","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","hash160","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","serialize","concat","privateKey","derive","path","entries","split","hdkey","forEach","c","i","hardened","childIndex","parseInt","deriveChild","isHardened","indexBuffer","writeUInt32BE","data","pk","zb","I","createHmac","update","digest","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","fingerprint","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","version","readUInt8","key","fromJSON","obj","buffer","writeUInt8","copy","buf","sha","createHash","module","exports"],"mappings":"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","sourcesContent":["var assert = require('assert')\nvar crypto = require('crypto')\nvar cs = require('coinstring')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = new Buffer('Bitcoin seed')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = secp256k1.publicKeyCreate(value, true)\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = secp256k1.publicKeyConvert(value, true) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([new Buffer([0]), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return cs.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(c, 'm', 'Invalid path')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = new Buffer(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = new Buffer([0])\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL)\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.derive(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true)\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.derive(index + 1, isHardened)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = cs.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = new Buffer(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('rmd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"]},"metadata":{},"sourceType":"script"}