{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/pages/Pool/CreateExchange.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router';\nimport { createBrowserHistory } from 'history';\nimport { ethers } from 'ethers';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport ReactGA from 'react-ga';\nimport { useWeb3React, useFactoryContract } from '../../hooks';\nimport { Button } from '../../theme';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport OversizedPanel from '../../components/OversizedPanel';\nimport { useTokenDetails } from '../../contexts/Tokens';\nimport { useTransactionAdder } from '../../contexts/Transactions';\nconst SummaryPanel = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap};\n  padding: 1rem 0;\n`;\nconst ExchangeRateWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`;\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({\n  theme\n}) => theme.doveGray};\n`;\nconst CreateExchangeWrapper = styled.div`\n  color: ${({\n  theme\n}) => theme.doveGray};\n  text-align: center;\n  margin-top: 1rem;\n  padding-top: 1rem;\n`;\nconst SummaryText = styled.div`\n  font-size: 0.75rem;\n  color: ${({\n  error,\n  theme\n}) => error && theme.salmonRed};\n`;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`;\n\nfunction CreateExchange({\n  location,\n  params\n}) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const factory = useFactoryContract();\n  const [tokenAddress, setTokenAddress] = useState({\n    address: params.tokenAddress ? params.tokenAddress : '',\n    name: ''\n  });\n  const [tokenAddressError, setTokenAddressError] = useState();\n  const {\n    name,\n    symbol,\n    decimals,\n    exchangeAddress\n  } = useTokenDetails(tokenAddress.address);\n  const addTransaction = useTransactionAdder(); // clear url of query\n\n  useEffect(() => {\n    const history = createBrowserHistory();\n    history.push(window.location.pathname + '');\n  }, []); // validate everything\n\n  const [errorMessage, setErrorMessage] = useState(!account && t('noWallet'));\n  useEffect(() => {\n    if (tokenAddressError) {\n      setErrorMessage(t('invalidTokenAddress'));\n    } else if (symbol === undefined || decimals === undefined || exchangeAddress === undefined) {\n      setErrorMessage();\n    } else if (symbol === null) {\n      setErrorMessage(t('invalidSymbol'));\n    } else if (decimals === null) {\n      setErrorMessage(t('invalidDecimals'));\n    } else if (exchangeAddress !== ethers.constants.AddressZero) {\n      setErrorMessage(t('exchangeExists'));\n    } else if (!account) {\n      setErrorMessage(t('noWallet'));\n    } else {\n      setErrorMessage(null);\n    }\n\n    return () => {\n      setErrorMessage();\n    };\n  }, [tokenAddress.address, symbol, decimals, exchangeAddress, account, t, tokenAddressError]);\n\n  async function createExchange() {\n    const estimatedGasLimit = await factory.estimate.createExchange(tokenAddress.address);\n    factory.createExchange(tokenAddress.address, {\n      gasLimit: estimatedGasLimit\n    }).then(response => {\n      ReactGA.event({\n        category: 'Transaction',\n        action: 'Create Exchange'\n      });\n      addTransaction(response);\n    });\n  }\n\n  const isValid = errorMessage === null;\n  return React.createElement(React.Fragment, null, React.createElement(AddressInputPanel, {\n    title: t('tokenAddress'),\n    initialInput: params.tokenAddress ? {\n      address: params.tokenAddress\n    } : {\n      address: location.state && location.state.tokenAddress || ''\n    },\n    onChange: setTokenAddress,\n    onError: setTokenAddressError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(OversizedPanel, {\n    hideBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(SummaryPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, t('name')), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, name ? name : ' - ')), React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, t('symbol')), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, symbol ? symbol : ' - ')), React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, t('decimals')), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, decimals || decimals === 0 ? decimals : ' - ')))), React.createElement(CreateExchangeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(SummaryText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, errorMessage ? errorMessage : t('enterTokenCont'))), React.createElement(Flex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: !isValid,\n    onClick: createExchange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, t('createExchange'))));\n}\n\nexport default withRouter(CreateExchange);","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/pages/Pool/CreateExchange.js"],"names":["React","useState","useEffect","withRouter","createBrowserHistory","ethers","styled","useTranslation","ReactGA","useWeb3React","useFactoryContract","Button","AddressInputPanel","OversizedPanel","useTokenDetails","useTransactionAdder","SummaryPanel","div","theme","flexColumnNoWrap","ExchangeRateWrapper","flexRowNoWrap","doveGray","ExchangeRate","span","CreateExchangeWrapper","SummaryText","error","salmonRed","Flex","CreateExchange","location","params","t","account","factory","tokenAddress","setTokenAddress","address","name","tokenAddressError","setTokenAddressError","symbol","decimals","exchangeAddress","addTransaction","history","push","window","pathname","errorMessage","setErrorMessage","undefined","constants","AddressZero","createExchange","estimatedGasLimit","estimate","gasLimit","then","response","event","category","action","isValid","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,aAAjD;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,mBAAT,QAAoC,6BAApC;AAEA,MAAMC,YAAY,GAAGV,MAAM,CAACW,GAAI;IAC5B,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,gBAAiB;;CAD1C;AAKA,MAAMC,mBAAmB,GAAGd,MAAM,CAACW,GAAI;IACnC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACG,aAAc;;WAE5B,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACI,QAAS;;;CAHzC;AAQA,MAAMC,YAAY,GAAGjB,MAAM,CAACkB,IAAK;;;WAGtB,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACI,QAAS;CAHzC;AAMA,MAAMG,qBAAqB,GAAGnB,MAAM,CAACW,GAAI;WAC9B,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACI,QAAS;;;;CADzC;AAOA,MAAMI,WAAW,GAAGpB,MAAM,CAACW,GAAI;;WAEpB,CAAC;AAAEU,EAAAA,KAAF;AAAST,EAAAA;AAAT,CAAD,KAAsBS,KAAK,IAAIT,KAAK,CAACU,SAAU;CAF1D;AAKA,MAAMC,IAAI,GAAGvB,MAAM,CAACW,GAAI;;;;;;;;CAAxB;;AAUA,SAASa,cAAT,CAAwB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAxB,EAA8C;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAQ1B,cAAc,EAA5B;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAczB,YAAY,EAAhC;AAEA,QAAM0B,OAAO,GAAGzB,kBAAkB,EAAlC;AAEA,QAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkCpC,QAAQ,CAAC;AAC/CqC,IAAAA,OAAO,EAAEN,MAAM,CAACI,YAAP,GAAsBJ,MAAM,CAACI,YAA7B,GAA4C,EADN;AAE/CG,IAAAA,IAAI,EAAE;AAFyC,GAAD,CAAhD;AAIA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CxC,QAAQ,EAA1D;AAEA,QAAM;AAAEsC,IAAAA,IAAF;AAAQG,IAAAA,MAAR;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA;AAA1B,MAA8C9B,eAAe,CAACsB,YAAY,CAACE,OAAd,CAAnE;AACA,QAAMO,cAAc,GAAG9B,mBAAmB,EAA1C,CAb4C,CAe5C;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4C,OAAO,GAAG1C,oBAAoB,EAApC;AACA0C,IAAAA,OAAO,CAACC,IAAR,CAAaC,MAAM,CAACjB,QAAP,CAAgBkB,QAAhB,GAA2B,EAAxC;AACD,GAHQ,EAGN,EAHM,CAAT,CAhB4C,CAqB5C;;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkClD,QAAQ,CAAC,CAACiC,OAAD,IAAYD,CAAC,CAAC,UAAD,CAAd,CAAhD;AACA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsC,iBAAJ,EAAuB;AACrBW,MAAAA,eAAe,CAAClB,CAAC,CAAC,qBAAD,CAAF,CAAf;AACD,KAFD,MAEO,IAAIS,MAAM,KAAKU,SAAX,IAAwBT,QAAQ,KAAKS,SAArC,IAAkDR,eAAe,KAAKQ,SAA1E,EAAqF;AAC1FD,MAAAA,eAAe;AAChB,KAFM,MAEA,IAAIT,MAAM,KAAK,IAAf,EAAqB;AAC1BS,MAAAA,eAAe,CAAClB,CAAC,CAAC,eAAD,CAAF,CAAf;AACD,KAFM,MAEA,IAAIU,QAAQ,KAAK,IAAjB,EAAuB;AAC5BQ,MAAAA,eAAe,CAAClB,CAAC,CAAC,iBAAD,CAAF,CAAf;AACD,KAFM,MAEA,IAAIW,eAAe,KAAKvC,MAAM,CAACgD,SAAP,CAAiBC,WAAzC,EAAsD;AAC3DH,MAAAA,eAAe,CAAClB,CAAC,CAAC,gBAAD,CAAF,CAAf;AACD,KAFM,MAEA,IAAI,CAACC,OAAL,EAAc;AACnBiB,MAAAA,eAAe,CAAClB,CAAC,CAAC,UAAD,CAAF,CAAf;AACD,KAFM,MAEA;AACLkB,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AAED,WAAO,MAAM;AACXA,MAAAA,eAAe;AAChB,KAFD;AAGD,GApBQ,EAoBN,CAACf,YAAY,CAACE,OAAd,EAAuBI,MAAvB,EAA+BC,QAA/B,EAAyCC,eAAzC,EAA0DV,OAA1D,EAAmED,CAAnE,EAAsEO,iBAAtE,CApBM,CAAT;;AAsBA,iBAAee,cAAf,GAAgC;AAC9B,UAAMC,iBAAiB,GAAG,MAAMrB,OAAO,CAACsB,QAAR,CAAiBF,cAAjB,CAAgCnB,YAAY,CAACE,OAA7C,CAAhC;AAEAH,IAAAA,OAAO,CAACoB,cAAR,CAAuBnB,YAAY,CAACE,OAApC,EAA6C;AAAEoB,MAAAA,QAAQ,EAAEF;AAAZ,KAA7C,EAA8EG,IAA9E,CAAmFC,QAAQ,IAAI;AAC7FpD,MAAAA,OAAO,CAACqD,KAAR,CAAc;AACZC,QAAAA,QAAQ,EAAE,aADE;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAd;AAKAlB,MAAAA,cAAc,CAACe,QAAD,CAAd;AACD,KAPD;AAQD;;AAED,QAAMI,OAAO,GAAGd,YAAY,KAAK,IAAjC;AAEA,SACE,0CACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAEjB,CAAC,CAAC,cAAD,CADV;AAEE,IAAA,YAAY,EACVD,MAAM,CAACI,YAAP,GACI;AAAEE,MAAAA,OAAO,EAAEN,MAAM,CAACI;AAAlB,KADJ,GAEI;AAAEE,MAAAA,OAAO,EAAGP,QAAQ,CAACkC,KAAT,IAAkBlC,QAAQ,CAACkC,KAAT,CAAe7B,YAAlC,IAAmD;AAA9D,KALR;AAOE,IAAA,QAAQ,EAAEC,eAPZ;AAQE,IAAA,OAAO,EAAEI,oBARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWE,oBAAC,cAAD;AAAgB,IAAA,UAAU,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeR,CAAC,CAAC,MAAD,CAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOM,IAAI,GAAGA,IAAH,GAAU,KAArB,CAFF,CADF,EAKE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeN,CAAC,CAAC,QAAD,CAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOS,MAAM,GAAGA,MAAH,GAAY,KAAzB,CAFF,CALF,EASE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeT,CAAC,CAAC,UAAD,CAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOU,QAAQ,IAAIA,QAAQ,KAAK,CAAzB,GAA6BA,QAA7B,GAAwC,KAA/C,CAFF,CATF,CADF,CAXF,EA2BE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcO,YAAY,GAAGA,YAAH,GAAkBjB,CAAC,CAAC,gBAAD,CAA7C,CADF,CA3BF,EA8BE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE,CAAC+B,OAAnB;AAA4B,IAAA,OAAO,EAAET,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtB,CAAC,CAAC,gBAAD,CADJ,CADF,CA9BF,CADF;AAsCD;;AAED,eAAe9B,UAAU,CAAC2B,cAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router'\nimport { createBrowserHistory } from 'history'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\nimport ReactGA from 'react-ga'\n\nimport { useWeb3React, useFactoryContract } from '../../hooks'\nimport { Button } from '../../theme'\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport OversizedPanel from '../../components/OversizedPanel'\nimport { useTokenDetails } from '../../contexts/Tokens'\nimport { useTransactionAdder } from '../../contexts/Transactions'\n\nconst SummaryPanel = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap};\n  padding: 1rem 0;\n`\n\nconst ExchangeRateWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({ theme }) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`\n\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({ theme }) => theme.doveGray};\n`\n\nconst CreateExchangeWrapper = styled.div`\n  color: ${({ theme }) => theme.doveGray};\n  text-align: center;\n  margin-top: 1rem;\n  padding-top: 1rem;\n`\n\nconst SummaryText = styled.div`\n  font-size: 0.75rem;\n  color: ${({ error, theme }) => error && theme.salmonRed};\n`\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`\n\nfunction CreateExchange({ location, params }) {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const factory = useFactoryContract()\n\n  const [tokenAddress, setTokenAddress] = useState({\n    address: params.tokenAddress ? params.tokenAddress : '',\n    name: ''\n  })\n  const [tokenAddressError, setTokenAddressError] = useState()\n\n  const { name, symbol, decimals, exchangeAddress } = useTokenDetails(tokenAddress.address)\n  const addTransaction = useTransactionAdder()\n\n  // clear url of query\n  useEffect(() => {\n    const history = createBrowserHistory()\n    history.push(window.location.pathname + '')\n  }, [])\n\n  // validate everything\n  const [errorMessage, setErrorMessage] = useState(!account && t('noWallet'))\n  useEffect(() => {\n    if (tokenAddressError) {\n      setErrorMessage(t('invalidTokenAddress'))\n    } else if (symbol === undefined || decimals === undefined || exchangeAddress === undefined) {\n      setErrorMessage()\n    } else if (symbol === null) {\n      setErrorMessage(t('invalidSymbol'))\n    } else if (decimals === null) {\n      setErrorMessage(t('invalidDecimals'))\n    } else if (exchangeAddress !== ethers.constants.AddressZero) {\n      setErrorMessage(t('exchangeExists'))\n    } else if (!account) {\n      setErrorMessage(t('noWallet'))\n    } else {\n      setErrorMessage(null)\n    }\n\n    return () => {\n      setErrorMessage()\n    }\n  }, [tokenAddress.address, symbol, decimals, exchangeAddress, account, t, tokenAddressError])\n\n  async function createExchange() {\n    const estimatedGasLimit = await factory.estimate.createExchange(tokenAddress.address)\n\n    factory.createExchange(tokenAddress.address, { gasLimit: estimatedGasLimit }).then(response => {\n      ReactGA.event({\n        category: 'Transaction',\n        action: 'Create Exchange'\n      })\n\n      addTransaction(response)\n    })\n  }\n\n  const isValid = errorMessage === null\n\n  return (\n    <>\n      <AddressInputPanel\n        title={t('tokenAddress')}\n        initialInput={\n          params.tokenAddress\n            ? { address: params.tokenAddress }\n            : { address: (location.state && location.state.tokenAddress) || '' }\n        }\n        onChange={setTokenAddress}\n        onError={setTokenAddressError}\n      />\n      <OversizedPanel hideBottom>\n        <SummaryPanel>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('name')}</ExchangeRate>\n            <span>{name ? name : ' - '}</span>\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('symbol')}</ExchangeRate>\n            <span>{symbol ? symbol : ' - '}</span>\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('decimals')}</ExchangeRate>\n            <span>{decimals || decimals === 0 ? decimals : ' - '}</span>\n          </ExchangeRateWrapper>\n        </SummaryPanel>\n      </OversizedPanel>\n      <CreateExchangeWrapper>\n        <SummaryText>{errorMessage ? errorMessage : t('enterTokenCont')}</SummaryText>\n      </CreateExchangeWrapper>\n      <Flex>\n        <Button disabled={!isValid} onClick={createExchange}>\n          {t('createExchange')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default withRouter(CreateExchange)\n"]},"metadata":{},"sourceType":"module"}