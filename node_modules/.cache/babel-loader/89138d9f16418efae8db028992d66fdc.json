{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/pages/Pool/RemoveLiquidity.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ReactGA from 'react-ga';\nimport { createBrowserHistory } from 'history';\nimport { ethers } from 'ethers';\nimport styled from 'styled-components';\nimport { useWeb3React, useExchangeContract } from '../../hooks';\nimport { Button } from '../../theme';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport ContextualInfo from '../../components/ContextualInfo';\nimport OversizedPanel from '../../components/OversizedPanel';\nimport ArrowDown from '../../assets/svg/SVGArrowDown';\nimport { useTransactionAdder } from '../../contexts/Transactions';\nimport { useTokenDetails } from '../../contexts/Tokens';\nimport { useAddressBalance, useETHPriceInUSD } from '../../contexts/Balances';\nimport { calculateGasMargin, amountFormatter } from '../../utils'; // denominated in bips\n\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200); // denominated in seconds\n\nconst DEADLINE_FROM_NOW = 60 * 15; // denominated in bips\n\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000);\nconst BlueSpan = styled.span`\n  color: ${({\n  theme\n}) => theme.royalBlue};\n`;\nconst DownArrowBackground = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`;\nconst DownArrow = styled(ArrowDown)`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  color: ${({\n  theme,\n  active\n}) => active ? theme.royalBlue : theme.doveGray};\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n`;\nconst RemoveLiquidityOutput = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  min-height: 3.5rem;\n`;\nconst RemoveLiquidityOutputText = styled.div`\n  font-size: 1.25rem;\n  line-height: 1.5rem;\n  padding: 1rem 0.75rem;\n`;\nconst RemoveLiquidityOutputPlus = styled.div`\n  font-size: 1.25rem;\n  line-height: 1.5rem;\n  padding: 1rem 0;\n`;\nconst SummaryPanel = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap}\n  padding: 1rem 0;\n`;\nconst LastSummaryText = styled.div`\n  margin-top: 1rem;\n`;\nconst ExchangeRateWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`;\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({\n  theme\n}) => theme.doveGray};\n`;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`;\n\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n  try {\n    if (inputValue && (inputDecimals || inputDecimals === 0) && outputValue && (outputDecimals || outputDecimals === 0)) {\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18));\n\n      if (invert) {\n        return inputValue.mul(factor).div(outputValue).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)));\n      } else {\n        return outputValue.mul(factor).div(inputValue).mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals))).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)));\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(reserveETH, reserveToken, decimals, invert = false) {\n  return getExchangeRate(reserveETH, 18, reserveToken, decimals, invert);\n}\n\nfunction calculateSlippageBounds(value) {\n  if (value) {\n    const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000));\n    const minimum = value.sub(offset);\n    const maximum = value.add(offset);\n    return {\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\n    };\n  } else {\n    return {};\n  }\n}\n\nexport default function RemoveLiquidity({\n  params\n}) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    library,\n    account,\n    active\n  } = useWeb3React();\n  const addTransaction = useTransactionAdder(); // clear url of query\n\n  useEffect(() => {\n    const history = createBrowserHistory();\n    history.push(window.location.pathname + '');\n  }, []);\n  const [outputCurrency, setOutputCurrency] = useState(params.poolTokenAddress);\n  const [value, setValue] = useState(params.poolTokenAmount ? params.poolTokenAmount : '');\n  const [inputError, setInputError] = useState();\n  const [valueParsed, setValueParsed] = useState(); // parse value\n\n  useEffect(() => {\n    try {\n      const parsedValue = ethers.utils.parseUnits(value, 18);\n      setValueParsed(parsedValue);\n    } catch {\n      if (value !== '') {\n        setInputError(t('inputNotValid'));\n      }\n    }\n\n    return () => {\n      setInputError();\n      setValueParsed();\n    };\n  }, [t, value]);\n  const {\n    symbol,\n    decimals,\n    exchangeAddress\n  } = useTokenDetails(outputCurrency);\n  const [totalPoolTokens, setTotalPoolTokens] = useState();\n  const poolTokenBalance = useAddressBalance(account, exchangeAddress);\n  const exchangeETHBalance = useAddressBalance(exchangeAddress, 'ETH');\n  const exchangeTokenBalance = useAddressBalance(exchangeAddress, outputCurrency); // input validation\n\n  useEffect(() => {\n    if (valueParsed && poolTokenBalance) {\n      if (valueParsed.gt(poolTokenBalance)) {\n        setInputError(t('insufficientBalance'));\n      } else {\n        setInputError(null);\n      }\n    }\n  }, [poolTokenBalance, t, valueParsed]);\n  const exchange = useExchangeContract(exchangeAddress);\n  const ownershipPercentage = poolTokenBalance && totalPoolTokens && !totalPoolTokens.isZero() ? poolTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens) : undefined;\n  const ownershipPercentageFormatted = ownershipPercentage && amountFormatter(ownershipPercentage, 16, 4);\n  const ETHOwnShare = exchangeETHBalance && ownershipPercentage && exchangeETHBalance.mul(ownershipPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)));\n  const TokenOwnShare = exchangeTokenBalance && ownershipPercentage && exchangeTokenBalance.mul(ownershipPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)));\n  const ETHPer = exchangeETHBalance && totalPoolTokens && !totalPoolTokens.isZero() ? exchangeETHBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens) : undefined;\n  const tokenPer = exchangeTokenBalance && totalPoolTokens && !totalPoolTokens.isZero() ? exchangeTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens) : undefined;\n  const ethWithdrawn = ETHPer && valueParsed ? ETHPer.mul(valueParsed).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))) : undefined;\n  const tokenWithdrawn = tokenPer && valueParsed ? tokenPer.mul(valueParsed).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))) : undefined;\n  const ethWithdrawnMin = ethWithdrawn ? calculateSlippageBounds(ethWithdrawn).minimum : undefined;\n  const tokenWithdrawnMin = tokenWithdrawn ? calculateSlippageBounds(tokenWithdrawn).minimum : undefined;\n  const fetchPoolTokens = useCallback(() => {\n    if (exchange) {\n      exchange.totalSupply().then(totalSupply => {\n        setTotalPoolTokens(totalSupply);\n      });\n    }\n  }, [exchange]);\n  useEffect(() => {\n    fetchPoolTokens();\n    library.on('block', fetchPoolTokens);\n    return () => {\n      library.removeListener('block', fetchPoolTokens);\n    };\n  }, [fetchPoolTokens, library]); // BigNumber.js instance\n\n  const ethPrice = useETHPriceInUSD();\n\n  async function onRemoveLiquidity() {\n    // take ETH amount, multiplied by ETH rate and 2 for total tx size\n    let usdTransactionSize = ethPrice * (ethWithdrawn / 1e18) * 2;\n    ReactGA.event({\n      category: 'Transaction',\n      action: 'Remove Liquidity',\n      label: outputCurrency,\n      value: usdTransactionSize\n    });\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n    const estimatedGasLimit = await exchange.estimate.removeLiquidity(valueParsed, ethWithdrawnMin, tokenWithdrawnMin, deadline);\n    exchange.removeLiquidity(valueParsed, ethWithdrawnMin, tokenWithdrawnMin, deadline, {\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\n    }).then(response => {\n      addTransaction(response);\n    });\n  }\n\n  const b = text => React.createElement(BlueSpan, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, text);\n\n  function renderTransactionDetails() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, t('youAreRemoving'), \" \", b(`${amountFormatter(ethWithdrawn, 18, 4)} ETH`), \" \", t('and'), ' ', b(`${amountFormatter(tokenWithdrawn, decimals, Math.min(decimals, 4))} ${symbol}`), \" \", t('outPool')), React.createElement(LastSummaryText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, t('youWillRemove'), \" \", b(amountFormatter(valueParsed, 18, 4)), \" \", t('liquidityTokens')), React.createElement(LastSummaryText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, t('totalSupplyIs'), \" \", b(amountFormatter(totalPoolTokens, 18, 4))), React.createElement(LastSummaryText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, t('tokenWorth'), \" \", b(amountFormatter(ETHPer, 18, 4)), \" ETH \", t('and'), ' ', b(amountFormatter(tokenPer, decimals, Math.min(4, decimals))), \" \", symbol));\n  }\n\n  function renderSummary() {\n    let contextualInfo = '';\n    let isError = false;\n\n    if (inputError) {\n      contextualInfo = inputError;\n      isError = true;\n    } else if (!outputCurrency || outputCurrency === 'ETH') {\n      contextualInfo = t('selectTokenCont');\n    } else if (!valueParsed) {\n      contextualInfo = t('enterValueCont');\n    } else if (!account) {\n      contextualInfo = t('noWallet');\n      isError = true;\n    }\n\n    return React.createElement(ContextualInfo, {\n      key: \"context-info\",\n      openDetailsText: t('transactionDetails'),\n      closeDetailsText: t('hideDetails'),\n      contextualInfo: contextualInfo,\n      isError: isError,\n      renderTransactionDetails: renderTransactionDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    });\n  }\n\n  function formatBalance(value) {\n    return `Balance: ${value}`;\n  }\n\n  const isActive = active && account;\n  const isValid = inputError === null;\n  const marketRate = getMarketRate(exchangeETHBalance, exchangeTokenBalance, decimals);\n  return React.createElement(React.Fragment, null, React.createElement(CurrencyInputPanel, {\n    title: t('poolTokens'),\n    extraText: poolTokenBalance && formatBalance(amountFormatter(poolTokenBalance, 18, 4)),\n    extraTextClickHander: () => {\n      if (poolTokenBalance) {\n        const valueToSet = poolTokenBalance;\n\n        if (valueToSet.gt(ethers.constants.Zero)) {\n          setValue(amountFormatter(valueToSet, 18, 18, false));\n        }\n      }\n    },\n    onCurrencySelected: setOutputCurrency,\n    onValueChange: setValue,\n    value: value,\n    errorMessage: inputError,\n    selectedTokenAddress: outputCurrency,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }), React.createElement(OversizedPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357\n    },\n    __self: this\n  }, React.createElement(DownArrowBackground, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }, React.createElement(DownArrow, {\n    active: isActive,\n    alt: \"arrow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }))), React.createElement(CurrencyInputPanel, {\n    title: t('output'),\n    description: !!(ethWithdrawn && tokenWithdrawn) ? `(${t('estimated')})` : '',\n    key: \"remove-liquidity-input\",\n    renderInput: () => !!(ethWithdrawn && tokenWithdrawn) ? React.createElement(RemoveLiquidityOutput, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(RemoveLiquidityOutputText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, `${amountFormatter(ethWithdrawn, 18, 4, false)} ETH`), React.createElement(RemoveLiquidityOutputPlus, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \" + \"), React.createElement(RemoveLiquidityOutputText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, `${amountFormatter(tokenWithdrawn, decimals, Math.min(4, decimals))} ${symbol}`)) : React.createElement(RemoveLiquidityOutput, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }),\n    disableTokenSelect: true,\n    disableUnlock: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }), React.createElement(OversizedPanel, {\n    key: \"remove-liquidity-input-under\",\n    hideBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384\n    },\n    __self: this\n  }, React.createElement(SummaryPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385\n    },\n    __self: this\n  }, React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, t('exchangeRate')), marketRate ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, `1 ETH = ${amountFormatter(marketRate, 18, 4)} ${symbol}`) : ' - '), React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, t('currentPoolSize')), exchangeETHBalance && exchangeTokenBalance && (decimals || decimals === 0) ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, `${amountFormatter(exchangeETHBalance, 18, 4)} ETH + ${amountFormatter(exchangeTokenBalance, decimals, Math.min(decimals, 4))} ${symbol}`) : ' - '), React.createElement(ExchangeRateWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  }, React.createElement(ExchangeRate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }, t('yourPoolShare'), \" (\", ownershipPercentageFormatted && ownershipPercentageFormatted, \"%)\"), ETHOwnShare && TokenOwnShare ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407\n    },\n    __self: this\n  }, `${amountFormatter(ETHOwnShare, 18, 4)} ETH + ${amountFormatter(TokenOwnShare, decimals, Math.min(decimals, 4))} ${symbol}`) : ' - '))), renderSummary(), React.createElement(Flex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: !isValid,\n    onClick: onRemoveLiquidity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422\n    },\n    __self: this\n  }, t('removeLiquidity'))));\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/pages/Pool/RemoveLiquidity.js"],"names":["React","useState","useEffect","useCallback","useTranslation","ReactGA","createBrowserHistory","ethers","styled","useWeb3React","useExchangeContract","Button","CurrencyInputPanel","ContextualInfo","OversizedPanel","ArrowDown","useTransactionAdder","useTokenDetails","useAddressBalance","useETHPriceInUSD","calculateGasMargin","amountFormatter","ALLOWED_SLIPPAGE","utils","bigNumberify","DEADLINE_FROM_NOW","GAS_MARGIN","BlueSpan","span","theme","royalBlue","DownArrowBackground","div","flexRowNoWrap","DownArrow","active","doveGray","RemoveLiquidityOutput","RemoveLiquidityOutputText","RemoveLiquidityOutputPlus","SummaryPanel","flexColumnNoWrap","LastSummaryText","ExchangeRateWrapper","ExchangeRate","Flex","getExchangeRate","inputValue","inputDecimals","outputValue","outputDecimals","invert","factor","pow","mul","getMarketRate","reserveETH","reserveToken","decimals","calculateSlippageBounds","value","offset","minimum","sub","maximum","add","lt","constants","Zero","gt","MaxUint256","RemoveLiquidity","params","t","library","account","addTransaction","history","push","window","location","pathname","outputCurrency","setOutputCurrency","poolTokenAddress","setValue","poolTokenAmount","inputError","setInputError","valueParsed","setValueParsed","parsedValue","parseUnits","symbol","exchangeAddress","totalPoolTokens","setTotalPoolTokens","poolTokenBalance","exchangeETHBalance","exchangeTokenBalance","exchange","ownershipPercentage","isZero","undefined","ownershipPercentageFormatted","ETHOwnShare","TokenOwnShare","ETHPer","tokenPer","ethWithdrawn","tokenWithdrawn","ethWithdrawnMin","tokenWithdrawnMin","fetchPoolTokens","totalSupply","then","on","removeListener","ethPrice","onRemoveLiquidity","usdTransactionSize","event","category","action","label","deadline","Math","ceil","Date","now","estimatedGasLimit","estimate","removeLiquidity","gasLimit","response","b","text","renderTransactionDetails","min","renderSummary","contextualInfo","isError","formatBalance","isActive","isValid","marketRate","valueToSet"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport ReactGA from 'react-ga'\nimport { createBrowserHistory } from 'history'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\n\nimport { useWeb3React, useExchangeContract } from '../../hooks'\nimport { Button } from '../../theme'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport ContextualInfo from '../../components/ContextualInfo'\nimport OversizedPanel from '../../components/OversizedPanel'\nimport ArrowDown from '../../assets/svg/SVGArrowDown'\nimport { useTransactionAdder } from '../../contexts/Transactions'\nimport { useTokenDetails } from '../../contexts/Tokens'\nimport { useAddressBalance, useETHPriceInUSD } from '../../contexts/Balances'\nimport { calculateGasMargin, amountFormatter } from '../../utils'\n\n// denominated in bips\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200)\n\n// denominated in seconds\nconst DEADLINE_FROM_NOW = 60 * 15\n\n// denominated in bips\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000)\n\nconst BlueSpan = styled.span`\n  color: ${({ theme }) => theme.royalBlue};\n`\n\nconst DownArrowBackground = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  justify-content: center;\n  align-items: center;\n`\n\nconst DownArrow = styled(ArrowDown)`\n  ${({ theme }) => theme.flexRowNoWrap}\n  color: ${({ theme, active }) => (active ? theme.royalBlue : theme.doveGray)};\n  width: 0.625rem;\n  height: 0.625rem;\n  position: relative;\n  padding: 0.875rem;\n`\n\nconst RemoveLiquidityOutput = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  min-height: 3.5rem;\n`\n\nconst RemoveLiquidityOutputText = styled.div`\n  font-size: 1.25rem;\n  line-height: 1.5rem;\n  padding: 1rem 0.75rem;\n`\n\nconst RemoveLiquidityOutputPlus = styled.div`\n  font-size: 1.25rem;\n  line-height: 1.5rem;\n  padding: 1rem 0;\n`\n\nconst SummaryPanel = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  padding: 1rem 0;\n`\n\nconst LastSummaryText = styled.div`\n  margin-top: 1rem;\n`\n\nconst ExchangeRateWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  color: ${({ theme }) => theme.doveGray};\n  font-size: 0.75rem;\n  padding: 0.25rem 1rem 0;\n`\n\nconst ExchangeRate = styled.span`\n  flex: 1 1 auto;\n  width: 0;\n  color: ${({ theme }) => theme.doveGray};\n`\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 2rem;\n\n  button {\n    max-width: 20rem;\n  }\n`\n\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n  try {\n    if (\n      inputValue &&\n      (inputDecimals || inputDecimals === 0) &&\n      outputValue &&\n      (outputDecimals || outputDecimals === 0)\n    ) {\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\n\n      if (invert) {\n        return inputValue\n          .mul(factor)\n          .div(outputValue)\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\n      } else {\n        return outputValue\n          .mul(factor)\n          .div(inputValue)\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\n      }\n    }\n  } catch {}\n}\n\nfunction getMarketRate(reserveETH, reserveToken, decimals, invert = false) {\n  return getExchangeRate(reserveETH, 18, reserveToken, decimals, invert)\n}\n\nfunction calculateSlippageBounds(value) {\n  if (value) {\n    const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000))\n    const minimum = value.sub(offset)\n    const maximum = value.add(offset)\n    return {\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\n    }\n  } else {\n    return {}\n  }\n}\n\nexport default function RemoveLiquidity({ params }) {\n  const { t } = useTranslation()\n  const { library, account, active } = useWeb3React()\n\n  const addTransaction = useTransactionAdder()\n\n  // clear url of query\n  useEffect(() => {\n    const history = createBrowserHistory()\n    history.push(window.location.pathname + '')\n  }, [])\n\n  const [outputCurrency, setOutputCurrency] = useState(params.poolTokenAddress)\n  const [value, setValue] = useState(params.poolTokenAmount ? params.poolTokenAmount : '')\n  const [inputError, setInputError] = useState()\n  const [valueParsed, setValueParsed] = useState()\n  // parse value\n  useEffect(() => {\n    try {\n      const parsedValue = ethers.utils.parseUnits(value, 18)\n      setValueParsed(parsedValue)\n    } catch {\n      if (value !== '') {\n        setInputError(t('inputNotValid'))\n      }\n    }\n\n    return () => {\n      setInputError()\n      setValueParsed()\n    }\n  }, [t, value])\n\n  const { symbol, decimals, exchangeAddress } = useTokenDetails(outputCurrency)\n\n  const [totalPoolTokens, setTotalPoolTokens] = useState()\n  const poolTokenBalance = useAddressBalance(account, exchangeAddress)\n  const exchangeETHBalance = useAddressBalance(exchangeAddress, 'ETH')\n  const exchangeTokenBalance = useAddressBalance(exchangeAddress, outputCurrency)\n\n  // input validation\n  useEffect(() => {\n    if (valueParsed && poolTokenBalance) {\n      if (valueParsed.gt(poolTokenBalance)) {\n        setInputError(t('insufficientBalance'))\n      } else {\n        setInputError(null)\n      }\n    }\n  }, [poolTokenBalance, t, valueParsed])\n\n  const exchange = useExchangeContract(exchangeAddress)\n\n  const ownershipPercentage =\n    poolTokenBalance && totalPoolTokens && !totalPoolTokens.isZero()\n      ? poolTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\n      : undefined\n  const ownershipPercentageFormatted = ownershipPercentage && amountFormatter(ownershipPercentage, 16, 4)\n\n  const ETHOwnShare =\n    exchangeETHBalance &&\n    ownershipPercentage &&\n    exchangeETHBalance.mul(ownershipPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n  const TokenOwnShare =\n    exchangeTokenBalance &&\n    ownershipPercentage &&\n    exchangeTokenBalance.mul(ownershipPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n\n  const ETHPer =\n    exchangeETHBalance && totalPoolTokens && !totalPoolTokens.isZero()\n      ? exchangeETHBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\n      : undefined\n  const tokenPer =\n    exchangeTokenBalance && totalPoolTokens && !totalPoolTokens.isZero()\n      ? exchangeTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\n      : undefined\n\n  const ethWithdrawn =\n    ETHPer && valueParsed\n      ? ETHPer.mul(valueParsed).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n      : undefined\n  const tokenWithdrawn =\n    tokenPer && valueParsed\n      ? tokenPer.mul(valueParsed).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\n      : undefined\n\n  const ethWithdrawnMin = ethWithdrawn ? calculateSlippageBounds(ethWithdrawn).minimum : undefined\n  const tokenWithdrawnMin = tokenWithdrawn ? calculateSlippageBounds(tokenWithdrawn).minimum : undefined\n\n  const fetchPoolTokens = useCallback(() => {\n    if (exchange) {\n      exchange.totalSupply().then(totalSupply => {\n        setTotalPoolTokens(totalSupply)\n      })\n    }\n  }, [exchange])\n  useEffect(() => {\n    fetchPoolTokens()\n    library.on('block', fetchPoolTokens)\n\n    return () => {\n      library.removeListener('block', fetchPoolTokens)\n    }\n  }, [fetchPoolTokens, library])\n\n  // BigNumber.js instance\n  const ethPrice = useETHPriceInUSD()\n\n  async function onRemoveLiquidity() {\n    // take ETH amount, multiplied by ETH rate and 2 for total tx size\n    let usdTransactionSize = ethPrice * (ethWithdrawn / 1e18) * 2\n    ReactGA.event({\n      category: 'Transaction',\n      action: 'Remove Liquidity',\n      label: outputCurrency,\n      value: usdTransactionSize\n    })\n\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\n\n    const estimatedGasLimit = await exchange.estimate.removeLiquidity(\n      valueParsed,\n      ethWithdrawnMin,\n      tokenWithdrawnMin,\n      deadline\n    )\n\n    exchange\n      .removeLiquidity(valueParsed, ethWithdrawnMin, tokenWithdrawnMin, deadline, {\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\n      })\n      .then(response => {\n        addTransaction(response)\n      })\n  }\n\n  const b = text => <BlueSpan>{text}</BlueSpan>\n\n  function renderTransactionDetails() {\n    return (\n      <div>\n        <div>\n          {t('youAreRemoving')} {b(`${amountFormatter(ethWithdrawn, 18, 4)} ETH`)} {t('and')}{' '}\n          {b(`${amountFormatter(tokenWithdrawn, decimals, Math.min(decimals, 4))} ${symbol}`)} {t('outPool')}\n        </div>\n        <LastSummaryText>\n          {t('youWillRemove')} {b(amountFormatter(valueParsed, 18, 4))} {t('liquidityTokens')}\n        </LastSummaryText>\n        <LastSummaryText>\n          {t('totalSupplyIs')} {b(amountFormatter(totalPoolTokens, 18, 4))}\n        </LastSummaryText>\n        <LastSummaryText>\n          {t('tokenWorth')} {b(amountFormatter(ETHPer, 18, 4))} ETH {t('and')}{' '}\n          {b(amountFormatter(tokenPer, decimals, Math.min(4, decimals)))} {symbol}\n        </LastSummaryText>\n      </div>\n    )\n  }\n\n  function renderSummary() {\n    let contextualInfo = ''\n    let isError = false\n\n    if (inputError) {\n      contextualInfo = inputError\n      isError = true\n    } else if (!outputCurrency || outputCurrency === 'ETH') {\n      contextualInfo = t('selectTokenCont')\n    } else if (!valueParsed) {\n      contextualInfo = t('enterValueCont')\n    } else if (!account) {\n      contextualInfo = t('noWallet')\n      isError = true\n    }\n\n    return (\n      <ContextualInfo\n        key=\"context-info\"\n        openDetailsText={t('transactionDetails')}\n        closeDetailsText={t('hideDetails')}\n        contextualInfo={contextualInfo}\n        isError={isError}\n        renderTransactionDetails={renderTransactionDetails}\n      />\n    )\n  }\n\n  function formatBalance(value) {\n    return `Balance: ${value}`\n  }\n\n  const isActive = active && account\n  const isValid = inputError === null\n\n  const marketRate = getMarketRate(exchangeETHBalance, exchangeTokenBalance, decimals)\n\n  return (\n    <>\n      <CurrencyInputPanel\n        title={t('poolTokens')}\n        extraText={poolTokenBalance && formatBalance(amountFormatter(poolTokenBalance, 18, 4))}\n        extraTextClickHander={() => {\n          if (poolTokenBalance) {\n            const valueToSet = poolTokenBalance\n            if (valueToSet.gt(ethers.constants.Zero)) {\n              setValue(amountFormatter(valueToSet, 18, 18, false))\n            }\n          }\n        }}\n        onCurrencySelected={setOutputCurrency}\n        onValueChange={setValue}\n        value={value}\n        errorMessage={inputError}\n        selectedTokenAddress={outputCurrency}\n      />\n      <OversizedPanel>\n        <DownArrowBackground>\n          <DownArrow active={isActive} alt=\"arrow\" />\n        </DownArrowBackground>\n      </OversizedPanel>\n      <CurrencyInputPanel\n        title={t('output')}\n        description={!!(ethWithdrawn && tokenWithdrawn) ? `(${t('estimated')})` : ''}\n        key=\"remove-liquidity-input\"\n        renderInput={() =>\n          !!(ethWithdrawn && tokenWithdrawn) ? (\n            <RemoveLiquidityOutput>\n              <RemoveLiquidityOutputText>\n                {`${amountFormatter(ethWithdrawn, 18, 4, false)} ETH`}\n              </RemoveLiquidityOutputText>\n              <RemoveLiquidityOutputPlus> + </RemoveLiquidityOutputPlus>\n              <RemoveLiquidityOutputText>\n                {`${amountFormatter(tokenWithdrawn, decimals, Math.min(4, decimals))} ${symbol}`}\n              </RemoveLiquidityOutputText>\n            </RemoveLiquidityOutput>\n          ) : (\n            <RemoveLiquidityOutput />\n          )\n        }\n        disableTokenSelect\n        disableUnlock\n      />\n      <OversizedPanel key=\"remove-liquidity-input-under\" hideBottom>\n        <SummaryPanel>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('exchangeRate')}</ExchangeRate>\n            {marketRate ? <span>{`1 ETH = ${amountFormatter(marketRate, 18, 4)} ${symbol}`}</span> : ' - '}\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>{t('currentPoolSize')}</ExchangeRate>\n            {exchangeETHBalance && exchangeTokenBalance && (decimals || decimals === 0) ? (\n              <span>{`${amountFormatter(exchangeETHBalance, 18, 4)} ETH + ${amountFormatter(\n                exchangeTokenBalance,\n                decimals,\n                Math.min(decimals, 4)\n              )} ${symbol}`}</span>\n            ) : (\n              ' - '\n            )}\n          </ExchangeRateWrapper>\n          <ExchangeRateWrapper>\n            <ExchangeRate>\n              {t('yourPoolShare')} ({ownershipPercentageFormatted && ownershipPercentageFormatted}%)\n            </ExchangeRate>\n            {ETHOwnShare && TokenOwnShare ? (\n              <span>\n                {`${amountFormatter(ETHOwnShare, 18, 4)} ETH + ${amountFormatter(\n                  TokenOwnShare,\n                  decimals,\n                  Math.min(decimals, 4)\n                )} ${symbol}`}\n              </span>\n            ) : (\n              ' - '\n            )}\n          </ExchangeRateWrapper>\n        </SummaryPanel>\n      </OversizedPanel>\n      {renderSummary()}\n      <Flex>\n        <Button disabled={!isValid} onClick={onRemoveLiquidity}>\n          {t('removeLiquidity')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}