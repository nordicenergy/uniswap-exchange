{"ast":null,"code":"import _slicedToArray from\"/workspace/uniswap-exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{getMarketDetails}from\"@uniswap/sdk\";import{getMedian,getMean}from\"./math\";var DAI=\"DAI\";var USDC=\"USDC\";var TUSD=\"TUSD\";var NESC=\"NESC\";var USD_STABLECOINS=[DAI,USDC,TUSD,NESC];function forEachStablecoin(runner){return USD_STABLECOINS.map(function(stablecoin,index){return runner(index,stablecoin);});}export function getUSDPrice(reserves){var marketDetails=forEachStablecoin(function(i){return getMarketDetails(reserves[i],undefined);});var ethPrices=forEachStablecoin(function(i){return marketDetails[i].marketRate.rateInverted;});var _getMedian=getMedian(ethPrices),_getMedian2=_slicedToArray(_getMedian,1),median=_getMedian2[0];var _getMean=getMean(ethPrices),_getMean2=_slicedToArray(_getMean,1),mean=_getMean2[0];var _getMean3=getMean(ethPrices,forEachStablecoin(function(i){return reserves[i].ethReserve.amount;})),_getMean4=_slicedToArray(_getMean3,1),weightedMean=_getMean4[0];// const _stablecoinWeights = [\n//   getMean([medianWeights[0], meanWeights[0], weightedMeanWeights[0]])[0],\n//   getMean([medianWeights[1], meanWeights[1], weightedMeanWeights[1]])[0],\n//   getMean([medianWeights[2], meanWeights[2], weightedMeanWeights[2]])[0]\n// ]\n// const stablecoinWeights = forEachStablecoin((i, stablecoin) => ({\n//   [stablecoin]: _stablecoinWeights[i]\n// })).reduce((accumulator, currentValue) => ({ ...accumulator, ...currentValue }), {})\nreturn getMean([median,mean,weightedMean])[0];}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/utils/price.js"],"names":["getMarketDetails","getMedian","getMean","DAI","USDC","TUSD","NESC","USD_STABLECOINS","forEachStablecoin","runner","map","stablecoin","index","getUSDPrice","reserves","marketDetails","i","undefined","ethPrices","marketRate","rateInverted","median","mean","ethReserve","amount","weightedMean"],"mappings":"kJAAA,OAASA,gBAAT,KAAiC,cAAjC,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmC,QAAnC,CAEA,GAAMC,CAAAA,GAAG,CAAG,KAAZ,CACA,GAAMC,CAAAA,IAAI,CAAG,MAAb,CACA,GAAMC,CAAAA,IAAI,CAAG,MAAb,CACA,GAAMC,CAAAA,IAAI,CAAG,MAAb,CAEA,GAAMC,CAAAA,eAAe,CAAG,CAACJ,GAAD,CAAMC,IAAN,CAAYC,IAAZ,CAAkBC,IAAlB,CAAxB,CAEA,QAASE,CAAAA,iBAAT,CAA2BC,MAA3B,CAAmC,CACjC,MAAOF,CAAAA,eAAe,CAACG,GAAhB,CAAoB,SAACC,UAAD,CAAaC,KAAb,QAAuBH,CAAAA,MAAM,CAACG,KAAD,CAAQD,UAAR,CAA7B,EAApB,CAAP,CACD,CAED,MAAO,SAASE,CAAAA,WAAT,CAAqBC,QAArB,CAA+B,CACpC,GAAMC,CAAAA,aAAa,CAAGP,iBAAiB,CAAC,SAAAQ,CAAC,QACvChB,CAAAA,gBAAgB,CAACc,QAAQ,CAACE,CAAD,CAAT,CAAcC,SAAd,CADuB,EAAF,CAAvC,CAGA,GAAMC,CAAAA,SAAS,CAAGV,iBAAiB,CACjC,SAAAQ,CAAC,QAAID,CAAAA,aAAa,CAACC,CAAD,CAAb,CAAiBG,UAAjB,CAA4BC,YAAhC,EADgC,CAAnC,CAJoC,eAQnBnB,SAAS,CAACiB,SAAD,CARU,0CAQ7BG,MAR6B,6BASrBnB,OAAO,CAACgB,SAAD,CATc,sCAS7BI,IAT6B,4BAUbpB,OAAO,CAC5BgB,SAD4B,CAE5BV,iBAAiB,CAAC,SAAAQ,CAAC,QAAIF,CAAAA,QAAQ,CAACE,CAAD,CAAR,CAAYO,UAAZ,CAAuBC,MAA3B,EAAF,CAFW,CAVM,uCAU7BC,YAV6B,cAepC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAOvB,CAAAA,OAAO,CAAC,CAACmB,MAAD,CAASC,IAAT,CAAeG,YAAf,CAAD,CAAP,CAAsC,CAAtC,CAAP,CACD","sourcesContent":["import { getMarketDetails } from \"@uniswap/sdk\";\nimport { getMedian, getMean } from \"./math\";\n\nconst DAI = \"DAI\";\nconst USDC = \"USDC\";\nconst TUSD = \"TUSD\";\nconst NESC = \"NESC\";\n\nconst USD_STABLECOINS = [DAI, USDC, TUSD, NESC];\n\nfunction forEachStablecoin(runner) {\n  return USD_STABLECOINS.map((stablecoin, index) => runner(index, stablecoin));\n}\n\nexport function getUSDPrice(reserves) {\n  const marketDetails = forEachStablecoin(i =>\n    getMarketDetails(reserves[i], undefined)\n  );\n  const ethPrices = forEachStablecoin(\n    i => marketDetails[i].marketRate.rateInverted\n  );\n\n  const [median] = getMedian(ethPrices);\n  const [mean] = getMean(ethPrices);\n  const [weightedMean] = getMean(\n    ethPrices,\n    forEachStablecoin(i => reserves[i].ethReserve.amount)\n  );\n\n  // const _stablecoinWeights = [\n  //   getMean([medianWeights[0], meanWeights[0], weightedMeanWeights[0]])[0],\n  //   getMean([medianWeights[1], meanWeights[1], weightedMeanWeights[1]])[0],\n  //   getMean([medianWeights[2], meanWeights[2], weightedMeanWeights[2]])[0]\n  // ]\n  // const stablecoinWeights = forEachStablecoin((i, stablecoin) => ({\n  //   [stablecoin]: _stablecoinWeights[i]\n  // })).reduce((accumulator, currentValue) => ({ ...accumulator, ...currentValue }), {})\n\n  return getMean([median, mean, weightedMean])[0];\n}\n"]},"metadata":{},"sourceType":"module"}