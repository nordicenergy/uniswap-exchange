{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* eslint-disable no-continue */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-prototype-builtins */\n\n\nvar errorClasses = {};\nvar deserializers = {};\n\nvar addCustomErrorDeserializer = exports.addCustomErrorDeserializer = function addCustomErrorDeserializer(name, deserializer) {\n  deserializers[name] = deserializer;\n};\n\nvar createCustomErrorClass = exports.createCustomErrorClass = function createCustomErrorClass(name) {\n  var C = function CustomError(message, fields) {\n    Object.assign(this, fields);\n    this.name = name;\n    this.message = message || name;\n    this.stack = new Error().stack;\n  }; // $FlowFixMe\n\n\n  C.prototype = new Error();\n  errorClasses[name] = C; // $FlowFixMe we can't easily type a subset of Error for now...\n\n  return C;\n}; // inspired from https://github.com/programble/errio/blob/master/index.js\n\n\nvar deserializeError = exports.deserializeError = function deserializeError(object) {\n  if ((typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) === \"object\" && object) {\n    try {\n      // $FlowFixMe FIXME HACK\n      var msg = JSON.parse(object.message);\n\n      if (msg.message && msg.name) {\n        object = msg;\n      }\n    } catch (e) {// nothing\n    }\n\n    var error = void 0;\n\n    if (typeof object.name === \"string\") {\n      var _object = object,\n          name = _object.name;\n      var des = deserializers[name];\n\n      if (des) {\n        error = des(object);\n      } else {\n        var _constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!_constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          _constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(_constructor.prototype);\n\n        try {\n          for (var prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {// sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      error = new Error(object.message);\n    }\n\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n\n    return error;\n  }\n\n  return new Error(String(object));\n}; // inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\n\n\nvar serializeError = exports.serializeError = function serializeError(value) {\n  if (!value) return value;\n\n  if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\") {\n    return destroyCircular(value, []);\n  }\n\n  if (typeof value === \"function\") {\n    return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\n  }\n\n  return value;\n}; // https://www.npmjs.com/package/destroy-circular\n\n\nfunction destroyCircular(from, seen) {\n  var to = {};\n  seen.push(from);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.keys(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      var value = from[key];\n\n      if (typeof value === \"function\") {\n        continue;\n      }\n\n      if (!value || (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) !== \"object\") {\n        to[key] = value;\n        continue;\n      }\n\n      if (seen.indexOf(from[key]) === -1) {\n        to[key] = destroyCircular(from[key], seen.slice(0));\n        continue;\n      }\n\n      to[key] = \"[Circular]\";\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n\n  return to;\n}","map":{"version":3,"sources":["../src/helpers.js"],"names":["errorClasses","deserializers","addCustomErrorDeserializer","createCustomErrorClass","C","Object","message","deserializeError","msg","JSON","object","error","name","des","constructor","console","Error","String","serializeError","destroyCircular","value","to","seen","key","from"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n\nconst errorClasses = {};\nconst deserializers = {};\n\nexport const addCustomErrorDeserializer = (\n  name: string,\n  deserializer: Object => *\n) => {\n  deserializers[name] = deserializer;\n};\n\nexport const createCustomErrorClass = (name: string): Class<any> => {\n  const C = function CustomError(message?: string, fields?: Object) {\n    Object.assign(this, fields);\n    this.name = name;\n    this.message = message || name;\n    this.stack = new Error().stack;\n  };\n  // $FlowFixMe\n  C.prototype = new Error();\n\n  errorClasses[name] = C;\n  // $FlowFixMe we can't easily type a subset of Error for now...\n  return C;\n};\n\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object: mixed): Error => {\n  if (typeof object === \"object\" && object) {\n    try {\n      // $FlowFixMe FIXME HACK\n      const msg = JSON.parse(object.message);\n      if (msg.message && msg.name) {\n        object = msg;\n      }\n    } catch (e) {\n      // nothing\n    }\n\n    let error;\n    if (typeof object.name === \"string\") {\n      const { name } = object;\n      const des = deserializers[name];\n      if (des) {\n        error = des(object);\n      } else {\n        let constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(constructor.prototype);\n        try {\n          for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {\n          // sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      error = new Error(object.message);\n    }\n\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value: mixed) => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from: Object, seen) {\n  const to = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}\n"]},"metadata":{},"sourceType":"script"}