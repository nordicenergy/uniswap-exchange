{"ast":null,"code":"import _slicedToArray from\"/workspace/uniswap-exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/workspace/uniswap-exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"/workspace/uniswap-exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  width: \",\";\\n  height: \",\";\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  width: \",\";\\n  height: \",\";\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  width: \",\";\\n  height: \",\";\\n  background-color: white;\\n  border-radius: 1rem;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import styled from'styled-components';import{isAddress}from'../../utils';import{ReactComponent as EthereumLogo}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/ethereum-logo.svg\";var TOKEN_ICON_API=function TOKEN_ICON_API(address){return\"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/\".concat(isAddress(address),\"/logo.png\");};var BAD_IMAGES={};var Image=styled.img(_templateObject(),function(_ref){var size=_ref.size;return size;},function(_ref2){var size=_ref2.size;return size;});var Emoji=styled.span(_templateObject2(),function(_ref3){var size=_ref3.size;return size;},function(_ref4){var size=_ref4.size;return size;});var StyledEthereumLogo=styled(EthereumLogo)(_templateObject3(),function(_ref5){var size=_ref5.size;return size;},function(_ref6){var size=_ref6.size;return size;});export default function TokenLogo(_ref7){var address=_ref7.address,_ref7$size=_ref7.size,size=_ref7$size===void 0?'1rem':_ref7$size,rest=_objectWithoutProperties(_ref7,[\"address\",\"size\"]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var path='';if(address==='ETH'){return React.createElement(StyledEthereumLogo,{size:size});}else if(!error&&!BAD_IMAGES[address]){path=TOKEN_ICON_API(address.toLowerCase());}else{return React.createElement(Emoji,Object.assign({},rest,{size:size}),React.createElement(\"span\",{role:\"img\",\"aria-label\":\"Thinking\"},\"\\uD83E\\uDD14\"));}return React.createElement(Image,Object.assign({},rest,{alt:address,src:path,size:size,onError:function onError(){BAD_IMAGES[address]=true;setError(true);}}));}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/components/TokenLogo/index.js"],"names":["React","useState","styled","isAddress","TOKEN_ICON_API","address","BAD_IMAGES","Image","img","size","Emoji","span","StyledEthereumLogo","EthereumLogo","TokenLogo","rest","error","setError","path","toLowerCase"],"mappings":"klCAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,SAAT,KAA0B,aAA1B,C,sHAIA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,OAAO,0GAC+DF,SAAS,CAClGE,OADkG,CADxE,eAA9B,CAIA,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CAEA,GAAMC,CAAAA,KAAK,CAAGL,MAAM,CAACM,GAAV,mBACA,kBAAGC,CAAAA,IAAH,MAAGA,IAAH,OAAcA,CAAAA,IAAd,EADA,CAEC,mBAAGA,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAFD,CAAX,CAOA,GAAMC,CAAAA,KAAK,CAAGR,MAAM,CAACS,IAAV,oBAIA,mBAAGF,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAJA,CAKC,mBAAGA,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EALD,CAAX,CAQA,GAAMG,CAAAA,kBAAkB,CAAGV,MAAM,CAACW,YAAD,CAAT,oBACb,mBAAGJ,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EADa,CAEZ,mBAAGA,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAFY,CAAxB,CAKA,cAAe,SAASK,CAAAA,SAAT,OAAwD,IAAnCT,CAAAA,OAAmC,OAAnCA,OAAmC,kBAA1BI,IAA0B,CAA1BA,IAA0B,qBAAnB,MAAmB,YAARM,IAAQ,kEAC3Cd,QAAQ,CAAC,KAAD,CADmC,wCAC9De,KAD8D,eACvDC,QADuD,eAGrE,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACA,GAAIb,OAAO,GAAK,KAAhB,CAAuB,CACrB,MAAO,qBAAC,kBAAD,EAAoB,IAAI,CAAEI,IAA1B,EAAP,CACD,CAFD,IAEO,IAAI,CAACO,KAAD,EAAU,CAACV,UAAU,CAACD,OAAD,CAAzB,CAAoC,CACzCa,IAAI,CAAGd,cAAc,CAACC,OAAO,CAACc,WAAR,EAAD,CAArB,CACD,CAFM,IAEA,CACL,MACE,qBAAC,KAAD,kBAAWJ,IAAX,EAAiB,IAAI,CAAEN,IAAvB,GACE,4BAAM,IAAI,CAAC,KAAX,CAAiB,aAAW,UAA5B,iBADF,CADF,CAOD,CAED,MACE,qBAAC,KAAD,kBACMM,IADN,EAEE,GAAG,CAAEV,OAFP,CAGE,GAAG,CAAEa,IAHP,CAIE,IAAI,CAAET,IAJR,CAKE,OAAO,CAAE,kBAAM,CACbH,UAAU,CAACD,OAAD,CAAV,CAAsB,IAAtB,CACAY,QAAQ,CAAC,IAAD,CAAR,CACD,CARH,GADF,CAYD","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from '../../utils'\n\nimport { ReactComponent as EthereumLogo } from '../../assets/images/ethereum-logo.svg'\n\nconst TOKEN_ICON_API = address =>\n  `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${isAddress(\n    address\n  )}/logo.png`\nconst BAD_IMAGES = {}\n\nconst Image = styled.img`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background-color: white;\n  border-radius: 1rem;\n`\n\nconst Emoji = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nconst StyledEthereumLogo = styled(EthereumLogo)`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function TokenLogo({ address, size = '1rem', ...rest }) {\n  const [error, setError] = useState(false)\n\n  let path = ''\n  if (address === 'ETH') {\n    return <StyledEthereumLogo size={size} />\n  } else if (!error && !BAD_IMAGES[address]) {\n    path = TOKEN_ICON_API(address.toLowerCase())\n  } else {\n    return (\n      <Emoji {...rest} size={size}>\n        <span role=\"img\" aria-label=\"Thinking\">\n          ðŸ¤”\n        </span>\n      </Emoji>\n    )\n  }\n\n  return (\n    <Image\n      {...rest}\n      alt={address}\n      src={path}\n      size={size}\n      onError={() => {\n        BAD_IMAGES[address] = true\n        setError(true)\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}