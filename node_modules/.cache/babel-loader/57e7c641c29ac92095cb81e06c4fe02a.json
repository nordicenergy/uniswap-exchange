{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethers_1 = require(\"ethers\");\n\nvar react_1 = require(\"react\");\n\nexports.ManagerErrorCodes = ['UNEXPECTED_ERROR', 'ALL_CONNECTORS_INVALID'].reduce(function (accumulator, currentValue) {\n  accumulator[currentValue] = currentValue;\n  return accumulator;\n}, {});\nvar unexpectedErrorMessage = 'web3-react encountered an unexpected internal error. See the console for details.';\nvar unexpectedError = Error(unexpectedErrorMessage);\nunexpectedError.code = exports.ManagerErrorCodes.UNEXPECTED_ERROR;\nvar initialWeb3State = {\n  account: undefined,\n  connectorName: undefined,\n  error: null,\n  networkId: undefined,\n  provider: undefined\n};\n\nfunction normalizeAccount(account) {\n  return account === null ? account : ethers_1.ethers.utils.getAddress(account);\n}\n\nfunction useRefId() {\n  var refId = react_1.useRef(0);\n\n  function increment() {\n    refId.current += 1;\n  }\n\n  return [refId, increment];\n}\n\nfunction usePrevious(trackedValue) {\n  var ref = react_1.useRef();\n  react_1.useEffect(function () {\n    ref.current = trackedValue;\n  }, [trackedValue]);\n  return ref.current;\n}\n\nfunction web3StateReducer(state, action) {\n  switch (action.type) {\n    case 'UPDATE_CONNECTOR_VALUES':\n      {\n        var _a = action.payload,\n            connectorName = _a.connectorName,\n            provider = _a.provider,\n            networkId = _a.networkId,\n            account = _a.account;\n        return {\n          connectorName: connectorName,\n          provider: provider,\n          networkId: networkId,\n          account: normalizeAccount(account),\n          error: null\n        };\n      }\n\n    case 'UPDATE_NETWORK_ID':\n      {\n        var _b = action.payload,\n            provider = _b.provider,\n            networkId = _b.networkId;\n        return __assign({}, state, {\n          provider: provider || state.provider,\n          networkId: networkId,\n          error: null\n        });\n      }\n\n    case 'UPDATE_ACCOUNT':\n      {\n        var _c = action.payload,\n            provider = _c.provider,\n            account = _c.account;\n        return __assign({}, state, {\n          provider: provider || state.provider,\n          account: normalizeAccount(account),\n          error: null\n        });\n      }\n\n    case 'UPDATE_NETWORK_ID_AND_ACCOUNT':\n      {\n        var _d = action.payload,\n            provider = _d.provider,\n            networkId = _d.networkId,\n            account = _d.account;\n        return __assign({}, state, {\n          provider: provider || state.provider,\n          account: normalizeAccount(account),\n          error: null,\n          networkId: networkId\n        });\n      }\n\n    case 'SET_ERROR':\n      return __assign({}, initialWeb3State, {\n        error: action.payload\n      });\n\n    case 'SET_ERROR_PRESERVE_CONNECTOR_NAME':\n      return __assign({}, initialWeb3State, {\n        connectorName: state.connectorName,\n        error: action.payload\n      });\n\n    case 'SET_ERROR_WITH_CONNECTOR_NAME':\n      {\n        var _e = action.payload,\n            connectorName = _e.connectorName,\n            error = _e.error;\n        return __assign({}, initialWeb3State, {\n          connectorName: connectorName,\n          error: error\n        });\n      }\n\n    case 'RESET':\n      return initialWeb3State;\n\n    default:\n      {\n        // eslint-disable-next-line no-console\n        console.warn('Default case encountered in web3StateReducer. Please file an issue on Github.');\n        return __assign({}, state, {\n          provider: undefined,\n          networkId: undefined,\n          account: undefined,\n          error: unexpectedError\n        });\n      }\n  }\n}\n\nfunction useWeb3Manager(connectors) {\n  var _a = useRefId(),\n      refId = _a[0],\n      incrementRefId = _a[1]; // keep track of web3 state\n\n\n  var _b = react_1.useReducer(web3StateReducer, initialWeb3State),\n      web3State = _b[0],\n      dispatchWeb3State = _b[1];\n\n  var web3Initialized = !!(web3State.account !== undefined && web3State.connectorName && !web3State.error && web3State.provider && web3State.networkId); // keep track of active connector\n\n  var activeConnector = web3State.connectorName ? connectors[web3State.connectorName] : undefined; // function to set the error state.\n\n  function setError(error, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.preserveConnector,\n        preserveConnector = _c === void 0 ? true : _c,\n        connectorName = _b.connectorName;\n\n    if (connectorName) {\n      dispatchWeb3State({\n        type: 'SET_ERROR_WITH_CONNECTOR_NAME',\n        payload: {\n          error: error,\n          connectorName: connectorName\n        }\n      });\n    }\n\n    if (preserveConnector) {\n      dispatchWeb3State({\n        type: 'SET_ERROR_PRESERVE_CONNECTOR_NAME',\n        payload: error\n      });\n    } else {\n      dispatchWeb3State({\n        type: 'SET_ERROR',\n        payload: error\n      });\n    }\n  } // function to set a connector\n\n\n  function setConnector(connectorName, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.suppressAndThrowErrors,\n        suppressAndThrowErrors = _c === void 0 ? false : _c,\n        networkId = _b.networkId;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var callingTimeRefId, validConnectorNames, connector, provider_1, networkIdPromise, accountPromise, error_1;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            callingTimeRefId = refId.current;\n            incrementRefId();\n            validConnectorNames = Object.keys(connectors);\n            connector = connectors[connectorName];\n\n            if (!validConnectorNames.includes(connectorName)) {\n              // eslint-disable-next-line no-console\n              console.warn(\"'\" + connectorName + \"' is not a valid name, please pass one of: \" + validConnectorNames.join(', ') + \".\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (connectorName === web3State.connectorName) {\n              // eslint-disable-next-line no-console\n              console.warn(\"'\" + connectorName + \"' is already set. Calling 'setConnector' for a connector while it is active is a no-op.'\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , connector.onActivation()];\n\n          case 2:\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , connector.getProvider(networkId)];\n\n          case 3:\n            provider_1 = _d.sent();\n            networkIdPromise = connector.getNetworkId(provider_1);\n            accountPromise = connector.getAccount(provider_1);\n            return [4\n            /*yield*/\n            , Promise.all([networkIdPromise, accountPromise]).then(function (_a) {\n              var networkId = _a[0],\n                  account = _a[1];\n\n              if (refId.current !== callingTimeRefId + 1) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Silently suppressing status update from stale connector '\" + connectorName + \"'.\");\n                return;\n              }\n\n              dispatchWeb3State({\n                payload: {\n                  connectorName: connectorName,\n                  provider: provider_1,\n                  networkId: networkId,\n                  account: account\n                },\n                type: 'UPDATE_CONNECTOR_VALUES'\n              });\n            })];\n\n          case 4:\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            error_1 = _d.sent(); // if the component has re-rendered since this function was called, eat the error\n\n            if (refId.current !== callingTimeRefId + 1) {\n              // eslint-disable-next-line no-console\n              console.warn(\"Silently handling error from '\" + connectorName + \"': \" + error_1.toString());\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (suppressAndThrowErrors) {\n              throw error_1;\n            } else {\n              setError(error_1, {\n                connectorName: connectorName\n              });\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  } // expose a wrapper to set the first valid connector in a list\n\n\n  function setFirstValidConnector(connectorNames, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.suppressAndThrowErrors,\n        suppressAndThrowErrors = _c === void 0 ? false : _c,\n        _d = _b.networkIds,\n        networkIds = _d === void 0 ? [] : _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _i, connectorNames_1, connectorName, error_2, error_3;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _i = 0, connectorNames_1 = connectorNames;\n            _e.label = 1;\n\n          case 1:\n            if (!(_i < connectorNames_1.length)) return [3\n            /*break*/\n            , 6];\n            connectorName = connectorNames_1[_i];\n            _e.label = 2;\n\n          case 2:\n            _e.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , setConnector(connectorName, {\n              suppressAndThrowErrors: true,\n              networkId: networkIds[connectorNames.indexOf(connectorName)]\n            })];\n\n          case 3:\n            _e.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            error_2 = _e.sent();\n\n            if (connectorName === connectorNames[connectorNames.length - 1]) {\n              error_3 = Error('Unable to set any valid connector.');\n              error_3.code = exports.ManagerErrorCodes.ALL_CONNECTORS_INVALID;\n\n              if (suppressAndThrowErrors) {\n                throw error_3;\n              } else {\n                setError(error_3);\n              }\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  } // function to unset the current connector\n\n\n  function unsetConnector() {\n    dispatchWeb3State({\n      type: 'RESET'\n    });\n  }\n\n  var lastConnector = usePrevious(activeConnector);\n  react_1.useEffect(function () {\n    if (activeConnector === undefined && lastConnector !== undefined) {\n      lastConnector.onDeactivation(web3State.error);\n    }\n  }, [activeConnector, lastConnector, web3State.error]);\n\n  function web3ReactUpdateHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.updateNetworkId,\n        updateNetworkId = _c === void 0 ? false : _c,\n        _d = _b.updateAccount,\n        updateAccount = _d === void 0 ? false : _d,\n        _e = _b.overrideNetworkIdCheck,\n        overrideNetworkIdCheck = _e === void 0 ? false : _e,\n        _f = _b.overrideAccountCheck,\n        overrideAccountCheck = _f === void 0 ? false : _f,\n        networkId = _b.networkId,\n        account = _b.account;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var fetchNewProvider_1, provider_2, fetchNewNetworkId_1, networkIdPromise, fetchNewAccount_1, accountPromise, error_4;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!activeConnector) {\n              // eslint-disable-next-line no-console\n              console.warn('No active connector in web3ReactUpdateHandler call. Please file an issue on Github.');\n              setError(unexpectedError);\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!updateNetworkId && !updateAccount || updateNetworkId && overrideNetworkIdCheck && !networkId || updateAccount && overrideAccountCheck && !account) {\n              console.warn('Malformed parameters passed to web3ReactUpdateHandler.'); // eslint-disable-line no-console\n\n              setError(unexpectedError);\n              return [2\n              /*return*/\n              ];\n            } // no checks required\n\n\n            if ((!updateNetworkId || updateNetworkId && overrideNetworkIdCheck) && (!updateAccount || updateAccount && overrideAccountCheck)) {\n              if (updateNetworkId && !updateAccount) {\n                dispatchWeb3State({\n                  payload: {\n                    networkId: networkId\n                  },\n                  type: 'UPDATE_NETWORK_ID'\n                });\n              } else if (!updateNetworkId && updateAccount) {\n                dispatchWeb3State({\n                  payload: {\n                    account: account\n                  },\n                  type: 'UPDATE_ACCOUNT'\n                });\n              } else {\n                dispatchWeb3State({\n                  payload: {\n                    networkId: networkId,\n                    account: account\n                  },\n                  type: 'UPDATE_NETWORK_ID_AND_ACCOUNT'\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            _g.label = 1;\n\n          case 1:\n            _g.trys.push([1, 4,, 5]);\n\n            fetchNewProvider_1 = !web3State.provider || updateNetworkId && !overrideNetworkIdCheck;\n            return [4\n            /*yield*/\n            , fetchNewProvider_1 ? activeConnector.getProvider(networkId) : web3State.provider];\n\n          case 2:\n            provider_2 = _g.sent();\n            fetchNewNetworkId_1 = web3State.networkId === undefined || updateNetworkId && !overrideNetworkIdCheck;\n            networkIdPromise = web3State.networkId === undefined || fetchNewNetworkId_1 ? activeConnector.getNetworkId(provider_2) : web3State.networkId;\n            fetchNewAccount_1 = web3State.account === undefined || updateAccount && !overrideAccountCheck;\n            accountPromise = web3State.account === undefined || fetchNewAccount_1 ? activeConnector.getAccount(provider_2) : web3State.account;\n            return [4\n            /*yield*/\n            , Promise.all([networkIdPromise, accountPromise]).then(function (_a) {\n              var returnedNetworkId = _a[0],\n                  returnedAccount = _a[1];\n\n              if (updateNetworkId && networkId && networkId !== returnedNetworkId) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Mismatched networkIds in web3ReactUpdateHandler: \" + networkId + \" and \" + returnedNetworkId + \".\");\n                throw unexpectedError;\n              }\n\n              if (updateAccount && account && normalizeAccount(account) !== normalizeAccount(returnedAccount)) {\n                // eslint-disable-next-line no-console\n                console.warn(\"Mismatched accounts in web3ReactUpdateHandler: \" + normalizeAccount(account) + \" and \" + normalizeAccount(returnedAccount) + \".\");\n                throw unexpectedError;\n              }\n\n              if (fetchNewNetworkId_1 && !fetchNewAccount_1) {\n                dispatchWeb3State({\n                  payload: {\n                    provider: fetchNewProvider_1 ? provider_2 : undefined,\n                    networkId: returnedNetworkId\n                  },\n                  type: 'UPDATE_NETWORK_ID'\n                });\n              } else if (!fetchNewNetworkId_1 && fetchNewAccount_1) {\n                dispatchWeb3State({\n                  payload: {\n                    provider: fetchNewProvider_1 ? provider_2 : undefined,\n                    account: returnedAccount\n                  },\n                  type: 'UPDATE_ACCOUNT'\n                });\n              } else {\n                dispatchWeb3State({\n                  payload: {\n                    provider: fetchNewProvider_1 ? provider_2 : undefined,\n                    networkId: returnedNetworkId,\n                    account: returnedAccount\n                  },\n                  type: 'UPDATE_NETWORK_ID_AND_ACCOUNT'\n                });\n              }\n            })];\n\n          case 3:\n            _g.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _g.sent();\n            setError(error_4);\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }\n\n  function web3ReactErrorHandler(error, preserveConnector) {\n    if (preserveConnector === void 0) {\n      preserveConnector = true;\n    }\n\n    setError(error, {\n      preserveConnector: preserveConnector\n    });\n  }\n\n  function web3ReactResetHandler() {\n    unsetConnector();\n  }\n\n  react_1.useEffect(function () {\n    if (activeConnector) {\n      activeConnector.on('_web3ReactUpdate', web3ReactUpdateHandler);\n      activeConnector.on('_web3ReactError', web3ReactErrorHandler);\n      activeConnector.on('_web3ReactReset', web3ReactResetHandler);\n    }\n\n    return function () {\n      if (activeConnector) {\n        activeConnector.removeListener('_web3ReactUpdate', web3ReactUpdateHandler);\n        activeConnector.removeListener('_web3ReactError', web3ReactErrorHandler);\n        activeConnector.removeListener('_web3ReactReset', web3ReactResetHandler);\n      }\n    };\n  });\n  return {\n    web3Initialized: web3Initialized,\n    web3State: web3State,\n    connector: activeConnector,\n    setConnector: setConnector,\n    setFirstValidConnector: setFirstValidConnector,\n    unsetConnector: unsetConnector,\n    setError: setError\n  };\n}\n\nexports.default = useWeb3Manager;","map":{"version":3,"sources":["../src/manager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethers_1 = require(\"ethers\");\nvar react_1 = require(\"react\");\nexports.ManagerErrorCodes = ['UNEXPECTED_ERROR', 'ALL_CONNECTORS_INVALID'].reduce(function (accumulator, currentValue) {\n    accumulator[currentValue] = currentValue;\n    return accumulator;\n}, {});\nvar unexpectedErrorMessage = 'web3-react encountered an unexpected internal error. See the console for details.';\nvar unexpectedError = Error(unexpectedErrorMessage);\nunexpectedError.code = exports.ManagerErrorCodes.UNEXPECTED_ERROR;\nvar initialWeb3State = {\n    account: undefined,\n    connectorName: undefined,\n    error: null,\n    networkId: undefined,\n    provider: undefined\n};\nfunction normalizeAccount(account) {\n    return account === null ? account : ethers_1.ethers.utils.getAddress(account);\n}\nfunction useRefId() {\n    var refId = react_1.useRef(0);\n    function increment() {\n        refId.current += 1;\n    }\n    return [refId, increment];\n}\nfunction usePrevious(trackedValue) {\n    var ref = react_1.useRef();\n    react_1.useEffect(function () {\n        ref.current = trackedValue;\n    }, [trackedValue]);\n    return ref.current;\n}\nfunction web3StateReducer(state, action) {\n    switch (action.type) {\n        case 'UPDATE_CONNECTOR_VALUES': {\n            var _a = action.payload, connectorName = _a.connectorName, provider = _a.provider, networkId = _a.networkId, account = _a.account;\n            return { connectorName: connectorName, provider: provider, networkId: networkId, account: normalizeAccount(account), error: null };\n        }\n        case 'UPDATE_NETWORK_ID': {\n            var _b = action.payload, provider = _b.provider, networkId = _b.networkId;\n            return __assign({}, state, { provider: provider || state.provider, networkId: networkId, error: null });\n        }\n        case 'UPDATE_ACCOUNT': {\n            var _c = action.payload, provider = _c.provider, account = _c.account;\n            return __assign({}, state, { provider: provider || state.provider, account: normalizeAccount(account), error: null });\n        }\n        case 'UPDATE_NETWORK_ID_AND_ACCOUNT': {\n            var _d = action.payload, provider = _d.provider, networkId = _d.networkId, account = _d.account;\n            return __assign({}, state, { provider: provider || state.provider, account: normalizeAccount(account), error: null, networkId: networkId });\n        }\n        case 'SET_ERROR':\n            return __assign({}, initialWeb3State, { error: action.payload });\n        case 'SET_ERROR_PRESERVE_CONNECTOR_NAME':\n            return __assign({}, initialWeb3State, { connectorName: state.connectorName, error: action.payload });\n        case 'SET_ERROR_WITH_CONNECTOR_NAME': {\n            var _e = action.payload, connectorName = _e.connectorName, error = _e.error;\n            return __assign({}, initialWeb3State, { connectorName: connectorName, error: error });\n        }\n        case 'RESET':\n            return initialWeb3State;\n        default: {\n            // eslint-disable-next-line no-console\n            console.warn('Default case encountered in web3StateReducer. Please file an issue on Github.');\n            return __assign({}, state, { provider: undefined, networkId: undefined, account: undefined, error: unexpectedError });\n        }\n    }\n}\nfunction useWeb3Manager(connectors) {\n    var _a = useRefId(), refId = _a[0], incrementRefId = _a[1];\n    // keep track of web3 state\n    var _b = react_1.useReducer(web3StateReducer, initialWeb3State), web3State = _b[0], dispatchWeb3State = _b[1];\n    var web3Initialized = !!(web3State.account !== undefined &&\n        web3State.connectorName &&\n        !web3State.error &&\n        web3State.provider &&\n        web3State.networkId);\n    // keep track of active connector\n    var activeConnector = web3State.connectorName\n        ? connectors[web3State.connectorName]\n        : undefined;\n    // function to set the error state.\n    function setError(error, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.preserveConnector, preserveConnector = _c === void 0 ? true : _c, connectorName = _b.connectorName;\n        if (connectorName) {\n            dispatchWeb3State({\n                type: 'SET_ERROR_WITH_CONNECTOR_NAME',\n                payload: { error: error, connectorName: connectorName }\n            });\n        }\n        if (preserveConnector) {\n            dispatchWeb3State({\n                type: 'SET_ERROR_PRESERVE_CONNECTOR_NAME',\n                payload: error\n            });\n        }\n        else {\n            dispatchWeb3State({\n                type: 'SET_ERROR',\n                payload: error\n            });\n        }\n    }\n    // function to set a connector\n    function setConnector(connectorName, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.suppressAndThrowErrors, suppressAndThrowErrors = _c === void 0 ? false : _c, networkId = _b.networkId;\n        return __awaiter(this, void 0, void 0, function () {\n            var callingTimeRefId, validConnectorNames, connector, provider_1, networkIdPromise, accountPromise, error_1;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        callingTimeRefId = refId.current;\n                        incrementRefId();\n                        validConnectorNames = Object.keys(connectors);\n                        connector = connectors[connectorName];\n                        if (!validConnectorNames.includes(connectorName)) {\n                            // eslint-disable-next-line no-console\n                            console.warn(\"'\" + connectorName + \"' is not a valid name, please pass one of: \" + validConnectorNames.join(', ') + \".\");\n                            return [2 /*return*/];\n                        }\n                        if (connectorName === web3State.connectorName) {\n                            // eslint-disable-next-line no-console\n                            console.warn(\"'\" + connectorName + \"' is already set. Calling 'setConnector' for a connector while it is active is a no-op.'\");\n                            return [2 /*return*/];\n                        }\n                        _d.label = 1;\n                    case 1:\n                        _d.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, connector.onActivation()];\n                    case 2:\n                        _d.sent();\n                        return [4 /*yield*/, connector.getProvider(networkId)];\n                    case 3:\n                        provider_1 = _d.sent();\n                        networkIdPromise = connector.getNetworkId(provider_1);\n                        accountPromise = connector.getAccount(provider_1);\n                        return [4 /*yield*/, Promise.all([networkIdPromise, accountPromise]).then(function (_a) {\n                                var networkId = _a[0], account = _a[1];\n                                if (refId.current !== callingTimeRefId + 1) {\n                                    // eslint-disable-next-line no-console\n                                    console.warn(\"Silently suppressing status update from stale connector '\" + connectorName + \"'.\");\n                                    return;\n                                }\n                                dispatchWeb3State({\n                                    payload: { connectorName: connectorName, provider: provider_1, networkId: networkId, account: account },\n                                    type: 'UPDATE_CONNECTOR_VALUES'\n                                });\n                            })];\n                    case 4:\n                        _d.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        error_1 = _d.sent();\n                        // if the component has re-rendered since this function was called, eat the error\n                        if (refId.current !== callingTimeRefId + 1) {\n                            // eslint-disable-next-line no-console\n                            console.warn(\"Silently handling error from '\" + connectorName + \"': \" + error_1.toString());\n                            return [2 /*return*/];\n                        }\n                        if (suppressAndThrowErrors) {\n                            throw error_1;\n                        }\n                        else {\n                            setError(error_1, { connectorName: connectorName });\n                        }\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    // expose a wrapper to set the first valid connector in a list\n    function setFirstValidConnector(connectorNames, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.suppressAndThrowErrors, suppressAndThrowErrors = _c === void 0 ? false : _c, _d = _b.networkIds, networkIds = _d === void 0 ? [] : _d;\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, connectorNames_1, connectorName, error_2, error_3;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _i = 0, connectorNames_1 = connectorNames;\n                        _e.label = 1;\n                    case 1:\n                        if (!(_i < connectorNames_1.length)) return [3 /*break*/, 6];\n                        connectorName = connectorNames_1[_i];\n                        _e.label = 2;\n                    case 2:\n                        _e.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, setConnector(connectorName, {\n                                suppressAndThrowErrors: true,\n                                networkId: networkIds[connectorNames.indexOf(connectorName)]\n                            })];\n                    case 3:\n                        _e.sent();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        error_2 = _e.sent();\n                        if (connectorName === connectorNames[connectorNames.length - 1]) {\n                            error_3 = Error('Unable to set any valid connector.');\n                            error_3.code = exports.ManagerErrorCodes.ALL_CONNECTORS_INVALID;\n                            if (suppressAndThrowErrors) {\n                                throw error_3;\n                            }\n                            else {\n                                setError(error_3);\n                            }\n                        }\n                        return [3 /*break*/, 5];\n                    case 5:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    // function to unset the current connector\n    function unsetConnector() {\n        dispatchWeb3State({ type: 'RESET' });\n    }\n    var lastConnector = usePrevious(activeConnector);\n    react_1.useEffect(function () {\n        if (activeConnector === undefined && lastConnector !== undefined) {\n            lastConnector.onDeactivation(web3State.error);\n        }\n    }, [activeConnector, lastConnector, web3State.error]);\n    function web3ReactUpdateHandler(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.updateNetworkId, updateNetworkId = _c === void 0 ? false : _c, _d = _b.updateAccount, updateAccount = _d === void 0 ? false : _d, _e = _b.overrideNetworkIdCheck, overrideNetworkIdCheck = _e === void 0 ? false : _e, _f = _b.overrideAccountCheck, overrideAccountCheck = _f === void 0 ? false : _f, networkId = _b.networkId, account = _b.account;\n        return __awaiter(this, void 0, void 0, function () {\n            var fetchNewProvider_1, provider_2, fetchNewNetworkId_1, networkIdPromise, fetchNewAccount_1, accountPromise, error_4;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        if (!activeConnector) {\n                            // eslint-disable-next-line no-console\n                            console.warn('No active connector in web3ReactUpdateHandler call. Please file an issue on Github.');\n                            setError(unexpectedError);\n                            return [2 /*return*/];\n                        }\n                        if ((!updateNetworkId && !updateAccount) ||\n                            (updateNetworkId && overrideNetworkIdCheck && !networkId) ||\n                            (updateAccount && overrideAccountCheck && !account)) {\n                            console.warn('Malformed parameters passed to web3ReactUpdateHandler.'); // eslint-disable-line no-console\n                            setError(unexpectedError);\n                            return [2 /*return*/];\n                        }\n                        // no checks required\n                        if ((!updateNetworkId || (updateNetworkId && overrideNetworkIdCheck)) &&\n                            (!updateAccount || (updateAccount && overrideAccountCheck))) {\n                            if (updateNetworkId && !updateAccount) {\n                                dispatchWeb3State({\n                                    payload: { networkId: networkId },\n                                    type: 'UPDATE_NETWORK_ID'\n                                });\n                            }\n                            else if (!updateNetworkId && updateAccount) {\n                                dispatchWeb3State({\n                                    payload: { account: account },\n                                    type: 'UPDATE_ACCOUNT'\n                                });\n                            }\n                            else {\n                                dispatchWeb3State({\n                                    payload: { networkId: networkId, account: account },\n                                    type: 'UPDATE_NETWORK_ID_AND_ACCOUNT'\n                                });\n                            }\n                            return [2 /*return*/];\n                        }\n                        _g.label = 1;\n                    case 1:\n                        _g.trys.push([1, 4, , 5]);\n                        fetchNewProvider_1 = !web3State.provider || (updateNetworkId && !overrideNetworkIdCheck);\n                        return [4 /*yield*/, (fetchNewProvider_1 ? activeConnector.getProvider(networkId) : web3State.provider)];\n                    case 2:\n                        provider_2 = _g.sent();\n                        fetchNewNetworkId_1 = web3State.networkId === undefined || (updateNetworkId && !overrideNetworkIdCheck);\n                        networkIdPromise = web3State.networkId === undefined || fetchNewNetworkId_1\n                            ? activeConnector.getNetworkId(provider_2)\n                            : web3State.networkId;\n                        fetchNewAccount_1 = web3State.account === undefined || (updateAccount && !overrideAccountCheck);\n                        accountPromise = web3State.account === undefined || fetchNewAccount_1 ? activeConnector.getAccount(provider_2) : web3State.account;\n                        return [4 /*yield*/, Promise.all([networkIdPromise, accountPromise]).then(function (_a) {\n                                var returnedNetworkId = _a[0], returnedAccount = _a[1];\n                                if (updateNetworkId && networkId && networkId !== returnedNetworkId) {\n                                    // eslint-disable-next-line no-console\n                                    console.warn(\"Mismatched networkIds in web3ReactUpdateHandler: \" + networkId + \" and \" + returnedNetworkId + \".\");\n                                    throw unexpectedError;\n                                }\n                                if (updateAccount && account && normalizeAccount(account) !== normalizeAccount(returnedAccount)) {\n                                    // eslint-disable-next-line no-console\n                                    console.warn(\"Mismatched accounts in web3ReactUpdateHandler: \" + normalizeAccount(account) + \" and \" + normalizeAccount(returnedAccount) + \".\");\n                                    throw unexpectedError;\n                                }\n                                if (fetchNewNetworkId_1 && !fetchNewAccount_1) {\n                                    dispatchWeb3State({\n                                        payload: { provider: fetchNewProvider_1 ? provider_2 : undefined, networkId: returnedNetworkId },\n                                        type: 'UPDATE_NETWORK_ID'\n                                    });\n                                }\n                                else if (!fetchNewNetworkId_1 && fetchNewAccount_1) {\n                                    dispatchWeb3State({\n                                        payload: { provider: fetchNewProvider_1 ? provider_2 : undefined, account: returnedAccount },\n                                        type: 'UPDATE_ACCOUNT'\n                                    });\n                                }\n                                else {\n                                    dispatchWeb3State({\n                                        payload: {\n                                            provider: fetchNewProvider_1 ? provider_2 : undefined,\n                                            networkId: returnedNetworkId,\n                                            account: returnedAccount\n                                        },\n                                        type: 'UPDATE_NETWORK_ID_AND_ACCOUNT'\n                                    });\n                                }\n                            })];\n                    case 3:\n                        _g.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_4 = _g.sent();\n                        setError(error_4);\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    function web3ReactErrorHandler(error, preserveConnector) {\n        if (preserveConnector === void 0) { preserveConnector = true; }\n        setError(error, { preserveConnector: preserveConnector });\n    }\n    function web3ReactResetHandler() {\n        unsetConnector();\n    }\n    react_1.useEffect(function () {\n        if (activeConnector) {\n            activeConnector.on('_web3ReactUpdate', web3ReactUpdateHandler);\n            activeConnector.on('_web3ReactError', web3ReactErrorHandler);\n            activeConnector.on('_web3ReactReset', web3ReactResetHandler);\n        }\n        return function () {\n            if (activeConnector) {\n                activeConnector.removeListener('_web3ReactUpdate', web3ReactUpdateHandler);\n                activeConnector.removeListener('_web3ReactError', web3ReactErrorHandler);\n                activeConnector.removeListener('_web3ReactReset', web3ReactResetHandler);\n            }\n        };\n    });\n    return {\n        web3Initialized: web3Initialized,\n        web3State: web3State,\n        connector: activeConnector,\n        setConnector: setConnector,\n        setFirstValidConnector: setFirstValidConnector,\n        unsetConnector: unsetConnector,\n        setError: setError\n    };\n}\nexports.default = useWeb3Manager;\n//# sourceMappingURL=manager.js.map"]},"metadata":{},"sourceType":"script"}