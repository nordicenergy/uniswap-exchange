{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/workspace/uniswap-exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/uniswap-exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warn: 3,\n  error: 4,\n  off: 5\n};\nvar LogLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nvar _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    var missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nvar _normalizeError = _checkNormalize();\n\nexport var Logger =\n/*#__PURE__*/\nfunction () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _createClass(Logger, [{\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel];\n\n      if (level == null) {\n        this.warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n\n      LogLevel = level;\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      if (LogLevel > LogLevels[logLevel]) {\n        return;\n      }\n\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      if (_censorErrors) {\n        return new Error(\"unknown error\");\n      }\n\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n\n      if (!params) {\n        params = {};\n      }\n\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        try {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"version=\" + this.version);\n      var reason = message;\n\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      } // @TODO: Any??\n\n\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (message == null) {\n        message = \"platform missing String.prototype.normalize\";\n      }\n\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n\n      if (message == null) {\n        message = \"value not safe\";\n      }\n\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version);\n      }\n\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }]);\n\n  return Logger;\n}();\nLogger.errors = {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  UNKNOWN_ERROR: \"UNKNOWN_ERROR\",\n  // Not Implemented\n  NOT_IMPLEMENTED: \"NOT_IMPLEMENTED\",\n  // Unsupported Operation\n  //   - operation\n  UNSUPPORTED_OPERATION: \"UNSUPPORTED_OPERATION\",\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  NETWORK_ERROR: \"NETWORK_ERROR\",\n  // Some sort of bad response from the server\n  SERVER_ERROR: \"SERVER_ERROR\",\n  // Timeout\n  TIMEOUT: \"TIMEOUT\",\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  BUFFER_OVERRUN: \"BUFFER_OVERRUN\",\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  NUMERIC_FAULT: \"NUMERIC_FAULT\",\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  MISSING_NEW: \"MISSING_NEW\",\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  INVALID_ARGUMENT: \"INVALID_ARGUMENT\",\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  MISSING_ARGUMENT: \"MISSING_ARGUMENT\",\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  UNEXPECTED_ARGUMENT: \"UNEXPECTED_ARGUMENT\",\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  CALL_EXCEPTION: \"CALL_EXCEPTION\",\n  // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  INSUFFICIENT_FUNDS: \"INSUFFICIENT_FUNDS\",\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  NONCE_EXPIRED: \"NONCE_EXPIRED\",\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  REPLACEMENT_UNDERPRICED: \"REPLACEMENT_UNDERPRICED\",\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  UNPREDICTABLE_GAS_LIMIT: \"UNPREDICTABLE_GAS_LIMIT\"\n};\nLogger.levels = {\n  DEBUG: \"DEBUG\",\n  INFO: \"INFO\",\n  WARNING: \"WARNING\",\n  ERROR: \"ERROR\",\n  OFF: \"OFF\"\n};","map":{"version":3,"sources":["/workspace/uniswap-exchange/node_modules/@ethersproject/logger/lib.esm/index.js"],"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warn","error","off","LogLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","Logger","Object","defineProperty","enumerable","value","writable","logLevel","level","args","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","JSON","stringify","toString","reason","makeError","name","throwError","INVALID_ARGUMENT","argument","UNSUPPORTED_OPERATION","operation","NUMERIC_FAULT","fault","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","MISSING_NEW","censorship","permanent","globalLogger","NOT_IMPLEMENTED","NETWORK_ERROR","SERVER_ERROR","TIMEOUT","BUFFER_OVERRUN","CALL_EXCEPTION","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","ERROR","OFF"],"mappings":"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","sourcesContent":["\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warn: 3, error: 4, off: 5 };\nlet LogLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    setLogLevel(logLevel) {\n        const level = LogLevels[logLevel];\n        if (level == null) {\n            this.warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        LogLevel = level;\n    }\n    _log(logLevel, args) {\n        if (LogLevel > LogLevels[logLevel]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        if (_censorErrors) {\n            return new Error(\"unknown error\");\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            try {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(\"version=\" + this.version);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n}\nLogger.errors = {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    UNKNOWN_ERROR: \"UNKNOWN_ERROR\",\n    // Not Implemented\n    NOT_IMPLEMENTED: \"NOT_IMPLEMENTED\",\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION: \"UNSUPPORTED_OPERATION\",\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    NETWORK_ERROR: \"NETWORK_ERROR\",\n    // Some sort of bad response from the server\n    SERVER_ERROR: \"SERVER_ERROR\",\n    // Timeout\n    TIMEOUT: \"TIMEOUT\",\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    BUFFER_OVERRUN: \"BUFFER_OVERRUN\",\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT: \"NUMERIC_FAULT\",\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW: \"MISSING_NEW\",\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT: \"INVALID_ARGUMENT\",\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT: \"MISSING_ARGUMENT\",\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT: \"UNEXPECTED_ARGUMENT\",\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION: \"CALL_EXCEPTION\",\n    // Insufficien funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS: \"INSUFFICIENT_FUNDS\",\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED: \"NONCE_EXPIRED\",\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED: \"REPLACEMENT_UNDERPRICED\",\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT: \"UNPREDICTABLE_GAS_LIMIT\",\n};\nLogger.levels = {\n    DEBUG: \"DEBUG\",\n    INFO: \"INFO\",\n    WARNING: \"WARNING\",\n    ERROR: \"ERROR\",\n    OFF: \"OFF\"\n};\n"]},"metadata":{},"sourceType":"module"}