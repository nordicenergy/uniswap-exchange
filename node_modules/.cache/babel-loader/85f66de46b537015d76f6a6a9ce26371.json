{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _assertThisInitialized from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _getPrototypeOf from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _get from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/get\";import _inherits from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/inherits\";import{Connectors}from'web3-react';var Connector=Connectors.Connector,ErrorCodeMixin=Connectors.ErrorCodeMixin;var InjectedConnectorErrorCodes=['ETHEREUM_ACCESS_DENIED','NO_WEB3','UNLOCK_REQUIRED'];var InjectedConnector=/*#__PURE__*/function(_ErrorCodeMixin){_inherits(InjectedConnector,_ErrorCodeMixin);function InjectedConnector(){var _this;var args=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,InjectedConnector);_this=_possibleConstructorReturn(this,_getPrototypeOf(InjectedConnector).call(this,args));_this.runOnDeactivation=[];_this.networkChangedHandler=_this.networkChangedHandler.bind(_assertThisInitialized(_this));_this.accountsChangedHandler=_this.accountsChangedHandler.bind(_assertThisInitialized(_this));var _window=window,ethereum=_window.ethereum;if(ethereum&&ethereum.isMetaMask){ethereum.autoRefreshOnNetworkChange=false;}return _this;}_createClass(InjectedConnector,[{key:\"onActivation\",value:function(){var _onActivation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this2=this;var _window2,ethereum,web3,noWeb3Error;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window2=window,ethereum=_window2.ethereum,web3=_window2.web3;if(!ethereum){_context.next=7;break;}_context.next=4;return ethereum.enable().catch(function(error){var deniedAccessError=Error(error);deniedAccessError.code=InjectedConnector.errorCodes.ETHEREUM_ACCESS_DENIED;throw deniedAccessError;});case 4:// initialize event listeners\nif(ethereum.on){ethereum.on('networkChanged',this.networkChangedHandler);ethereum.on('accountsChanged',this.accountsChangedHandler);this.runOnDeactivation.push(function(){if(ethereum.removeListener){ethereum.removeListener('networkChanged',_this2.networkChangedHandler);ethereum.removeListener('accountsChanged',_this2.accountsChangedHandler);}});}_context.next=14;break;case 7:if(!web3){_context.next=11;break;}console.warn('Your web3 provider is outdated, please upgrade to a modern provider.');_context.next=14;break;case 11:noWeb3Error=Error('Your browser is not equipped with web3 capabilities.');noWeb3Error.code=InjectedConnector.errorCodes.NO_WEB3;throw noWeb3Error;case 14:case\"end\":return _context.stop();}}},_callee,this);}));function onActivation(){return _onActivation.apply(this,arguments);}return onActivation;}()},{key:\"getProvider\",value:function(){var _getProvider=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window3,ethereum,web3;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window3=window,ethereum=_window3.ethereum,web3=_window3.web3;return _context2.abrupt(\"return\",ethereum||web3.currentProvider);case 2:case\"end\":return _context2.stop();}}},_callee2);}));function getProvider(){return _getProvider.apply(this,arguments);}return getProvider;}()},{key:\"getAccount\",value:function(){var _getAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(provider){var account,unlockRequiredError;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _get(_getPrototypeOf(InjectedConnector.prototype),\"getAccount\",this).call(this,provider);case 2:account=_context3.sent;if(!(account===null)){_context3.next=7;break;}unlockRequiredError=Error('Ethereum account locked.');unlockRequiredError.code=InjectedConnector.errorCodes.UNLOCK_REQUIRED;throw unlockRequiredError;case 7:return _context3.abrupt(\"return\",account);case 8:case\"end\":return _context3.stop();}}},_callee3,this);}));function getAccount(_x){return _getAccount.apply(this,arguments);}return getAccount;}()},{key:\"onDeactivation\",value:function onDeactivation(){this.runOnDeactivation.forEach(function(runner){return runner();});this.runOnDeactivation=[];}// event handlers\n},{key:\"networkChangedHandler\",value:function networkChangedHandler(networkId){var networkIdNumber=Number(networkId);try{_get(_getPrototypeOf(InjectedConnector.prototype),\"_validateNetworkId\",this).call(this,networkIdNumber);_get(_getPrototypeOf(InjectedConnector.prototype),\"_web3ReactUpdateHandler\",this).call(this,{updateNetworkId:true,networkId:networkIdNumber});}catch(error){_get(_getPrototypeOf(InjectedConnector.prototype),\"_web3ReactErrorHandler\",this).call(this,error);}}},{key:\"accountsChangedHandler\",value:function accountsChangedHandler(accounts){if(!accounts[0]){var unlockRequiredError=Error('Ethereum account locked.');unlockRequiredError.code=InjectedConnector.errorCodes.UNLOCK_REQUIRED;_get(_getPrototypeOf(InjectedConnector.prototype),\"_web3ReactErrorHandler\",this).call(this,unlockRequiredError);}else{_get(_getPrototypeOf(InjectedConnector.prototype),\"_web3ReactUpdateHandler\",this).call(this,{updateAccount:true,account:accounts[0]});}}}]);return InjectedConnector;}(ErrorCodeMixin(Connector,InjectedConnectorErrorCodes));export{InjectedConnector as default};","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/InjectedConnector.js"],"names":["Connectors","Connector","ErrorCodeMixin","InjectedConnectorErrorCodes","InjectedConnector","args","runOnDeactivation","networkChangedHandler","bind","accountsChangedHandler","window","ethereum","isMetaMask","autoRefreshOnNetworkChange","web3","enable","catch","error","deniedAccessError","Error","code","errorCodes","ETHEREUM_ACCESS_DENIED","on","push","removeListener","console","warn","noWeb3Error","NO_WEB3","currentProvider","provider","account","unlockRequiredError","UNLOCK_REQUIRED","forEach","runner","networkId","networkIdNumber","Number","updateNetworkId","accounts","updateAccount"],"mappings":"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","sourcesContent":["import { Connectors } from 'web3-react'\nconst { Connector, ErrorCodeMixin } = Connectors\n\nconst InjectedConnectorErrorCodes = ['ETHEREUM_ACCESS_DENIED', 'NO_WEB3', 'UNLOCK_REQUIRED']\nexport default class InjectedConnector extends ErrorCodeMixin(Connector, InjectedConnectorErrorCodes) {\n  constructor(args = {}) {\n    super(args)\n    this.runOnDeactivation = []\n\n    this.networkChangedHandler = this.networkChangedHandler.bind(this)\n    this.accountsChangedHandler = this.accountsChangedHandler.bind(this)\n\n    const { ethereum } = window\n    if (ethereum && ethereum.isMetaMask) {\n      ethereum.autoRefreshOnNetworkChange = false\n    }\n  }\n\n  async onActivation() {\n    const { ethereum, web3 } = window\n\n    if (ethereum) {\n      await ethereum.enable().catch(error => {\n        const deniedAccessError = Error(error)\n        deniedAccessError.code = InjectedConnector.errorCodes.ETHEREUM_ACCESS_DENIED\n        throw deniedAccessError\n      })\n\n      // initialize event listeners\n      if (ethereum.on) {\n        ethereum.on('networkChanged', this.networkChangedHandler)\n        ethereum.on('accountsChanged', this.accountsChangedHandler)\n\n        this.runOnDeactivation.push(() => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('networkChanged', this.networkChangedHandler)\n            ethereum.removeListener('accountsChanged', this.accountsChangedHandler)\n          }\n        })\n      }\n    } else if (web3) {\n      console.warn('Your web3 provider is outdated, please upgrade to a modern provider.')\n    } else {\n      const noWeb3Error = Error('Your browser is not equipped with web3 capabilities.')\n      noWeb3Error.code = InjectedConnector.errorCodes.NO_WEB3\n      throw noWeb3Error\n    }\n  }\n\n  async getProvider() {\n    const { ethereum, web3 } = window\n    return ethereum || web3.currentProvider\n  }\n\n  async getAccount(provider) {\n    const account = await super.getAccount(provider)\n\n    if (account === null) {\n      const unlockRequiredError = Error('Ethereum account locked.')\n      unlockRequiredError.code = InjectedConnector.errorCodes.UNLOCK_REQUIRED\n      throw unlockRequiredError\n    }\n\n    return account\n  }\n\n  onDeactivation() {\n    this.runOnDeactivation.forEach(runner => runner())\n    this.runOnDeactivation = []\n  }\n\n  // event handlers\n  networkChangedHandler(networkId) {\n    const networkIdNumber = Number(networkId)\n\n    try {\n      super._validateNetworkId(networkIdNumber)\n\n      super._web3ReactUpdateHandler({\n        updateNetworkId: true,\n        networkId: networkIdNumber\n      })\n    } catch (error) {\n      super._web3ReactErrorHandler(error)\n    }\n  }\n\n  accountsChangedHandler(accounts) {\n    if (!accounts[0]) {\n      const unlockRequiredError = Error('Ethereum account locked.')\n      unlockRequiredError.code = InjectedConnector.errorCodes.UNLOCK_REQUIRED\n      super._web3ReactErrorHandler(unlockRequiredError)\n    } else {\n      super._web3ReactUpdateHandler({\n        updateAccount: true,\n        account: accounts[0]\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}