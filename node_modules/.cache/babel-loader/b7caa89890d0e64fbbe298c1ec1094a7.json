{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar EthereumTx = require(\"ethereumjs-tx\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"../types\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with the supplied Ethereum private key.\n */\n\n\nvar PrivateKeyWalletSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(PrivateKeyWalletSubprovider, _super);\n  /**\n   * Instantiates a PrivateKeyWalletSubprovider.\n   * @param privateKey The corresponding private key to an Ethereum address\n   * @return PrivateKeyWalletSubprovider instance\n   */\n\n\n  function PrivateKeyWalletSubprovider(privateKey) {\n    var _this = this;\n\n    assert_1.assert.isString('privateKey', privateKey);\n    _this = _super.call(this) || this;\n    _this._privateKeyBuffer = Buffer.from(privateKey, 'hex');\n    _this._address = \"0x\" + ethUtil.privateToAddress(_this._privateKeyBuffer).toString('hex');\n    return _this;\n  }\n  /**\n   * Retrieve the account associated with the supplied private key.\n   * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n   * via your providerEngine instance.\n   * @return An array of accounts\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.getAccountsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , [this._address]];\n      });\n    });\n  };\n  /**\n   * Sign a transaction with the private key. If you've added this Subprovider to your\n   * app's provider, you can simply send an `eth_sendTransaction` JSON RPC request, and\n   * this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tx, rawTx;\n      return __generator(this, function (_a) {\n        PrivateKeyWalletSubprovider._validateTxParams(txParams);\n\n        if (txParams.from !== undefined && txParams.from.toLowerCase() !== this._address.toLowerCase()) {\n          throw new Error(\"Requested to sign transaction with address: \" + txParams.from + \", instantiated with address: \" + this._address);\n        }\n\n        tx = new EthereumTx(txParams);\n        tx.sign(this._privateKeyBuffer);\n        rawTx = \"0x\" + tx.serialize().toString('hex');\n        return [2\n        /*return*/\n        , rawTx];\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing address will be calculated from the private key.\n   * The address must be provided it must match the address calculated from the private key.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n   * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataBuff, msgHashBuff, sig, rpcSig;\n      return __generator(this, function (_a) {\n        if (data === undefined) {\n          throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n        }\n\n        assert_1.assert.isHexString('data', data);\n        assert_1.assert.isETHAddressHex('address', address);\n\n        if (address !== this._address) {\n          throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n        }\n\n        dataBuff = ethUtil.toBuffer(data);\n        msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n        sig = ethUtil.ecsign(msgHashBuff, this._privateKeyBuffer);\n        rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n        return [2\n        /*return*/\n        , rpcSig];\n      });\n    });\n  };\n  /**\n   * Sign an EIP712 Typed Data message. The signing address will be calculated from the private key.\n   * The address must be provided it must match the address calculated from the private key.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n   * JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataBuff, sig, rpcSig;\n      return __generator(this, function (_a) {\n        if (typedData === undefined) {\n          throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignTypedData);\n        }\n\n        assert_1.assert.isETHAddressHex('address', address);\n\n        if (address !== this._address) {\n          throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n        }\n\n        dataBuff = utils_1.signTypedDataUtils.generateTypedDataHash(typedData);\n        sig = ethUtil.ecsign(dataBuff, this._privateKeyBuffer);\n        rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n        return [2\n        /*return*/\n        , rpcSig];\n      });\n    });\n  };\n\n  return PrivateKeyWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.PrivateKeyWalletSubprovider = PrivateKeyWalletSubprovider;","map":{"version":3,"sources":["../../../src/subproviders/private_key_wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"@0x/assert\");\nvar utils_1 = require(\"@0x/utils\");\nvar EthereumTx = require(\"ethereumjs-tx\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar types_1 = require(\"../types\");\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with the supplied Ethereum private key.\n */\nvar PrivateKeyWalletSubprovider = /** @class */ (function (_super) {\n    __extends(PrivateKeyWalletSubprovider, _super);\n    /**\n     * Instantiates a PrivateKeyWalletSubprovider.\n     * @param privateKey The corresponding private key to an Ethereum address\n     * @return PrivateKeyWalletSubprovider instance\n     */\n    function PrivateKeyWalletSubprovider(privateKey) {\n        var _this = this;\n        assert_1.assert.isString('privateKey', privateKey);\n        _this = _super.call(this) || this;\n        _this._privateKeyBuffer = Buffer.from(privateKey, 'hex');\n        _this._address = \"0x\" + ethUtil.privateToAddress(_this._privateKeyBuffer).toString('hex');\n        return _this;\n    }\n    /**\n     * Retrieve the account associated with the supplied private key.\n     * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n     * via your providerEngine instance.\n     * @return An array of accounts\n     */\n    PrivateKeyWalletSubprovider.prototype.getAccountsAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, [this._address]];\n            });\n        });\n    };\n    /**\n     * Sign a transaction with the private key. If you've added this Subprovider to your\n     * app's provider, you can simply send an `eth_sendTransaction` JSON RPC request, and\n     * this method will be called auto-magically. If you are not using this via a ProviderEngine\n     * instance, you can call it directly.\n     * @param txParams Parameters of the transaction to sign\n     * @return Signed transaction hex string\n     */\n    PrivateKeyWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, rawTx;\n            return __generator(this, function (_a) {\n                PrivateKeyWalletSubprovider._validateTxParams(txParams);\n                if (txParams.from !== undefined && txParams.from.toLowerCase() !== this._address.toLowerCase()) {\n                    throw new Error(\"Requested to sign transaction with address: \" + txParams.from + \", instantiated with address: \" + this._address);\n                }\n                tx = new EthereumTx(txParams);\n                tx.sign(this._privateKeyBuffer);\n                rawTx = \"0x\" + tx.serialize().toString('hex');\n                return [2 /*return*/, rawTx];\n            });\n        });\n    };\n    /**\n     * Sign a personal Ethereum signed message. The signing address will be calculated from the private key.\n     * The address must be provided it must match the address calculated from the private key.\n     * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n     * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param data Hex string message to sign\n     * @param address Address of the account to sign with\n     * @return Signature hex string (order: rsv)\n     */\n    PrivateKeyWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var dataBuff, msgHashBuff, sig, rpcSig;\n            return __generator(this, function (_a) {\n                if (data === undefined) {\n                    throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n                }\n                assert_1.assert.isHexString('data', data);\n                assert_1.assert.isETHAddressHex('address', address);\n                if (address !== this._address) {\n                    throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n                }\n                dataBuff = ethUtil.toBuffer(data);\n                msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n                sig = ethUtil.ecsign(msgHashBuff, this._privateKeyBuffer);\n                rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n                return [2 /*return*/, rpcSig];\n            });\n        });\n    };\n    /**\n     * Sign an EIP712 Typed Data message. The signing address will be calculated from the private key.\n     * The address must be provided it must match the address calculated from the private key.\n     * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n     * JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param address Address of the account to sign with\n     * @param data the typed data object\n     * @return Signature hex string (order: rsv)\n     */\n    PrivateKeyWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var dataBuff, sig, rpcSig;\n            return __generator(this, function (_a) {\n                if (typedData === undefined) {\n                    throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignTypedData);\n                }\n                assert_1.assert.isETHAddressHex('address', address);\n                if (address !== this._address) {\n                    throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n                }\n                dataBuff = utils_1.signTypedDataUtils.generateTypedDataHash(typedData);\n                sig = ethUtil.ecsign(dataBuff, this._privateKeyBuffer);\n                rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n                return [2 /*return*/, rpcSig];\n            });\n        });\n    };\n    return PrivateKeyWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider));\nexports.PrivateKeyWalletSubprovider = PrivateKeyWalletSubprovider;\n//# sourceMappingURL=private_key_wallet.js.map"]},"metadata":{},"sourceType":"script"}