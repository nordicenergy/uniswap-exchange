{"ast":null,"code":"var _jsxFileName = \"/workspace/uniswap-exchange/src/contexts/Balances.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useRef, useState } from \"react\";\nimport { BigNumber } from \"@uniswap/sdk\";\nimport { useWeb3React } from \"../hooks\";\nimport { safeAccess, isAddress, getEtherBalance, getTokenBalance } from \"../utils\";\nimport { useBlockNumber } from \"./Application\";\nimport { useTokenDetails, useAllTokenDetails } from \"./Tokens\";\nimport { getUSDPrice } from \"../utils/price\";\nconst UPDATE = \"UPDATE\";\nconst UPDATE_ALL_FOR_ACCOUNT = \"UPDATE_ALL_FOR_ACCOUNT\";\nconst UPDATE_ALL_FOR_EXCHANGES = \"UPDATE_ALL_FOR_EXCHANGES\";\nconst BalancesContext = createContext();\n\nfunction useBalancesContext() {\n  return useContext(BalancesContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      {\n        const {\n          networkId,\n          address,\n          tokenAddress,\n          value,\n          blockNumber\n        } = payload;\n        return { ...state,\n          [networkId]: { ...(safeAccess(state, [networkId]) || {}),\n            [address]: { ...(safeAccess(state, [networkId, address]) || {}),\n              [tokenAddress]: {\n                value,\n                blockNumber\n              }\n            }\n          }\n        };\n      }\n\n    case UPDATE_ALL_FOR_ACCOUNT:\n      {\n        const {\n          networkId,\n          address,\n          tokenAddresses,\n          values\n        } = payload;\n        return { ...state,\n          [networkId]: { ...(safeAccess(state, [networkId]) || {}),\n            [address]: { ...tokenAddresses.reduce((accumulator, currentValue, i) => {\n                accumulator[currentValue] = {\n                  value: values[i]\n                };\n                return accumulator;\n              }, {}),\n              ...(safeAccess(state, [networkId, address]) || {})\n            }\n          }\n        };\n      }\n\n    case UPDATE_ALL_FOR_EXCHANGES:\n      {\n        const {\n          networkId,\n          exchangeAddresses,\n          tokenAddresses,\n          values\n        } = payload;\n        return { ...state,\n          [networkId]: { ...(safeAccess(state, [networkId]) || {}),\n            ...exchangeAddresses.reduce((accumulator, currentValue, i) => {\n              accumulator[currentValue] = { ...safeAccess(state, [networkId, currentValue]),\n                [tokenAddresses[i]]: {\n                  value: values[i]\n                }\n              };\n              return accumulator;\n            }, {})\n          }\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in BalancesContext reducer: '${type}'.`);\n      }\n  }\n}\n\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, {});\n  const update = useCallback((networkId, address, tokenAddress, value, blockNumber) => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        networkId,\n        address,\n        tokenAddress,\n        value,\n        blockNumber\n      }\n    });\n  }, []);\n  const updateAllForAccount = useCallback((networkId, address, tokenAddresses, values) => {\n    dispatch({\n      type: UPDATE_ALL_FOR_ACCOUNT,\n      payload: {\n        networkId,\n        address,\n        tokenAddresses,\n        values\n      }\n    });\n  }, []);\n  const updateAllForExchanges = useCallback((networkId, exchangeAddresses, tokenAddresses, values) => {\n    dispatch({\n      type: UPDATE_ALL_FOR_EXCHANGES,\n      payload: {\n        networkId,\n        exchangeAddresses,\n        tokenAddresses,\n        values\n      }\n    });\n  }, []);\n  return React.createElement(BalancesContext.Provider, {\n    value: useMemo(() => [state, {\n      update,\n      updateAllForAccount,\n      updateAllForExchanges\n    }], [state, update, updateAllForAccount, updateAllForExchanges]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, children);\n}\nconst STAGGER_TIME = 2500;\nexport function Updater() {\n  const {\n    library,\n    chainId,\n    account\n  } = useWeb3React();\n  const allTokens = useAllTokenDetails();\n  const [state, {\n    updateAllForAccount,\n    updateAllForExchanges\n  }] = useBalancesContext();\n  const stateRef = useRef(state);\n  stateRef.current = state;\n  useEffect(() => {\n    const getData = async () => {\n      if (chainId && library && account) {\n        // get 1 eth + all token balances for the account\n        Promise.all(Object.keys(allTokens).map(async tokenAddress => {\n          await new Promise(resolve => setTimeout(resolve, STAGGER_TIME * Math.random()));\n          const {\n            value: existingValue\n          } = safeAccess(stateRef.current, [chainId, account, tokenAddress]) || {};\n          return existingValue || (await (tokenAddress === \"ETH\" ? getEtherBalance(account, library).catch(() => null) : getTokenBalance(tokenAddress, account, library).catch(() => null)));\n        })).then(balances => {\n          updateAllForAccount(chainId, account, Object.keys(allTokens), balances);\n        });\n        const allTokensWithAnExchange = Object.keys(allTokens).filter(tokenAddress => tokenAddress !== \"ETH\"); // get all eth balances for all exchanges\n\n        Promise.all(allTokensWithAnExchange.map(async tokenAddress => {\n          await new Promise(resolve => setTimeout(resolve, STAGGER_TIME * Math.random()));\n          const exchangeAddress = allTokens[tokenAddress].exchangeAddress;\n          const {\n            value: existingValue\n          } = safeAccess(stateRef.current, [chainId, exchangeAddress, \"ETH\"]) || {};\n          return existingValue || (await getEtherBalance(exchangeAddress, library).catch(() => null));\n        })).then(ethBalances => {\n          updateAllForExchanges(chainId, allTokensWithAnExchange.map(tokenAddress => allTokens[tokenAddress].exchangeAddress), Array(allTokensWithAnExchange.length).fill(\"ETH\"), ethBalances);\n        }); // get all token balances for all exchanges\n\n        Promise.all(allTokensWithAnExchange.map(async tokenAddress => {\n          await new Promise(resolve => setTimeout(resolve, STAGGER_TIME * Math.random()));\n          const exchangeAddress = allTokens[tokenAddress].exchangeAddress;\n          const {\n            value: existingValue\n          } = safeAccess(stateRef.current, [chainId, exchangeAddress, tokenAddress]) || {};\n          return existingValue || (await getTokenBalance(tokenAddress, exchangeAddress, library).catch(() => null));\n        })).then(tokenBalances => {\n          updateAllForExchanges(chainId, allTokensWithAnExchange.map(tokenAddress => allTokens[tokenAddress].exchangeAddress), allTokensWithAnExchange.map(tokenAddress => tokenAddress), tokenBalances);\n        });\n      }\n    };\n\n    getData();\n  }, [chainId, library, account, allTokens, updateAllForAccount, updateAllForExchanges]);\n  return null;\n}\nexport function useAllBalances() {\n  const {\n    chainId\n  } = useWeb3React();\n  const [state] = useBalancesContext();\n  const balances = safeAccess(state, [chainId]) || {};\n  return balances;\n}\nexport function useAddressBalance(address, tokenAddress) {\n  const {\n    library,\n    chainId\n  } = useWeb3React();\n  const globalBlockNumber = useBlockNumber();\n  const [state, {\n    update\n  }] = useBalancesContext();\n  const {\n    value,\n    blockNumber\n  } = safeAccess(state, [chainId, address, tokenAddress]) || {};\n  useEffect(() => {\n    if (isAddress(address) && (tokenAddress === \"ETH\" || isAddress(tokenAddress)) && (value === undefined || blockNumber !== globalBlockNumber) && (chainId || chainId === 0) && library) {\n      let stale = false;\n      (tokenAddress === \"ETH\" ? getEtherBalance(address, library) : getTokenBalance(tokenAddress, address, library)).then(value => {\n        if (!stale) {\n          update(chainId, address, tokenAddress, value, globalBlockNumber);\n        }\n      }).catch(() => {\n        if (!stale) {\n          update(chainId, address, tokenAddress, null, globalBlockNumber);\n        }\n      });\n      return () => {\n        stale = true;\n      };\n    }\n  }, [address, tokenAddress, value, blockNumber, globalBlockNumber, chainId, library, update]);\n  return value;\n}\nexport function useExchangeReserves(tokenAddress) {\n  const {\n    exchangeAddress\n  } = useTokenDetails(tokenAddress);\n  const reserveETH = useAddressBalance(exchangeAddress, \"ETH\");\n  const reserveToken = useAddressBalance(exchangeAddress, tokenAddress);\n  return {\n    reserveETH,\n    reserveToken\n  };\n}\n\nconst buildReserveObject = (chainId, tokenAddress, ethReserveAmount, tokenReserveAmount, decimals) => ({\n  token: {\n    chainId,\n    address: tokenAddress,\n    decimals\n  },\n  ethReserve: {\n    token: {\n      chainId,\n      decimals: 18\n    },\n    amount: ethReserveAmount\n  },\n  tokenReserve: {\n    token: {\n      chainId,\n      address: tokenAddress,\n      decimals\n    },\n    amount: tokenReserveAmount\n  }\n});\n\nconst daiTokenAddress = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\nconst daiExchangeAddress = \"0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667\";\nconst usdcTokenAddress = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst usdcExchangeAddress = \"0x97deC872013f6B5fB443861090ad931542878126\";\nconst tusdTokenAddress = \"0x0000000000085d4780B73119b644AE5ecd22b376\";\nconst tusdExchangeAddress = \"0x5048b9d01097498Fd72F3F14bC9Bc74A5aAc8fA7\";\nconst nescTokenAddress = \"0x97D8383CfC757E4844d30bcd5f06F2d153F245F7\";\nconst nescExchangeAddress = \"0x97D8383CfC757E4844d30bcd5f06F2d153F245F7\";\nexport function useETHPriceInUSD() {\n  const {\n    chainId\n  } = useWeb3React();\n  let daiReserveETH = useAddressBalance(daiExchangeAddress, \"ETH\");\n  let daiReserveToken = useAddressBalance(daiExchangeAddress, daiTokenAddress);\n  let usdcReserveETH = useAddressBalance(usdcExchangeAddress, \"ETH\");\n  let usdcReserveToken = useAddressBalance(usdcExchangeAddress, usdcTokenAddress);\n  let tusdReserveETH = useAddressBalance(tusdExchangeAddress, \"ETH\");\n  let tusdReserveToken = useAddressBalance(tusdExchangeAddress, nescTokenAddress);\n  let nescReserveETH = useAddressBalance(nescExchangeAddress, \"ETH\");\n  let nescReserveToken = useAddressBalance(nescExchangeAddress, nescTokenAddress);\n  const [price, setPrice] = useState();\n  useEffect(() => {\n    if (daiReserveETH && daiReserveToken && usdcReserveETH && usdcReserveToken && nescReserveETH && nescReserveToken && tusdReserveETH && tusdReserveToken) {\n      const daiReservesObject = buildReserveObject(chainId, daiTokenAddress, new BigNumber(daiReserveETH.toString()), new BigNumber(daiReserveToken.toString()), 18);\n      const tusdReservesObject = buildReserveObject(chainId, tusdTokenAddress, new BigNumber(tusdReserveETH.toString()), new BigNumber(tusdReserveToken.toString()), 18);\n      const nescReservesObject = buildReserveObject(chainId, nescTokenAddress, new BigNumber(nescReserveETH.toString()), new BigNumber(nescReserveToken.toString()), 18);\n      const usdcReservesObject = buildReserveObject(chainId, usdcTokenAddress, new BigNumber(usdcReserveETH.toString()), new BigNumber(usdcReserveToken.toString()), 6);\n      const stablecoinReserves = [daiReservesObject, usdcReservesObject, nescReservesObject, tusdReservesObject];\n\n      try {\n        setPrice(getUSDPrice(stablecoinReserves));\n      } catch {\n        setPrice(null);\n      }\n    }\n  }, [daiReserveETH, daiReserveToken, usdcReserveETH, usdcReserveToken, nescReserveETH, nescReserveToken, tusdReserveETH, tusdReserveToken, chainId]);\n  return price;\n}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/contexts/Balances.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","useRef","useState","BigNumber","useWeb3React","safeAccess","isAddress","getEtherBalance","getTokenBalance","useBlockNumber","useTokenDetails","useAllTokenDetails","getUSDPrice","UPDATE","UPDATE_ALL_FOR_ACCOUNT","UPDATE_ALL_FOR_EXCHANGES","BalancesContext","useBalancesContext","reducer","state","type","payload","networkId","address","tokenAddress","value","blockNumber","tokenAddresses","values","reduce","accumulator","currentValue","i","exchangeAddresses","Error","Provider","children","dispatch","update","updateAllForAccount","updateAllForExchanges","STAGGER_TIME","Updater","library","chainId","account","allTokens","stateRef","current","getData","Promise","all","Object","keys","map","resolve","setTimeout","Math","random","existingValue","catch","then","balances","allTokensWithAnExchange","filter","exchangeAddress","ethBalances","Array","length","fill","tokenBalances","useAllBalances","useAddressBalance","globalBlockNumber","undefined","stale","useExchangeReserves","reserveETH","reserveToken","buildReserveObject","ethReserveAmount","tokenReserveAmount","decimals","token","ethReserve","amount","tokenReserve","daiTokenAddress","daiExchangeAddress","usdcTokenAddress","usdcExchangeAddress","tusdTokenAddress","tusdExchangeAddress","nescTokenAddress","nescExchangeAddress","useETHPriceInUSD","daiReserveETH","daiReserveToken","usdcReserveETH","usdcReserveToken","tusdReserveETH","tusdReserveToken","nescReserveETH","nescReserveToken","price","setPrice","daiReservesObject","toString","tusdReservesObject","nescReservesObject","usdcReservesObject","stablecoinReserves"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useReducer,\n  useMemo,\n  useCallback,\n  useEffect,\n  useRef,\n  useState\n} from \"react\";\nimport { BigNumber } from \"@uniswap/sdk\";\n\nimport { useWeb3React } from \"../hooks\";\nimport {\n  safeAccess,\n  isAddress,\n  getEtherBalance,\n  getTokenBalance\n} from \"../utils\";\nimport { useBlockNumber } from \"./Application\";\nimport { useTokenDetails, useAllTokenDetails } from \"./Tokens\";\nimport { getUSDPrice } from \"../utils/price\";\n\nconst UPDATE = \"UPDATE\";\nconst UPDATE_ALL_FOR_ACCOUNT = \"UPDATE_ALL_FOR_ACCOUNT\";\nconst UPDATE_ALL_FOR_EXCHANGES = \"UPDATE_ALL_FOR_EXCHANGES\";\n\nconst BalancesContext = createContext();\n\nfunction useBalancesContext() {\n  return useContext(BalancesContext);\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case UPDATE: {\n      const { networkId, address, tokenAddress, value, blockNumber } = payload;\n      return {\n        ...state,\n        [networkId]: {\n          ...(safeAccess(state, [networkId]) || {}),\n          [address]: {\n            ...(safeAccess(state, [networkId, address]) || {}),\n            [tokenAddress]: {\n              value,\n              blockNumber\n            }\n          }\n        }\n      };\n    }\n    case UPDATE_ALL_FOR_ACCOUNT: {\n      const { networkId, address, tokenAddresses, values } = payload;\n      return {\n        ...state,\n        [networkId]: {\n          ...(safeAccess(state, [networkId]) || {}),\n          [address]: {\n            ...tokenAddresses.reduce((accumulator, currentValue, i) => {\n              accumulator[currentValue] = { value: values[i] };\n              return accumulator;\n            }, {}),\n            ...(safeAccess(state, [networkId, address]) || {})\n          }\n        }\n      };\n    }\n    case UPDATE_ALL_FOR_EXCHANGES: {\n      const { networkId, exchangeAddresses, tokenAddresses, values } = payload;\n      return {\n        ...state,\n        [networkId]: {\n          ...(safeAccess(state, [networkId]) || {}),\n          ...exchangeAddresses.reduce((accumulator, currentValue, i) => {\n            accumulator[currentValue] = {\n              ...safeAccess(state, [networkId, currentValue]),\n              [tokenAddresses[i]]: {\n                value: values[i]\n              }\n            };\n            return accumulator;\n          }, {})\n        }\n      };\n    }\n    default: {\n      throw Error(\n        `Unexpected action type in BalancesContext reducer: '${type}'.`\n      );\n    }\n  }\n}\n\nexport default function Provider({ children }) {\n  const [state, dispatch] = useReducer(reducer, {});\n\n  const update = useCallback(\n    (networkId, address, tokenAddress, value, blockNumber) => {\n      dispatch({\n        type: UPDATE,\n        payload: { networkId, address, tokenAddress, value, blockNumber }\n      });\n    },\n    []\n  );\n\n  const updateAllForAccount = useCallback(\n    (networkId, address, tokenAddresses, values) => {\n      dispatch({\n        type: UPDATE_ALL_FOR_ACCOUNT,\n        payload: { networkId, address, tokenAddresses, values }\n      });\n    },\n    []\n  );\n\n  const updateAllForExchanges = useCallback(\n    (networkId, exchangeAddresses, tokenAddresses, values) => {\n      dispatch({\n        type: UPDATE_ALL_FOR_EXCHANGES,\n        payload: { networkId, exchangeAddresses, tokenAddresses, values }\n      });\n    },\n    []\n  );\n\n  return (\n    <BalancesContext.Provider\n      value={useMemo(\n        () => [state, { update, updateAllForAccount, updateAllForExchanges }],\n        [state, update, updateAllForAccount, updateAllForExchanges]\n      )}\n    >\n      {children}\n    </BalancesContext.Provider>\n  );\n}\n\nconst STAGGER_TIME = 2500;\nexport function Updater() {\n  const { library, chainId, account } = useWeb3React();\n\n  const allTokens = useAllTokenDetails();\n\n  const [\n    state,\n    { updateAllForAccount, updateAllForExchanges }\n  ] = useBalancesContext();\n  const stateRef = useRef(state);\n  stateRef.current = state;\n\n  useEffect(() => {\n    const getData = async () => {\n      if (chainId && library && account) {\n        // get 1 eth + all token balances for the account\n        Promise.all(\n          Object.keys(allTokens).map(async tokenAddress => {\n            await new Promise(resolve =>\n              setTimeout(resolve, STAGGER_TIME * Math.random())\n            );\n\n            const { value: existingValue } =\n              safeAccess(stateRef.current, [chainId, account, tokenAddress]) ||\n              {};\n            return (\n              existingValue ||\n              (await (tokenAddress === \"ETH\"\n                ? getEtherBalance(account, library).catch(() => null)\n                : getTokenBalance(tokenAddress, account, library).catch(\n                    () => null\n                  )))\n            );\n          })\n        ).then(balances => {\n          updateAllForAccount(\n            chainId,\n            account,\n            Object.keys(allTokens),\n            balances\n          );\n        });\n\n        const allTokensWithAnExchange = Object.keys(allTokens).filter(\n          tokenAddress => tokenAddress !== \"ETH\"\n        );\n        // get all eth balances for all exchanges\n        Promise.all(\n          allTokensWithAnExchange.map(async tokenAddress => {\n            await new Promise(resolve =>\n              setTimeout(resolve, STAGGER_TIME * Math.random())\n            );\n\n            const exchangeAddress = allTokens[tokenAddress].exchangeAddress;\n            const { value: existingValue } =\n              safeAccess(stateRef.current, [chainId, exchangeAddress, \"ETH\"]) ||\n              {};\n            return (\n              existingValue ||\n              (await getEtherBalance(exchangeAddress, library).catch(\n                () => null\n              ))\n            );\n          })\n        ).then(ethBalances => {\n          updateAllForExchanges(\n            chainId,\n            allTokensWithAnExchange.map(\n              tokenAddress => allTokens[tokenAddress].exchangeAddress\n            ),\n            Array(allTokensWithAnExchange.length).fill(\"ETH\"),\n            ethBalances\n          );\n        });\n\n        // get all token balances for all exchanges\n        Promise.all(\n          allTokensWithAnExchange.map(async tokenAddress => {\n            await new Promise(resolve =>\n              setTimeout(resolve, STAGGER_TIME * Math.random())\n            );\n\n            const exchangeAddress = allTokens[tokenAddress].exchangeAddress;\n            const { value: existingValue } =\n              safeAccess(stateRef.current, [\n                chainId,\n                exchangeAddress,\n                tokenAddress\n              ]) || {};\n            return (\n              existingValue ||\n              (await getTokenBalance(\n                tokenAddress,\n                exchangeAddress,\n                library\n              ).catch(() => null))\n            );\n          })\n        ).then(tokenBalances => {\n          updateAllForExchanges(\n            chainId,\n            allTokensWithAnExchange.map(\n              tokenAddress => allTokens[tokenAddress].exchangeAddress\n            ),\n            allTokensWithAnExchange.map(tokenAddress => tokenAddress),\n            tokenBalances\n          );\n        });\n      }\n    };\n\n    getData();\n  }, [\n    chainId,\n    library,\n    account,\n    allTokens,\n    updateAllForAccount,\n    updateAllForExchanges\n  ]);\n\n  return null;\n}\n\nexport function useAllBalances() {\n  const { chainId } = useWeb3React();\n  const [state] = useBalancesContext();\n  const balances = safeAccess(state, [chainId]) || {};\n  return balances;\n}\n\nexport function useAddressBalance(address, tokenAddress) {\n  const { library, chainId } = useWeb3React();\n\n  const globalBlockNumber = useBlockNumber();\n\n  const [state, { update }] = useBalancesContext();\n  const { value, blockNumber } =\n    safeAccess(state, [chainId, address, tokenAddress]) || {};\n\n  useEffect(() => {\n    if (\n      isAddress(address) &&\n      (tokenAddress === \"ETH\" || isAddress(tokenAddress)) &&\n      (value === undefined || blockNumber !== globalBlockNumber) &&\n      (chainId || chainId === 0) &&\n      library\n    ) {\n      let stale = false;\n      (tokenAddress === \"ETH\"\n        ? getEtherBalance(address, library)\n        : getTokenBalance(tokenAddress, address, library)\n      )\n        .then(value => {\n          if (!stale) {\n            update(chainId, address, tokenAddress, value, globalBlockNumber);\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            update(chainId, address, tokenAddress, null, globalBlockNumber);\n          }\n        });\n      return () => {\n        stale = true;\n      };\n    }\n  }, [\n    address,\n    tokenAddress,\n    value,\n    blockNumber,\n    globalBlockNumber,\n    chainId,\n    library,\n    update\n  ]);\n\n  return value;\n}\n\nexport function useExchangeReserves(tokenAddress) {\n  const { exchangeAddress } = useTokenDetails(tokenAddress);\n\n  const reserveETH = useAddressBalance(exchangeAddress, \"ETH\");\n  const reserveToken = useAddressBalance(exchangeAddress, tokenAddress);\n\n  return { reserveETH, reserveToken };\n}\n\nconst buildReserveObject = (\n  chainId,\n  tokenAddress,\n  ethReserveAmount,\n  tokenReserveAmount,\n  decimals\n) => ({\n  token: {\n    chainId,\n    address: tokenAddress,\n    decimals\n  },\n  ethReserve: {\n    token: {\n      chainId,\n      decimals: 18\n    },\n    amount: ethReserveAmount\n  },\n  tokenReserve: {\n    token: {\n      chainId,\n      address: tokenAddress,\n      decimals\n    },\n    amount: tokenReserveAmount\n  }\n});\nconst daiTokenAddress = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\nconst daiExchangeAddress = \"0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667\";\nconst usdcTokenAddress = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst usdcExchangeAddress = \"0x97deC872013f6B5fB443861090ad931542878126\";\nconst tusdTokenAddress = \"0x0000000000085d4780B73119b644AE5ecd22b376\";\nconst tusdExchangeAddress = \"0x5048b9d01097498Fd72F3F14bC9Bc74A5aAc8fA7\";\nconst nescTokenAddress = \"0x97D8383CfC757E4844d30bcd5f06F2d153F245F7\";\nconst nescExchangeAddress = \"0x97D8383CfC757E4844d30bcd5f06F2d153F245F7\";\nexport function useETHPriceInUSD() {\n  const { chainId } = useWeb3React();\n\n  let daiReserveETH = useAddressBalance(daiExchangeAddress, \"ETH\");\n  let daiReserveToken = useAddressBalance(daiExchangeAddress, daiTokenAddress);\n  let usdcReserveETH = useAddressBalance(usdcExchangeAddress, \"ETH\");\n  let usdcReserveToken = useAddressBalance(\n    usdcExchangeAddress,\n    usdcTokenAddress\n  );\n  let tusdReserveETH = useAddressBalance(tusdExchangeAddress, \"ETH\");\n  let tusdReserveToken = useAddressBalance(\n    tusdExchangeAddress,\n    nescTokenAddress\n  );\n  let nescReserveETH = useAddressBalance(nescExchangeAddress, \"ETH\");\n  let nescReserveToken = useAddressBalance(\n    nescExchangeAddress,\n    nescTokenAddress\n  );\n\n  const [price, setPrice] = useState();\n  useEffect(() => {\n    if (\n      daiReserveETH &&\n      daiReserveToken &&\n      usdcReserveETH &&\n      usdcReserveToken &&\n      nescReserveETH &&\n      nescReserveToken &&\n      tusdReserveETH &&\n      tusdReserveToken\n    ) {\n      const daiReservesObject = buildReserveObject(\n        chainId,\n        daiTokenAddress,\n        new BigNumber(daiReserveETH.toString()),\n        new BigNumber(daiReserveToken.toString()),\n        18\n      );\n      const tusdReservesObject = buildReserveObject(\n        chainId,\n        tusdTokenAddress,\n        new BigNumber(tusdReserveETH.toString()),\n        new BigNumber(tusdReserveToken.toString()),\n        18\n      );\n      const nescReservesObject = buildReserveObject(\n        chainId,\n        nescTokenAddress,\n        new BigNumber(nescReserveETH.toString()),\n        new BigNumber(nescReserveToken.toString()),\n        18\n      );\n      const usdcReservesObject = buildReserveObject(\n        chainId,\n        usdcTokenAddress,\n        new BigNumber(usdcReserveETH.toString()),\n        new BigNumber(usdcReserveToken.toString()),\n        6\n      );\n\n      const stablecoinReserves = [\n        daiReservesObject,\n        usdcReservesObject,\n        nescReservesObject,\n        tusdReservesObject\n      ];\n\n      try {\n        setPrice(getUSDPrice(stablecoinReserves));\n      } catch {\n        setPrice(null);\n      }\n    }\n  }, [\n    daiReserveETH,\n    daiReserveToken,\n    usdcReserveETH,\n    usdcReserveToken,\n    nescReserveETH,\n    nescReserveToken,\n    tusdReserveETH,\n    tusdReserveToken,\n    chainId\n  ]);\n\n  return price;\n}\n"]},"metadata":{},"sourceType":"module"}