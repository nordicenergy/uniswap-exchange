{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar bip39 = require(\"bip39\");\n\nvar HDNode = require(\"hdkey\");\n\nvar _ = require(\"lodash\");\n\nvar types_1 = require(\"../types\");\n\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n\nvar private_key_wallet_1 = require(\"./private_key_wallet\");\n\nvar DEFAULT_BASE_DERIVATION_PATH = \"44'/60'/0'/0\";\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with accounts derived from the supplied mnemonic.\n */\n\nvar MnemonicWalletSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(MnemonicWalletSubprovider, _super);\n  /**\n   * Instantiates a MnemonicWalletSubprovider. Defaults to baseDerivationPath set to `44'/60'/0'/0`.\n   * This is the default in TestRPC/Ganache, it can be overridden if desired.\n   * @param config Configuration for the mnemonic wallet, must contain the mnemonic\n   * @return MnemonicWalletSubprovider instance\n   */\n\n\n  function MnemonicWalletSubprovider(config) {\n    var _this = this;\n\n    assert_1.assert.isString('mnemonic', config.mnemonic);\n    var baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n    assert_1.assert.isString('baseDerivationPath', baseDerivationPath);\n    var addressSearchLimit = config.addressSearchLimit || DEFAULT_ADDRESS_SEARCH_LIMIT;\n    assert_1.assert.isNumber('addressSearchLimit', addressSearchLimit);\n    _this = _super.call(this) || this;\n    _this._mnemonic = config.mnemonic;\n    _this._baseDerivationPath = baseDerivationPath;\n    _this._addressSearchLimit = addressSearchLimit;\n    _this._derivedKeyInfo = _this._initialDerivedKeyInfo(_this._baseDerivationPath);\n    return _this;\n  }\n  /**\n   * Retrieve the set derivation path\n   * @returns derivation path\n   */\n\n\n  MnemonicWalletSubprovider.prototype.getPath = function () {\n    return this._baseDerivationPath;\n  };\n  /**\n   * Set a desired derivation path when computing the available user addresses\n   * @param baseDerivationPath The desired derivation path (e.g `44'/60'/0'`)\n   */\n\n\n  MnemonicWalletSubprovider.prototype.setPath = function (baseDerivationPath) {\n    this._baseDerivationPath = baseDerivationPath;\n    this._derivedKeyInfo = this._initialDerivedKeyInfo(this._baseDerivationPath);\n  };\n  /**\n   * Retrieve the accounts associated with the mnemonic.\n   * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n   * via your providerEngine instance.\n   * @param numberOfAccounts Number of accounts to retrieve (default: 10)\n   * @return An array of accounts\n   */\n\n\n  MnemonicWalletSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n    if (numberOfAccounts === void 0) {\n      numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var derivedKeys, accounts;\n      return __generator(this, function (_a) {\n        derivedKeys = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(this._derivedKeyInfo, numberOfAccounts);\n        accounts = _.map(derivedKeys, function (k) {\n          return k.address;\n        });\n        return [2\n        /*return*/\n        , accounts];\n      });\n    });\n  };\n  /**\n   * Signs a transaction with the account specificed by the `from` field in txParams.\n   * If you've added this Subprovider to your  app's provider, you can simply send\n   * an `eth_sendTransaction` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  MnemonicWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKeyWallet, signedTx;\n      return __generator(this, function (_a) {\n        if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) {\n          throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n        }\n\n        privateKeyWallet = this._privateKeyWalletForAddress(txParams.from);\n        signedTx = privateKeyWallet.signTransactionAsync(txParams);\n        return [2\n        /*return*/\n        , signedTx];\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing account will be the account\n   * associated with the provided address. If you've added the MnemonicWalletSubprovider to\n   * your app's provider, you can simply send an `eth_sign` or `personal_sign` JSON RPC request,\n   * and this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  MnemonicWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKeyWallet, sig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (data === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isHexString('data', data);\n            assert_1.assert.isETHAddressHex('address', address);\n            privateKeyWallet = this._privateKeyWalletForAddress(address);\n            return [4\n            /*yield*/\n            , privateKeyWallet.signPersonalMessageAsync(data, address)];\n\n          case 1:\n            sig = _a.sent();\n            return [2\n            /*return*/\n            , sig];\n        }\n      });\n    });\n  };\n  /**\n   * Sign an EIP712 Typed Data message. The signing account will be the account\n   * associated with the provided address. If you've added this MnemonicWalletSubprovider to\n   * your app's provider, you can simply send an `eth_signTypedData` JSON RPC request, and\n   * this method will be called auto-magically. If you are not using this via a ProviderEngine\n   *  instance, you can call it directly.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  MnemonicWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKeyWallet, sig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typedData === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isETHAddressHex('address', address);\n            privateKeyWallet = this._privateKeyWalletForAddress(address);\n            return [4\n            /*yield*/\n            , privateKeyWallet.signTypedDataAsync(address, typedData)];\n\n          case 1:\n            sig = _a.sent();\n            return [2\n            /*return*/\n            , sig];\n        }\n      });\n    });\n  };\n\n  MnemonicWalletSubprovider.prototype._privateKeyWalletForAddress = function (address) {\n    var derivedKeyInfo = this._findDerivedKeyInfoForAddress(address);\n\n    var privateKeyHex = derivedKeyInfo.hdKey.privateKey.toString('hex');\n    var privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKeyHex);\n    return privateKeyWallet;\n  };\n\n  MnemonicWalletSubprovider.prototype._findDerivedKeyInfoForAddress = function (address) {\n    var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, this._derivedKeyInfo, this._addressSearchLimit);\n\n    if (matchedDerivedKeyInfo === undefined) {\n      throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n    }\n\n    return matchedDerivedKeyInfo;\n  };\n\n  MnemonicWalletSubprovider.prototype._initialDerivedKeyInfo = function (baseDerivationPath) {\n    var seed = bip39.mnemonicToSeed(this._mnemonic);\n    var hdKey = HDNode.fromMasterSeed(seed); // Walk down to base derivation level (i.e m/44'/60'/0') and create an initial key at that level\n    // all children will then be walked relative (i.e m/0)\n\n    var parentKeyDerivationPath = \"m/\" + baseDerivationPath;\n    var parentHDKeyAtDerivationPath = hdKey.derive(parentKeyDerivationPath);\n    var address = wallet_utils_1.walletUtils.addressOfHDKey(parentHDKeyAtDerivationPath);\n    var derivedKeyInfo = {\n      address: address,\n      baseDerivationPath: baseDerivationPath,\n      derivationPath: parentKeyDerivationPath,\n      hdKey: parentHDKeyAtDerivationPath\n    };\n    return derivedKeyInfo;\n  };\n\n  return MnemonicWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.MnemonicWalletSubprovider = MnemonicWalletSubprovider;","map":{"version":3,"sources":["../../../src/subproviders/mnemonic_wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"@0x/assert\");\nvar utils_1 = require(\"@0x/utils\");\nvar bip39 = require(\"bip39\");\nvar HDNode = require(\"hdkey\");\nvar _ = require(\"lodash\");\nvar types_1 = require(\"../types\");\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\nvar private_key_wallet_1 = require(\"./private_key_wallet\");\nvar DEFAULT_BASE_DERIVATION_PATH = \"44'/60'/0'/0\";\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with accounts derived from the supplied mnemonic.\n */\nvar MnemonicWalletSubprovider = /** @class */ (function (_super) {\n    __extends(MnemonicWalletSubprovider, _super);\n    /**\n     * Instantiates a MnemonicWalletSubprovider. Defaults to baseDerivationPath set to `44'/60'/0'/0`.\n     * This is the default in TestRPC/Ganache, it can be overridden if desired.\n     * @param config Configuration for the mnemonic wallet, must contain the mnemonic\n     * @return MnemonicWalletSubprovider instance\n     */\n    function MnemonicWalletSubprovider(config) {\n        var _this = this;\n        assert_1.assert.isString('mnemonic', config.mnemonic);\n        var baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n        assert_1.assert.isString('baseDerivationPath', baseDerivationPath);\n        var addressSearchLimit = config.addressSearchLimit || DEFAULT_ADDRESS_SEARCH_LIMIT;\n        assert_1.assert.isNumber('addressSearchLimit', addressSearchLimit);\n        _this = _super.call(this) || this;\n        _this._mnemonic = config.mnemonic;\n        _this._baseDerivationPath = baseDerivationPath;\n        _this._addressSearchLimit = addressSearchLimit;\n        _this._derivedKeyInfo = _this._initialDerivedKeyInfo(_this._baseDerivationPath);\n        return _this;\n    }\n    /**\n     * Retrieve the set derivation path\n     * @returns derivation path\n     */\n    MnemonicWalletSubprovider.prototype.getPath = function () {\n        return this._baseDerivationPath;\n    };\n    /**\n     * Set a desired derivation path when computing the available user addresses\n     * @param baseDerivationPath The desired derivation path (e.g `44'/60'/0'`)\n     */\n    MnemonicWalletSubprovider.prototype.setPath = function (baseDerivationPath) {\n        this._baseDerivationPath = baseDerivationPath;\n        this._derivedKeyInfo = this._initialDerivedKeyInfo(this._baseDerivationPath);\n    };\n    /**\n     * Retrieve the accounts associated with the mnemonic.\n     * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n     * via your providerEngine instance.\n     * @param numberOfAccounts Number of accounts to retrieve (default: 10)\n     * @return An array of accounts\n     */\n    MnemonicWalletSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n        if (numberOfAccounts === void 0) { numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH; }\n        return __awaiter(this, void 0, void 0, function () {\n            var derivedKeys, accounts;\n            return __generator(this, function (_a) {\n                derivedKeys = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(this._derivedKeyInfo, numberOfAccounts);\n                accounts = _.map(derivedKeys, function (k) { return k.address; });\n                return [2 /*return*/, accounts];\n            });\n        });\n    };\n    /**\n     * Signs a transaction with the account specificed by the `from` field in txParams.\n     * If you've added this Subprovider to your  app's provider, you can simply send\n     * an `eth_sendTransaction` JSON RPC request, and this method will be called auto-magically.\n     * If you are not using this via a ProviderEngine instance, you can call it directly.\n     * @param txParams Parameters of the transaction to sign\n     * @return Signed transaction hex string\n     */\n    MnemonicWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var privateKeyWallet, signedTx;\n            return __generator(this, function (_a) {\n                if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) {\n                    throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n                }\n                privateKeyWallet = this._privateKeyWalletForAddress(txParams.from);\n                signedTx = privateKeyWallet.signTransactionAsync(txParams);\n                return [2 /*return*/, signedTx];\n            });\n        });\n    };\n    /**\n     * Sign a personal Ethereum signed message. The signing account will be the account\n     * associated with the provided address. If you've added the MnemonicWalletSubprovider to\n     * your app's provider, you can simply send an `eth_sign` or `personal_sign` JSON RPC request,\n     * and this method will be called auto-magically. If you are not using this via a ProviderEngine\n     * instance, you can call it directly.\n     * @param data Hex string message to sign\n     * @param address Address of the account to sign with\n     * @return Signature hex string (order: rsv)\n     */\n    MnemonicWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var privateKeyWallet, sig;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (data === undefined) {\n                            throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n                        }\n                        assert_1.assert.isHexString('data', data);\n                        assert_1.assert.isETHAddressHex('address', address);\n                        privateKeyWallet = this._privateKeyWalletForAddress(address);\n                        return [4 /*yield*/, privateKeyWallet.signPersonalMessageAsync(data, address)];\n                    case 1:\n                        sig = _a.sent();\n                        return [2 /*return*/, sig];\n                }\n            });\n        });\n    };\n    /**\n     * Sign an EIP712 Typed Data message. The signing account will be the account\n     * associated with the provided address. If you've added this MnemonicWalletSubprovider to\n     * your app's provider, you can simply send an `eth_signTypedData` JSON RPC request, and\n     * this method will be called auto-magically. If you are not using this via a ProviderEngine\n     *  instance, you can call it directly.\n     * @param address Address of the account to sign with\n     * @param data the typed data object\n     * @return Signature hex string (order: rsv)\n     */\n    MnemonicWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var privateKeyWallet, sig;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (typedData === undefined) {\n                            throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n                        }\n                        assert_1.assert.isETHAddressHex('address', address);\n                        privateKeyWallet = this._privateKeyWalletForAddress(address);\n                        return [4 /*yield*/, privateKeyWallet.signTypedDataAsync(address, typedData)];\n                    case 1:\n                        sig = _a.sent();\n                        return [2 /*return*/, sig];\n                }\n            });\n        });\n    };\n    MnemonicWalletSubprovider.prototype._privateKeyWalletForAddress = function (address) {\n        var derivedKeyInfo = this._findDerivedKeyInfoForAddress(address);\n        var privateKeyHex = derivedKeyInfo.hdKey.privateKey.toString('hex');\n        var privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKeyHex);\n        return privateKeyWallet;\n    };\n    MnemonicWalletSubprovider.prototype._findDerivedKeyInfoForAddress = function (address) {\n        var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, this._derivedKeyInfo, this._addressSearchLimit);\n        if (matchedDerivedKeyInfo === undefined) {\n            throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n        }\n        return matchedDerivedKeyInfo;\n    };\n    MnemonicWalletSubprovider.prototype._initialDerivedKeyInfo = function (baseDerivationPath) {\n        var seed = bip39.mnemonicToSeed(this._mnemonic);\n        var hdKey = HDNode.fromMasterSeed(seed);\n        // Walk down to base derivation level (i.e m/44'/60'/0') and create an initial key at that level\n        // all children will then be walked relative (i.e m/0)\n        var parentKeyDerivationPath = \"m/\" + baseDerivationPath;\n        var parentHDKeyAtDerivationPath = hdKey.derive(parentKeyDerivationPath);\n        var address = wallet_utils_1.walletUtils.addressOfHDKey(parentHDKeyAtDerivationPath);\n        var derivedKeyInfo = {\n            address: address,\n            baseDerivationPath: baseDerivationPath,\n            derivationPath: parentKeyDerivationPath,\n            hdKey: parentHDKeyAtDerivationPath,\n        };\n        return derivedKeyInfo;\n    };\n    return MnemonicWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider));\nexports.MnemonicWalletSubprovider = MnemonicWalletSubprovider;\n//# sourceMappingURL=mnemonic_wallet.js.map"]},"metadata":{},"sourceType":"script"}