{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar CHAIN_ID = 1;\n\nvar WalletLinkConnector =\n/*#__PURE__*/\nfunction (_AbstractConnector) {\n  _inheritsLoose(WalletLinkConnector, _AbstractConnector);\n\n  function WalletLinkConnector(_ref) {\n    var _this;\n\n    var url = _ref.url,\n        appName = _ref.appName,\n        appLogoUrl = _ref.appLogoUrl;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [CHAIN_ID]\n    }) || this;\n    _this.url = url;\n    _this.appName = appName;\n    _this.appLogoUrl = appLogoUrl;\n    _this.handleAccountsChanged = _this.handleAccountsChanged.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = WalletLinkConnector.prototype;\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        _this3.provider.on('accountsChanged', _this3.handleAccountsChanged);\n\n        return Promise.resolve(_this3.provider.send('eth_requestAccounts').then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.provider,\n            chainId: CHAIN_ID,\n            account: account\n          };\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.walletLink) {\n          return Promise.resolve(import('walletlink')).then(function (_ref2) {\n            var WalletLink = _ref2[\"default\"];\n            _this3.walletLink = new WalletLink(_extends({\n              appName: _this3.appName\n            }, _this3.appLogoUrl ? {\n              appLogoUrl: _this3.appLogoUrl\n            } : {}));\n            _this3.provider = _this3.walletLink.makeWeb3Provider(_this3.url, CHAIN_ID);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    return Promise.resolve(CHAIN_ID);\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.provider.send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\n  };\n\n  return WalletLinkConnector;\n}(AbstractConnector);\n\nexport { WalletLinkConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["CHAIN_ID","WalletLinkConnector","url","appName","appLogoUrl","supportedChainIds","handleAccountsChanged","console","account","accounts","walletLink","WalletLink","provider","chainId","deactivate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,QAAQ,GAAd,CAAA;;AAQA,IAAaC,mBAAb;;AAAA,UAAA,kBAAA,EAAA;;;;;;QAQgBC,GAAAA,GAAAA,IAAAA,CAAAA,G;QAAKC,OAAAA,GAAAA,IAAAA,CAAAA,O;QAASC,UAAAA,GAAAA,IAAAA,CAAAA,U;0CACpB;AAAEC,MAAAA,iBAAiB,EAAE,CAAA,QAAA;AAArB,K,KAAN,I;UAEA,G,GAAA,G;UACA,O,GAAA,O;UACA,U,GAAA,U;UAEA,qB,GAA6B,KAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,sBAAA,CAA7B,KAA6B,CAAA,C;;;;;;SAfjC,qB,GAkBUC,SAAAA,qBAAAA,CAAAA,QAAAA,EAAAA;+CACO;AACXC,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,+CAAAA,EAAAA,QAAAA;;;SAEF,U,CAAgB;AAAEC,MAAAA,OAAO,EAAEC,QAAQ,CAAA,CAAA;AAAnB,K;AAtBpB,G;;SAAA,Q,GAAA,SAAA,QAAA,GAAA;;;eAmCI,Q,CAAA,E,CAAA,iB,EAAoC,MAAA,CAApC,qB;;+BAEsB,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,qBAAA,EAAA,IAAA,CAA+C,UAAA,QAAA,EAAA;iBAAgCA,QAAQ,CAAxC,CAAwC,C;AAAvF,SAAA,C,EAAA,I,CAAA,UAAhBD,OAAgB,EAAhBA;iBAEC;AAAEI,YAAAA,QAAQ,EAAE,MAAA,CAAZ,QAAA;AAA2BC,YAAAA,OAAO,EAAlC,QAAA;AAA8CL,YAAAA,OAAO,EAAEA;AAAvD,W;;;;mBAbF,I;;;YAAD,CAAC,MAAA,CAAKE,U,EAAAA;iCAC8B,OAAA,YAAA,C,EAAA,I,CAAA,UAAA,KAAA,EAAA;gBAArBC,UAAAA,GAAAA,KAAAA,CAAAA,SAAAA,C;mBACjB,U,GAAkB,IAAA,UAAA,CAAA,QAAA,CAAA;AAChBR,cAAAA,OAAO,EAAE,MAAA,CAAKA;AADE,aAAA,EAEZ,MAAA,CAAA,UAAA,GAAkB;AAAEC,cAAAA,UAAU,EAAE,MAAA,CAAKA;AAAnB,aAAlB,GAFN,EAAkB,CAAA,C;mBAIlB,Q,GAAgB,MAAA,CAAA,UAAA,CAAA,gBAAA,CAAiC,MAAA,CAAjC,GAAA,EAAhB,QAAgB,C;;;;;;AAhCtB,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,W,GAAA,SAAA,WAAA,GAAA;;mBA2CW,I;;6BAAA,MAAA,CAAP,Q;AA3CJ,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,U,GAAA,SAAA,UAAA,GAAA;2BA+CI,Q;AA/CJ,G;;SAAA,U,GAAA,SAAA,UAAA,GAAA;;mBAmDW,I;;6BAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,cAAA,EAAA,IAAA,CAAwC,UAAA,QAAA,EAAA;eAAgCK,QAAQ,CAAxC,CAAwC,C;AAAvF,OAAO,C;AAnDX,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,U,GAsDSK,SAAAA,UAAAA,GAAAA;SACL,Q,CAAA,c,CAAA,iB,EAAgD,KAAhD,qB;AAvDJ,G;;;CAAA,CAAA,iBAAA,CAAA","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: [CHAIN_ID] })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletLink) {\n      const { default: WalletLink } = await import('walletlink')\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    const account = await this.provider.send('eth_requestAccounts').then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.provider, chainId: CHAIN_ID, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return CHAIN_ID\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}