{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\n\n\nvar _utils = require(\"./utils\");\n\nvar _errors = require(\"@ledgerhq/errors\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar remapTransactionRelatedErrors = function remapTransactionRelatedErrors(e) {\n  if (e && e.statusCode === 0x6a80) {\n    return new _errors.EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nvar Eth = function () {\n  function Eth(transport) {\n    var scrambleKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"w0w\";\n\n    _classCallCheck(this, Eth);\n\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  _createClass(Eth, [{\n    key: \"getAddress\",\n    value: function getAddress(path, boolDisplay, boolChaincode) {\n      var paths = (0, _utils.splitPath)(path);\n      var buffer = new Buffer(1 + paths.length * 4);\n      buffer[0] = paths.length;\n      paths.forEach(function (element, index) {\n        buffer.writeUInt32BE(element, 1 + 4 * index);\n      });\n      return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(function (response) {\n        var result = {};\n        var publicKeyLength = response[0];\n        var addressLength = response[1 + publicKeyLength];\n        result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n        result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n        if (boolChaincode) {\n          result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n        }\n\n        return result;\n      });\n    }\n    /**\n     * This commands provides a trusted description of an ERC 20 token\n     * to associate a contract address with a ticker and number of decimals.\n     *\n     * It shall be run immediately before performing a transaction involving a contract\n     * calling this contract address to display the proper token information to the user if necessary.\n     *\n     * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n     *\n     * @example\n     * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n     * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n     * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n     * const signed = await appEth.signTransaction(path, rawTxHex)\n     */\n\n  }, {\n    key: \"provideERC20TokenInformation\",\n    value: function provideERC20TokenInformation(_ref) {\n      var data = _ref.data;\n      return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(function () {\n        return true;\n      }, function (e) {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n\n        throw e;\n      });\n    }\n    /**\n     * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n     * @example\n     eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n     */\n\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(path, rawTxHex) {\n      var _this = this;\n\n      var paths = (0, _utils.splitPath)(path);\n      var offset = 0;\n      var rawTx = new Buffer(rawTxHex, \"hex\");\n      var toSend = [];\n      var response = void 0;\n\n      var _loop = function _loop() {\n        var maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n        var chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n        var buffer = new Buffer(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n        if (offset === 0) {\n          buffer[0] = paths.length;\n          paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n          });\n          rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n        } else {\n          rawTx.copy(buffer, 0, offset, offset + chunkSize);\n        }\n\n        toSend.push(buffer);\n        offset += chunkSize;\n      };\n\n      while (offset !== rawTx.length) {\n        _loop();\n      }\n\n      return (0, _utils.foreach)(toSend, function (data, i) {\n        return _this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(function (apduResponse) {\n          response = apduResponse;\n        });\n      }).then(function () {\n        var v = response.slice(0, 1).toString(\"hex\");\n        var r = response.slice(1, 1 + 32).toString(\"hex\");\n        var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          v: v,\n          r: r,\n          s: s\n        };\n      }, function (e) {\n        throw remapTransactionRelatedErrors(e);\n      });\n    }\n    /**\n     */\n\n  }, {\n    key: \"getAppConfiguration\",\n    value: function getAppConfiguration() {\n      return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(function (response) {\n        var result = {};\n        result.arbitraryDataEnabled = response[0] & 0x01;\n        result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n        return result;\n      });\n    }\n    /**\n    * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n    * @example\n    eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n    var v = result['v'] - 27;\n    v = v.toString(16);\n    if (v.length < 2) {\n      v = \"0\" + v;\n    }\n    console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n    })\n     */\n\n  }, {\n    key: \"signPersonalMessage\",\n    value: function signPersonalMessage(path, messageHex) {\n      var _this2 = this;\n\n      var paths = (0, _utils.splitPath)(path);\n      var offset = 0;\n      var message = new Buffer(messageHex, \"hex\");\n      var toSend = [];\n      var response = void 0;\n\n      var _loop2 = function _loop2() {\n        var maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n        var chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n        var buffer = new Buffer(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n        if (offset === 0) {\n          buffer[0] = paths.length;\n          paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n          });\n          buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n          message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n        } else {\n          message.copy(buffer, 0, offset, offset + chunkSize);\n        }\n\n        toSend.push(buffer);\n        offset += chunkSize;\n      };\n\n      while (offset !== message.length) {\n        _loop2();\n      }\n\n      return (0, _utils.foreach)(toSend, function (data, i) {\n        return _this2.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(function (apduResponse) {\n          response = apduResponse;\n        });\n      }).then(function () {\n        var v = response[0];\n        var r = response.slice(1, 1 + 32).toString(\"hex\");\n        var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          v: v,\n          r: r,\n          s: s\n        };\n      });\n    }\n  }]);\n\n  return Eth;\n}();\n\nexports.default = Eth;","map":{"version":3,"sources":["../src/Eth.js"],"names":["remapTransactionRelatedErrors","e","Eth","scrambleKey","transport","path","boolDisplay","boolChaincode","paths","buffer","result","publicKeyLength","response","addressLength","data","rawTxHex","offset","rawTx","toSend","maxChunkSize","chunkSize","i","v","r","s","messageHex","message"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport type Transport from \"@ledgerhq/hw-transport\";\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Contract data on the Ethereum app Settings\"\n    );\n  }\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nexport default class Eth {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"w0w\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\"\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string\n  }> {\n    let paths = splitPath(path);\n    let buffer = new Buffer(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then(response => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\");\n        result.address =\n          \"0x\" +\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\");\n        if (boolChaincode) {\n          result.chainCode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            )\n            .toString(\"hex\");\n        }\n        return result;\n      });\n  }\n\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n      () => true,\n      e => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = new Buffer(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      let buffer = new Buffer(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(\n      () => {\n        const v = response.slice(0, 1).toString(\"hex\");\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      },\n      e => {\n        throw remapTransactionRelatedErrors(e);\n      }\n    );\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    version: string\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\neth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = new Buffer(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      let buffer = new Buffer(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return { v, r, s };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}