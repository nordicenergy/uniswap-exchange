{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n};\n\nvar FortmaticConnector =\n/*#__PURE__*/\nfunction (_AbstractConnector) {\n  _inheritsLoose(FortmaticConnector, _AbstractConnector);\n\n  function FortmaticConnector(_ref) {\n    var _this;\n\n    var apiKey = _ref.apiKey,\n        chainId = _ref.chainId;\n    !Object.keys(chainIdToNetwork).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Unsupported chainId \" + chainId) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.apiKey = apiKey;\n    _this.chainId = chainId;\n    return _this;\n  }\n\n  var _proto = FortmaticConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.fortmatic.getProvider().enable().then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.fortmatic.getProvider(),\n            chainId: _this3.chainId,\n            account: account\n          };\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.fortmatic) {\n          return Promise.resolve(import('fortmatic')).then(function (_ref2) {\n            var Fortmatic = _ref2[\"default\"];\n            _this3.fortmatic = new Fortmatic(_this3.apiKey, _this3.chainId === 1 || _this3.chainId === 4 ? undefined : chainIdToNetwork[_this3.chainId]);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.fortmatic.getProvider());\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.fortmatic.getProvider().send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {};\n\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n\n      return Promise.resolve(_this11.fortmatic.user.logout()).then(function () {\n        _this11.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return FortmaticConnector;\n}(AbstractConnector);\n\nexport { FortmaticConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","supportedChainIds","fortmatic","Fortmatic","account","accounts","provider","deactivate"],"mappings":";;;;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;KAAA,SAAA;KAAA,SAAA;KAAA,SAAA;MAIlD;AAJkD,CAAxD;;AAYA,IAAaC,kBAAb;;AAAA,UAAA,kBAAA,EAAA;;;;;;QAMgBC,MAAAA,GAAAA,IAAAA,CAAAA,M;QAAQC,OAAAA,GAAAA,IAAAA,CAAAA,O;KACVC,MAAM,CAANA,IAAAA,CAAAA,gBAAAA,EAAAA,QAAAA,CAAuCD,OAAO,CAAxD,QAAiDA,EAAvCC,C,GAAV,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAA,yBAAT,OAAS,CAAT,GAAA,SAAS,CAAT,KAAS,C,GAAT,KAAA,C;0CACM;AAAEC,MAAAA,iBAAiB,EAAE,CAAA,OAAA;AAArB,K,KAAN,I;UAEA,M,GAAA,M;UACA,O,GAAA,O;;;;;;SAXJ,Q,GAAA,SAAA,QAAA,GAAA;;;+BAuB0B,MAAA,CAAA,SAAA,CAAA,WAAA,GAAA,MAAA,GAAA,IAAA,CAGd,UAAA,QAAA,EAAA;iBAAgCI,QAAQ,CAAxC,CAAwC,C;AAH1B,SAAA,C,EAAA,I,CAAA,UAAhBD,OAAgB,EAAhBA;iBAKC;AAAEE,YAAAA,QAAQ,EAAE,MAAA,CAAA,SAAA,CAAZ,WAAY,EAAZ;AAA0CP,YAAAA,OAAO,EAAE,MAAA,CAAnD,OAAA;AAAiEK,YAAAA,OAAO,EAAPA;AAAjE,W;;;;mBAbF,I;;;YAAD,CAAC,MAAA,CAAKF,S,EAAAA;iCAC6B,OAAA,WAAA,C,EAAA,I,CAAA,UAAA,KAAA,EAAA;gBAApBC,SAAAA,GAAAA,KAAAA,CAAAA,SAAAA,C;mBACjB,S,GAAiB,IAAA,SAAA,CACf,MAAA,CADe,MAAA,EAEf,MAAA,CAAA,OAAA,KAAA,CAAA,IAAsB,MAAA,CAAA,OAAA,KAAtB,CAAA,GAAA,SAAA,GAAuDP,gBAAgB,CAAC,MAAA,CAF1E,OAEyE,CAFxD,C;;;;;;AAjBvB,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,W,GAAA,SAAA,WAAA,GAAA;;mBAgCW,I;;6BAAA,MAAA,CAAA,SAAA,CAAP,WAAO,E;AAhCX,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,U,GAAA,SAAA,UAAA,GAAA;;mBAoCW,I;;6BAAA,MAAA,CAAP,O;AApCJ,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,U,GAAA,SAAA,UAAA,GAAA;;mBAwCW,I;;6BAAA,MAAA,CAAA,SAAA,CAAA,WAAA,GAAA,IAAA,CAAA,cAAA,EAAA,IAAA,CAGC,UAAA,QAAA,EAAA;eAAgCS,QAAQ,CAAxC,CAAwC,C;AAHhD,OAAO,C;AAxCX,K,CAAA,OAAA,CAAA,EAAA;;;;;SAAA,U,GA8CSE,SAAAA,UAAAA,GAAAA,CA9CT,C;;SAAA,K,GAAA,SAAA,KAAA,GAAA;;oBAiDU,I;;6BAAA,OAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,E,EAAA,I,CAAA,YAAA;gBACN,c;;AAlDJ,K,CAAA,OAAA,CAAA,EAAA;;;;;;CAAA,CAAA,iBAAA,CAAA","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}