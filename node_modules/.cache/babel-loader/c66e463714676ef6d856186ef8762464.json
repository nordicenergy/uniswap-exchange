{"ast":null,"code":"import _slicedToArray from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/workspace/uniswap-exchange/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{createContext,useContext,useReducer,useMemo,useCallback,useEffect}from'react';import{useWeb3Context}from'web3-react';import{safeAccess,isAddress,getEtherBalance,getTokenBalance}from'../utils';import{useBlockNumber}from'./Application';import{useTokenDetails}from'./Tokens';var UPDATE='UPDATE';var BalancesContext=createContext();function useBalancesContext(){return useContext(BalancesContext);}function reducer(state,_ref){var type=_ref.type,payload=_ref.payload;switch(type){case UPDATE:{var networkId=payload.networkId,address=payload.address,tokenAddress=payload.tokenAddress,value=payload.value,blockNumber=payload.blockNumber;return _objectSpread({},state,_defineProperty({},networkId,_objectSpread({},safeAccess(state,[networkId])||{},_defineProperty({},address,_objectSpread({},safeAccess(state,[networkId,address])||{},_defineProperty({},tokenAddress,{value:value,blockNumber:blockNumber}))))));}default:{throw Error(\"Unexpected action type in BalancesContext reducer: '\".concat(type,\"'.\"));}}}export default function Provider(_ref2){var children=_ref2.children;var _useReducer=useReducer(reducer,{}),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];var update=useCallback(function(networkId,address,tokenAddress,value,blockNumber){dispatch({type:UPDATE,payload:{networkId:networkId,address:address,tokenAddress:tokenAddress,value:value,blockNumber:blockNumber}});},[]);return React.createElement(BalancesContext.Provider,{value:useMemo(function(){return[state,{update:update}];},[state,update])},children);}export function useAddressBalance(address,tokenAddress){var _useWeb3Context=useWeb3Context(),networkId=_useWeb3Context.networkId,library=_useWeb3Context.library;var globalBlockNumber=useBlockNumber();var _useBalancesContext=useBalancesContext(),_useBalancesContext2=_slicedToArray(_useBalancesContext,2),state=_useBalancesContext2[0],update=_useBalancesContext2[1].update;var _ref3=safeAccess(state,[networkId,address,tokenAddress])||{},value=_ref3.value,blockNumber=_ref3.blockNumber;useEffect(function(){if(isAddress(address)&&(tokenAddress==='ETH'||isAddress(tokenAddress))&&(value===undefined||blockNumber!==globalBlockNumber)&&(networkId||networkId===0)&&library){var stale=false;(tokenAddress==='ETH'?getEtherBalance(address,library):getTokenBalance(tokenAddress,address,library)).then(function(value){if(!stale){update(networkId,address,tokenAddress,value,globalBlockNumber);}}).catch(function(){if(!stale){update(networkId,address,tokenAddress,null,globalBlockNumber);}});return function(){stale=true;};}},[address,tokenAddress,value,blockNumber,globalBlockNumber,networkId,library,update]);return value;}export function useExchangeReserves(tokenAddress){var _useTokenDetails=useTokenDetails(tokenAddress),exchangeAddress=_useTokenDetails.exchangeAddress;var reserveETH=useAddressBalance(exchangeAddress,'ETH');var reserveToken=useAddressBalance(exchangeAddress,tokenAddress);return{reserveETH:reserveETH,reserveToken:reserveToken};}","map":{"version":3,"sources":["/workspace/uniswap-exchange/src/contexts/Balances.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","useWeb3Context","safeAccess","isAddress","getEtherBalance","getTokenBalance","useBlockNumber","useTokenDetails","UPDATE","BalancesContext","useBalancesContext","reducer","state","type","payload","networkId","address","tokenAddress","value","blockNumber","Error","Provider","children","dispatch","update","useAddressBalance","library","globalBlockNumber","undefined","stale","then","catch","useExchangeReserves","exchangeAddress","reserveETH","reserveToken"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react'\nimport { useWeb3Context } from 'web3-react'\n\nimport { safeAccess, isAddress, getEtherBalance, getTokenBalance } from '../utils'\nimport { useBlockNumber } from './Application'\nimport { useTokenDetails } from './Tokens'\n\nconst UPDATE = 'UPDATE'\n\nconst BalancesContext = createContext()\n\nfunction useBalancesContext() {\n  return useContext(BalancesContext)\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case UPDATE: {\n      const { networkId, address, tokenAddress, value, blockNumber } = payload\n      return {\n        ...state,\n        [networkId]: {\n          ...(safeAccess(state, [networkId]) || {}),\n          [address]: {\n            ...(safeAccess(state, [networkId, address]) || {}),\n            [tokenAddress]: {\n              value,\n              blockNumber\n            }\n          }\n        }\n      }\n    }\n    default: {\n      throw Error(`Unexpected action type in BalancesContext reducer: '${type}'.`)\n    }\n  }\n}\n\nexport default function Provider({ children }) {\n  const [state, dispatch] = useReducer(reducer, {})\n\n  const update = useCallback((networkId, address, tokenAddress, value, blockNumber) => {\n    dispatch({ type: UPDATE, payload: { networkId, address, tokenAddress, value, blockNumber } })\n  }, [])\n\n  return (\n    <BalancesContext.Provider value={useMemo(() => [state, { update }], [state, update])}>\n      {children}\n    </BalancesContext.Provider>\n  )\n}\n\nexport function useAddressBalance(address, tokenAddress) {\n  const { networkId, library } = useWeb3Context()\n\n  const globalBlockNumber = useBlockNumber()\n\n  const [state, { update }] = useBalancesContext()\n  const { value, blockNumber } = safeAccess(state, [networkId, address, tokenAddress]) || {}\n\n  useEffect(() => {\n    if (\n      isAddress(address) &&\n      (tokenAddress === 'ETH' || isAddress(tokenAddress)) &&\n      (value === undefined || blockNumber !== globalBlockNumber) &&\n      (networkId || networkId === 0) &&\n      library\n    ) {\n      let stale = false\n      ;(tokenAddress === 'ETH' ? getEtherBalance(address, library) : getTokenBalance(tokenAddress, address, library))\n        .then(value => {\n          if (!stale) {\n            update(networkId, address, tokenAddress, value, globalBlockNumber)\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            update(networkId, address, tokenAddress, null, globalBlockNumber)\n          }\n        })\n\n      return () => {\n        stale = true\n      }\n    }\n  }, [address, tokenAddress, value, blockNumber, globalBlockNumber, networkId, library, update])\n\n  return value\n}\n\nexport function useExchangeReserves(tokenAddress) {\n  const { exchangeAddress } = useTokenDetails(tokenAddress)\n\n  const reserveETH = useAddressBalance(exchangeAddress, 'ETH')\n  const reserveToken = useAddressBalance(exchangeAddress, tokenAddress)\n\n  return { reserveETH, reserveToken }\n}\n"]},"metadata":{},"sourceType":"module"}