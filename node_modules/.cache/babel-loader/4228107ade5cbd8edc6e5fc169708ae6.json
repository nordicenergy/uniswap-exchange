{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\n\n\nexports.marshaller = {\n  /**\n   * Unmarshall block without transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block without transaction data\n   */\n  unmarshalIntoBlockWithoutTransactionData: function unmarshalIntoBlockWithoutTransactionData(blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty)\n    });\n\n    return block;\n  },\n\n  /**\n   * Unmarshall block with transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block with transaction data\n   */\n  unmarshalIntoBlockWithTransactionData: function unmarshalIntoBlockWithTransactionData(blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty),\n      transactions: []\n    });\n\n    block.transactions = _.map(blockWithHexValues.transactions, function (tx) {\n      var transaction = exports.marshaller.unmarshalTransaction(tx);\n      return transaction;\n    });\n    return block;\n  },\n\n  /**\n   * Unmarshall transaction\n   * @param txRpc transaction to unmarshall\n   * @return unmarshalled transaction\n   */\n  unmarshalTransaction: function unmarshalTransaction(txRpc) {\n    var tx = __assign({}, txRpc, {\n      blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null,\n      transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null,\n      nonce: utils_2.utils.convertHexToNumber(txRpc.nonce),\n      gas: utils_2.utils.convertHexToNumber(txRpc.gas),\n      gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice),\n      value: utils_2.utils.convertAmountToBigNumber(txRpc.value)\n    });\n\n    return tx;\n  },\n\n  /**\n   * Unmarshall transaction receipt\n   * @param txReceiptRpc transaction receipt to unmarshall\n   * @return unmarshalled transaction receipt\n   */\n  unmarshalTransactionReceipt: function unmarshalTransactionReceipt(txReceiptRpc) {\n    var txReceipt = __assign({}, txReceiptRpc, {\n      blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex),\n      cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed),\n      gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed),\n      logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller))\n    });\n\n    return txReceipt;\n  },\n\n  /**\n   * Unmarshall transaction data\n   * @param txDataRpc transaction data to unmarshall\n   * @return unmarshalled transaction data\n   */\n  unmarshalTxData: function unmarshalTxData(txDataRpc) {\n    if (txDataRpc.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n\n    var txData = __assign({}, txDataRpc, {\n      value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,\n      gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,\n      gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,\n      nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined\n    });\n\n    return txData;\n  },\n\n  /**\n   * Marshall transaction data\n   * @param txData transaction data to marshall\n   * @return marshalled transaction data\n   */\n  marshalTxData: function marshalTxData(txData) {\n    if (txData.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n\n    var callTxDataBase = __assign({}, txData);\n\n    delete callTxDataBase.from;\n\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    var txDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: exports.marshaller.marshalAddress(txData.from)\n    });\n\n    var prunableIfUndefined = ['gasPrice', 'gas', 'value', 'nonce'];\n\n    _.each(txDataRPC, function (value, key) {\n      if (value === undefined && _.includes(prunableIfUndefined, key)) {\n        delete txDataRPC[key];\n      }\n    });\n\n    return txDataRPC;\n  },\n\n  /**\n   * Marshall call data\n   * @param callData call data to marshall\n   * @return marshalled call data\n   */\n  marshalCallData: function marshalCallData(callData) {\n    var callTxDataBase = __assign({}, callData);\n\n    delete callTxDataBase.from;\n\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    var callDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from)\n    });\n\n    return callDataRPC;\n  },\n\n  /**\n   * Marshall address\n   * @param address address to marshall\n   * @return marshalled address\n   */\n  marshalAddress: function marshalAddress(address) {\n    if (utils_1.addressUtils.isAddress(address)) {\n      return ethUtil.addHexPrefix(address);\n    }\n\n    throw new Error(\"Invalid address encountered: \" + address);\n  },\n\n  /**\n   * Marshall block param\n   * @param blockParam block param to marshall\n   * @return marshalled block param\n   */\n  marshalBlockParam: function marshalBlockParam(blockParam) {\n    if (blockParam === undefined) {\n      return ethereum_types_1.BlockParamLiteral.Latest;\n    }\n\n    var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n    return encodedBlockParam;\n  },\n\n  /**\n   * Unmarshall log\n   * @param rawLog log to unmarshall\n   * @return unmarshalled log\n   */\n  unmarshalLog: function unmarshalLog(rawLog) {\n    var formattedLog = __assign({}, rawLog, {\n      logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex),\n      blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex)\n    });\n\n    return formattedLog;\n  },\n  _marshalCallTxDataBase: function _marshalCallTxDataBase(callTxDataBase) {\n    var callTxDataBaseRPC = __assign({}, callTxDataBase, {\n      to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),\n      gasPrice: callTxDataBase.gasPrice === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),\n      gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),\n      value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),\n      nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce)\n    });\n\n    return callTxDataBaseRPC;\n  }\n};","map":{"version":3,"sources":["../../src/marshaller.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@0x/utils\");\nvar ethereum_types_1 = require(\"ethereum-types\");\nvar ethUtil = require(\"ethereumjs-util\");\nvar _ = require(\"lodash\");\nvar utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\nexports.marshaller = {\n    /**\n     * Unmarshall block without transaction data\n     * @param blockWithHexValues block to unmarshall\n     * @return unmarshalled block without transaction data\n     */\n    unmarshalIntoBlockWithoutTransactionData: function (blockWithHexValues) {\n        var block = __assign({}, blockWithHexValues, { gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit), gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed), size: utils_2.utils.convertHexToNumber(blockWithHexValues.size), timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp), number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number), difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty), totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty) });\n        return block;\n    },\n    /**\n     * Unmarshall block with transaction data\n     * @param blockWithHexValues block to unmarshall\n     * @return unmarshalled block with transaction data\n     */\n    unmarshalIntoBlockWithTransactionData: function (blockWithHexValues) {\n        var block = __assign({}, blockWithHexValues, { gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit), gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed), size: utils_2.utils.convertHexToNumber(blockWithHexValues.size), timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp), number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number), difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty), totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty), transactions: [] });\n        block.transactions = _.map(blockWithHexValues.transactions, function (tx) {\n            var transaction = exports.marshaller.unmarshalTransaction(tx);\n            return transaction;\n        });\n        return block;\n    },\n    /**\n     * Unmarshall transaction\n     * @param txRpc transaction to unmarshall\n     * @return unmarshalled transaction\n     */\n    unmarshalTransaction: function (txRpc) {\n        var tx = __assign({}, txRpc, { blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null, transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null, nonce: utils_2.utils.convertHexToNumber(txRpc.nonce), gas: utils_2.utils.convertHexToNumber(txRpc.gas), gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice), value: utils_2.utils.convertAmountToBigNumber(txRpc.value) });\n        return tx;\n    },\n    /**\n     * Unmarshall transaction receipt\n     * @param txReceiptRpc transaction receipt to unmarshall\n     * @return unmarshalled transaction receipt\n     */\n    unmarshalTransactionReceipt: function (txReceiptRpc) {\n        var txReceipt = __assign({}, txReceiptRpc, { blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber), transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex), cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed), gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed), logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller)) });\n        return txReceipt;\n    },\n    /**\n     * Unmarshall transaction data\n     * @param txDataRpc transaction data to unmarshall\n     * @return unmarshalled transaction data\n     */\n    unmarshalTxData: function (txDataRpc) {\n        if (txDataRpc.from === undefined) {\n            throw new Error(\"txData must include valid 'from' value.\");\n        }\n        var txData = __assign({}, txDataRpc, { value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined, gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined, gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined, nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined });\n        return txData;\n    },\n    /**\n     * Marshall transaction data\n     * @param txData transaction data to marshall\n     * @return marshalled transaction data\n     */\n    marshalTxData: function (txData) {\n        if (txData.from === undefined) {\n            throw new Error(\"txData must include valid 'from' value.\");\n        }\n        var callTxDataBase = __assign({}, txData);\n        delete callTxDataBase.from;\n        var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n        var txDataRPC = __assign({}, callTxDataBaseRPC, { from: exports.marshaller.marshalAddress(txData.from) });\n        var prunableIfUndefined = ['gasPrice', 'gas', 'value', 'nonce'];\n        _.each(txDataRPC, function (value, key) {\n            if (value === undefined && _.includes(prunableIfUndefined, key)) {\n                delete txDataRPC[key];\n            }\n        });\n        return txDataRPC;\n    },\n    /**\n     * Marshall call data\n     * @param callData call data to marshall\n     * @return marshalled call data\n     */\n    marshalCallData: function (callData) {\n        var callTxDataBase = __assign({}, callData);\n        delete callTxDataBase.from;\n        var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n        var callDataRPC = __assign({}, callTxDataBaseRPC, { from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from) });\n        return callDataRPC;\n    },\n    /**\n     * Marshall address\n     * @param address address to marshall\n     * @return marshalled address\n     */\n    marshalAddress: function (address) {\n        if (utils_1.addressUtils.isAddress(address)) {\n            return ethUtil.addHexPrefix(address);\n        }\n        throw new Error(\"Invalid address encountered: \" + address);\n    },\n    /**\n     * Marshall block param\n     * @param blockParam block param to marshall\n     * @return marshalled block param\n     */\n    marshalBlockParam: function (blockParam) {\n        if (blockParam === undefined) {\n            return ethereum_types_1.BlockParamLiteral.Latest;\n        }\n        var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n        return encodedBlockParam;\n    },\n    /**\n     * Unmarshall log\n     * @param rawLog log to unmarshall\n     * @return unmarshalled log\n     */\n    unmarshalLog: function (rawLog) {\n        var formattedLog = __assign({}, rawLog, { logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex), blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber), transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex) });\n        return formattedLog;\n    },\n    _marshalCallTxDataBase: function (callTxDataBase) {\n        var callTxDataBaseRPC = __assign({}, callTxDataBase, { to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to), gasPrice: callTxDataBase.gasPrice === undefined\n                ? undefined\n                : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice), gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas), value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value), nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce) });\n        return callTxDataBaseRPC;\n    },\n};\n//# sourceMappingURL=marshaller.js.map"]},"metadata":{},"sourceType":"script"}