{"version":3,"file":"fortmatic-connector.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","invariant","supportedChainIds","activate","fortmatic","getProvider","enable","then","accounts","account","provider","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","user","logout","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;KACnD,SADmD;KAEnD,SAFmD;KAGnD,SAHmD;MAIlD;CAJN;AAYA,IAAaC,kBAAb;;AAAA;;;;;;QAMgBC,cAAAA;QAAQC,eAAAA;KACVC,MAAM,CAACC,IAAP,CAAYL,gBAAZ,EAA8BM,QAA9B,CAAuCH,OAAO,CAACI,QAAR,EAAvC,CAAV,IAAAC,SAAS,iCAAoFL,OAApF,CAAT,CAAA;0CACM;MAAEM,iBAAiB,EAAE,CAACN,OAAD;KAA3B;UAEKD,MAAL,GAAcA,MAAd;UACKC,OAAL,GAAeA,OAAf;;;;;;SAGWO,QAdf;;;+BAuB0B,OAAKC,SAAL,CACnBC,WADmB,GAEnBC,MAFmB,GAGnBC,IAHmB,CAGd,UAACC,QAAD;iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;SAHc,kBAAhBC;iBAKC;YAAEC,QAAQ,EAAE,OAAKN,SAAL,CAAeC,WAAf,EAAZ;YAA0CT,OAAO,EAAE,OAAKA,OAAxD;YAAiEa,OAAO,EAAPA;WAAxE;;;;mBAbK;;;YAAD,CAAC,OAAKL;iCAC6B,mEAAO,WAAP;gBAApBO;mBACZP,SAAL,GAAiB,IAAIO,SAAJ,CACf,OAAKhB,MADU,EAEf,OAAKC,OAAL,KAAiB,CAAjB,IAAsB,OAAKA,OAAL,KAAiB,CAAvC,GAA2CgB,SAA3C,GAAuDnB,gBAAgB,CAAC,OAAKG,OAAN,CAFxD,CAAjB;;;;;;KAjBN;;;;;SA+BeS,WA/Bf;;mBAgCW;;6BAAA,OAAKD,SAAL,CAAeC,WAAf,EAAP;KAhCJ;;;;;SAmCeQ,UAnCf;;mBAoCW;;6BAAA,OAAKjB,OAAZ;KApCJ;;;;;SAuCekB,UAvCf;;mBAwCW;;6BAAA,OAAKV,SAAL,CACJC,WADI,GAEJU,IAFI,CAEC,cAFD,EAGJR,IAHI,CAGC,UAACC,QAAD;eAAgCA,QAAQ,CAAC,CAAD,CAAxC;OAHD,CAAP;KAxCJ;;;;;SA8CSQ,UA9CT,GA8CS,wBA9CT;;SAgDeC,KAhDf;;oBAiDU;;6BAAA,QAAKb,SAAL,CAAec,IAAf,CAAoBC,MAApB;gBACDC,cAAL;;KAlDJ;;;;;;EAAwCC,mCAAxC;;;;"}