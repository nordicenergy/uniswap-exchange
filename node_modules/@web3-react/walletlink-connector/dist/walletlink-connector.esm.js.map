{"version":3,"file":"walletlink-connector.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: [CHAIN_ID] })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletLink) {\n      const { default: WalletLink } = await import('walletlink')\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    const account = await this.provider.send('eth_requestAccounts').then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.provider, chainId: CHAIN_ID, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return CHAIN_ID\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n}\n"],"names":["CHAIN_ID","WalletLinkConnector","url","appName","appLogoUrl","supportedChainIds","handleAccountsChanged","bind","accounts","console","log","emitUpdate","account","activate","provider","on","send","then","chainId","walletLink","WalletLink","makeWeb3Provider","getProvider","getChainId","getAccount","deactivate","removeListener","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,QAAQ,GAAG,CAAjB;AAQA,IAAaC,mBAAb;;AAAA;;;;;;QAQgBC,WAAAA;QAAKC,eAAAA;QAASC,kBAAAA;0CACpB;MAAEC,iBAAiB,EAAE,CAACL,QAAD;KAA3B;UAEKE,GAAL,GAAWA,GAAX;UACKC,OAAL,GAAeA,OAAf;UACKC,UAAL,GAAkBA,UAAlB;UAEKE,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BC,IAA3B,+BAA7B;;;;;;SAGMD,qBAlBV,GAkBU,+BAAsBE,QAAtB;+CACO;MACXC,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DF,QAA7D;;;SAEGG,UAAL,CAAgB;MAAEC,OAAO,EAAEJ,QAAQ,CAAC,CAAD;KAAnC;GAtBJ;;SAyBeK,QAzBf;;;eAmCSC,QAAL,CAAcC,EAAd,CAAiB,iBAAjB,EAAoC,OAAKT,qBAAzC;;+BAEsB,OAAKQ,QAAL,CAAcE,IAAd,CAAmB,qBAAnB,EAA0CC,IAA1C,CAA+C,UAACT,QAAD;iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;SAA/C,kBAAhBI;iBAEC;YAAEE,QAAQ,EAAE,OAAKA,QAAjB;YAA2BI,OAAO,EAAElB,QAApC;YAA8CY,OAAO,EAAEA;WAA9D;;;;mBAbK;;;YAAD,CAAC,OAAKO;iCAC8B,OAAO,YAAP;gBAArBC;mBACZD,UAAL,GAAkB,IAAIC,UAAJ;cAChBjB,OAAO,EAAE,OAAKA;eACV,OAAKC,UAAL,GAAkB;cAAEA,UAAU,EAAE,OAAKA;aAArC,GAAoD,EAFxC,EAAlB;mBAIKU,QAAL,GAAgB,OAAKK,UAAL,CAAgBE,gBAAhB,CAAiC,OAAKnB,GAAtC,EAA2CF,QAA3C,CAAhB;;;;;;KAhCN;;;;;SA0CesB,WA1Cf;;mBA2CW;;6BAAA,OAAKR,QAAZ;KA3CJ;;;;;SA8CeS,UA9Cf;2BA+CWvB,QAAP;GA/CJ;;SAkDewB,UAlDf;;mBAmDW;;6BAAA,OAAKV,QAAL,CAAcE,IAAd,CAAmB,cAAnB,EAAmCC,IAAnC,CAAwC,UAACT,QAAD;eAAgCA,QAAQ,CAAC,CAAD,CAAxC;OAAxC,CAAP;KAnDJ;;;;;SAsDSiB,UAtDT,GAsDS;SACAX,QAAL,CAAcY,cAAd,CAA6B,iBAA7B,EAAgD,KAAKpB,qBAArD;GAvDJ;;;EAAyCqB,iBAAzC;;;;"}