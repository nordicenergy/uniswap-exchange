{"version":3,"file":"walletlink-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: [CHAIN_ID] })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletLink) {\n      const { default: WalletLink } = await import('walletlink')\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    const account = await this.provider.send('eth_requestAccounts').then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.provider, chainId: CHAIN_ID, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return CHAIN_ID\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n}\n"],"names":["CHAIN_ID","url","appName","appLogoUrl","supportedChainIds","handleAccountsChanged","_this","bind","accounts","emitUpdate","account","activate","provider","on","_this3","send","then","chainId","this","walletLink","WalletLink","makeWeb3Provider","getProvider","getChainId","getAccount","deactivate","removeListener","AbstractConnector"],"mappings":"4QAGA,IAAMA,EAAW,8BAQjB,wCAQgBC,IAAAA,IAAKC,IAAAA,QAASC,IAAAA,gCACpB,CAAEC,kBAAmB,CAACJ,YAEvBC,IAAMA,IACNC,QAAUA,IACVC,WAAaA,IAEbE,sBAAwBC,EAAKD,sBAAsBE,uPAGlDF,sBAAA,SAAsBG,QAIvBC,WAAW,CAAEC,QAASF,EAAS,QAGzBG,kDAUNC,SAASC,GAAG,kBAAmBC,EAAKT,uCAEnBS,EAAKF,SAASG,KAAK,uBAAuBC,MAAK,SAACR,UAA+BA,EAAS,sBAAxGE,SAEC,CAAEE,SAAUE,EAAKF,SAAUK,QAASjB,EAAUU,QAASA,SAbzDQ,sBAAAJ,EAAKK,kCAC8B,8QAAO,wCACxCA,WAAa,IAAIC,gBACpBlB,QAASY,EAAKZ,SACVY,EAAKX,WAAa,CAAEA,WAAYW,EAAKX,YAAe,OAErDS,SAAWE,EAAKK,WAAWE,iBAAiBP,EAAKb,IAAKD,+FAUlDsB,kDACJJ,KAAKN,gDAGDW,6CACJvB,MAGIwB,iDACJN,KAAKN,SAASG,KAAK,gBAAgBC,MAAK,SAACR,UAA+BA,EAAS,6CAGnFiB,WAAA,gBACAb,SAASc,eAAe,kBAAmBR,KAAKb,0BAvDzD,CAAyCsB"}